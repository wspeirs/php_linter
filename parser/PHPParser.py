# Generated from /home/wspeirs/src/php_linter_public/parser/PHPParser.g4 by ANTLR 4.7
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00e5")
        buf.write("\u0664\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\3\2\5\2\u010e")
        buf.write("\n\2\3\2\7\2\u0111\n\2\f\2\16\2\u0114\13\2\3\2\3\2\3\3")
        buf.write("\3\3\3\3\5\3\u011b\n\3\3\4\3\4\3\5\6\5\u0120\n\5\r\5\16")
        buf.write("\5\u0121\3\6\7\6\u0125\n\6\f\6\16\6\u0128\13\6\3\6\6\6")
        buf.write("\u012b\n\6\r\6\16\6\u012c\3\7\3\7\3\7\3\7\3\7\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\5\b\u013b\n\b\3\t\3\t\5\t\u013f\n")
        buf.write("\t\3\t\3\t\3\t\3\n\5\n\u0145\n\n\3\n\3\n\3\n\5\n\u014a")
        buf.write("\n\n\3\n\7\n\u014d\n\n\f\n\16\n\u0150\13\n\3\13\3\13\3")
        buf.write("\13\5\13\u0155\n\13\3\f\3\f\5\f\u0159\n\f\3\f\3\f\7\f")
        buf.write("\u015d\n\f\f\f\16\f\u0160\13\f\3\f\3\f\3\f\3\f\5\f\u0166")
        buf.write("\n\f\3\r\3\r\3\r\3\r\3\r\5\r\u016d\n\r\3\16\3\16\3\16")
        buf.write("\5\16\u0172\n\16\3\16\3\16\5\16\u0176\n\16\3\16\3\16\3")
        buf.write("\16\3\16\3\16\3\17\3\17\5\17\u017f\n\17\3\17\5\17\u0182")
        buf.write("\n\17\3\17\5\17\u0185\n\17\3\17\3\17\3\17\5\17\u018a\n")
        buf.write("\17\3\17\3\17\5\17\u018e\n\17\3\17\3\17\5\17\u0192\n\17")
        buf.write("\3\17\3\17\3\17\5\17\u0197\n\17\3\17\3\17\5\17\u019b\n")
        buf.write("\17\5\17\u019d\n\17\3\17\3\17\7\17\u01a1\n\17\f\17\16")
        buf.write("\17\u01a4\13\17\3\17\3\17\3\20\3\20\3\21\3\21\3\21\7\21")
        buf.write("\u01ad\n\21\f\21\16\21\u01b0\13\21\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22")
        buf.write("\u01c0\n\22\3\23\3\23\3\23\7\23\u01c5\n\23\f\23\16\23")
        buf.write("\u01c8\13\23\3\24\3\24\3\24\7\24\u01cd\n\24\f\24\16\24")
        buf.write("\u01d0\13\24\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\5")
        buf.write("\26\u01da\n\26\3\27\3\27\3\27\3\27\7\27\u01e0\n\27\f\27")
        buf.write("\16\27\u01e3\13\27\3\27\3\27\3\30\7\30\u01e8\n\30\f\30")
        buf.write("\16\30\u01eb\13\30\3\31\3\31\3\31\3\31\5\31\u01f1\n\31")
        buf.write("\3\31\3\31\3\31\7\31\u01f6\n\31\f\31\16\31\u01f9\13\31")
        buf.write("\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u020f")
        buf.write("\n\32\3\33\3\33\3\33\7\33\u0214\n\33\f\33\16\33\u0217")
        buf.write("\13\33\3\34\3\34\3\34\7\34\u021c\n\34\f\34\16\34\u021f")
        buf.write("\13\34\3\35\3\35\3\35\3\35\3\36\7\36\u0226\n\36\f\36\16")
        buf.write("\36\u0229\13\36\3\37\3\37\3\37\5\37\u022e\n\37\3 \3 \5")
        buf.write(" \u0232\n \3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\5\"\u0250\n\"\3#\3#\3#\3#\3$\3$\3$\3$\7$")
        buf.write("\u025a\n$\f$\16$\u025d\13$\3$\5$\u0260\n$\3$\3$\3$\3$")
        buf.write("\3$\7$\u0267\n$\f$\16$\u026a\13$\3$\5$\u026d\n$\3$\3$")
        buf.write("\3$\5$\u0272\n$\3%\3%\3%\3%\3&\3&\3&\3&\3&\3\'\3\'\3\'")
        buf.write("\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3)\3)\5)\u028c\n)\3*\3")
        buf.write("*\3*\3*\3*\3*\3+\3+\3+\5+\u0297\n+\3+\3+\5+\u029b\n+\3")
        buf.write("+\3+\5+\u029f\n+\3+\3+\3+\3+\3+\3+\3+\5+\u02a8\n+\3,\3")
        buf.write(",\3-\3-\3.\3.\3.\3.\5.\u02b2\n.\3.\7.\u02b5\n.\f.\16.")
        buf.write("\u02b8\13.\3.\3.\3.\5.\u02bd\n.\3.\7.\u02c0\n.\f.\16.")
        buf.write("\u02c3\13.\3.\3.\5.\u02c7\n.\3/\3/\3/\5/\u02cc\n/\3/\6")
        buf.write("/\u02cf\n/\r/\16/\u02d0\3/\3/\3\60\3\60\5\60\u02d7\n\60")
        buf.write("\3\60\3\60\3\61\3\61\5\61\u02dd\n\61\3\61\3\61\3\62\3")
        buf.write("\62\5\62\u02e3\n\62\3\62\3\62\3\63\3\63\3\63\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\5\65\u02f5")
        buf.write("\n\65\3\65\3\65\3\65\5\65\u02fa\n\65\3\65\5\65\u02fd\n")
        buf.write("\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u0307")
        buf.write("\n\65\3\65\5\65\u030a\n\65\3\65\3\65\3\65\3\65\3\65\3")
        buf.write("\65\3\65\3\65\3\65\3\65\3\65\5\65\u0317\n\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\3\65\5\65\u031f\n\65\3\66\3\66\3\66\6")
        buf.write("\66\u0324\n\66\r\66\16\66\u0325\3\66\5\66\u0329\n\66\3")
        buf.write("\66\7\66\u032c\n\66\f\66\16\66\u032f\13\66\3\66\5\66\u0332")
        buf.write("\n\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\38\38\38\39\3")
        buf.write("9\39\39\3:\3:\3:\3:\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\5;\u0350")
        buf.write("\n;\3<\3<\6<\u0354\n<\r<\16<\u0355\3=\3=\3=\7=\u035b\n")
        buf.write("=\f=\16=\u035e\13=\3>\5>\u0361\n>\3>\3>\7>\u0365\n>\f")
        buf.write(">\16>\u0368\13>\3?\3?\5?\u036c\n?\3?\5?\u036f\n?\3?\5")
        buf.write("?\u0372\n?\3?\3?\3@\3@\3@\5@\u0379\n@\3A\3A\3A\3A\7A\u037f")
        buf.write("\nA\fA\16A\u0382\13A\3A\3A\3B\3B\3B\3B\3B\3B\3B\3B\5B")
        buf.write("\u038e\nB\3C\3C\3C\3C\3D\3D\3D\3D\7D\u0398\nD\fD\16D\u039b")
        buf.write("\13D\3D\3D\3E\3E\3E\3E\3E\7E\u03a4\nE\fE\16E\u03a7\13")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\7E\u03b0\nE\fE\16E\u03b3\13E\3")
        buf.write("E\3E\3E\3E\5E\u03b9\nE\3E\3E\5E\u03bd\nE\3E\3E\5E\u03c1")
        buf.write("\nE\3E\3E\3E\3E\5E\u03c7\nE\3E\3E\3E\3E\3E\3E\5E\u03cf")
        buf.write("\nE\3F\3F\3F\7F\u03d4\nF\fF\16F\u03d7\13F\3F\5F\u03da")
        buf.write("\nF\3G\3G\5G\u03de\nG\3H\3H\3H\3H\3H\3H\3H\3I\3I\3I\3")
        buf.write("I\5I\u03eb\nI\3I\5I\u03ee\nI\3I\3I\3J\3J\3J\5J\u03f5\n")
        buf.write("J\3J\3J\3K\3K\3K\3K\3L\3L\5L\u03ff\nL\3M\3M\5M\u0403\n")
        buf.write("M\3N\6N\u0406\nN\rN\16N\u0407\3O\3O\3O\5O\u040d\nO\3P")
        buf.write("\3P\3P\3P\3Q\3Q\3Q\3Q\3Q\7Q\u0418\nQ\fQ\16Q\u041b\13Q")
        buf.write("\3Q\3Q\3R\3R\3R\7R\u0422\nR\fR\16R\u0425\13R\3S\3S\3S")
        buf.write("\5S\u042a\nS\3S\3S\3T\3T\3T\3T\3T\3T\5T\u0434\nT\3T\3")
        buf.write("T\3T\3T\3T\3T\3T\3T\3T\3T\3T\7T\u0441\nT\fT\16T\u0444")
        buf.write("\13T\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3")
        buf.write("U\3U\7U\u0458\nU\fU\16U\u045b\13U\3V\3V\3V\3V\3V\3V\3")
        buf.write("V\3V\3V\3V\3V\3V\7V\u0469\nV\fV\16V\u046c\13V\3W\3W\3")
        buf.write("W\3W\3W\3W\7W\u0474\nW\fW\16W\u0477\13W\3X\3X\3X\3X\3")
        buf.write("X\3X\5X\u047f\nX\3X\3X\3X\3X\3X\3X\7X\u0487\nX\fX\16X")
        buf.write("\u048a\13X\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3")
        buf.write("Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u04ab")
        buf.write("\nY\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u04b8\nY\3Y\3")
        buf.write("Y\3Y\5Y\u04bd\nY\3Y\5Y\u04c0\nY\3Y\3Y\3Y\3Y\5Y\u04c6\n")
        buf.write("Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3")
        buf.write("Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u04e3\nY\3Y\3Y\3Y\3Y\3")
        buf.write("Y\5Y\u04ea\nY\3Y\3Y\5Y\u04ee\nY\3Y\3Y\3Y\3Y\5Y\u04f4\n")
        buf.write("Y\3Y\3Y\5Y\u04f8\nY\3Z\3Z\3Z\5Z\u04fd\nZ\3[\3[\3\\\3\\")
        buf.write("\3\\\3\\\5\\\u0505\n\\\3]\3]\3]\7]\u050a\n]\f]\16]\u050d")
        buf.write("\13]\3]\5]\u0510\n]\3^\3^\3^\5^\u0515\n^\3^\3^\3^\5^\u051a")
        buf.write("\n^\3^\3^\5^\u051e\n^\3_\3_\3_\3_\3_\7_\u0525\n_\f_\16")
        buf.write("_\u0528\13_\3_\3_\3`\5`\u052d\n`\3`\3`\3a\3a\5a\u0533")
        buf.write("\na\3a\5a\u0536\na\3b\3b\5b\u053a\nb\3b\5b\u053d\nb\3")
        buf.write("b\3b\5b\u0541\nb\3c\3c\3c\7c\u0546\nc\fc\16c\u0549\13")
        buf.write("c\3d\5d\u054c\nd\3d\5d\u054f\nd\3d\3d\3e\3e\3e\7e\u0556")
        buf.write("\ne\fe\16e\u0559\13e\3f\3f\3f\7f\u055e\nf\ff\16f\u0561")
        buf.write("\13f\3g\3g\3g\3g\7g\u0567\ng\fg\16g\u056a\13g\3g\5g\u056d")
        buf.write("\ng\3g\3g\3h\5h\u0572\nh\3h\3h\3h\5h\u0577\nh\3i\3i\3")
        buf.write("i\3i\3i\3i\5i\u057f\ni\5i\u0581\ni\3i\3i\3i\3i\5i\u0587")
        buf.write("\ni\5i\u0589\ni\3i\3i\3i\5i\u058e\ni\3j\3j\3j\7j\u0593")
        buf.write("\nj\fj\16j\u0596\13j\3k\3k\3k\5k\u059b\nk\3l\3l\3l\3l")
        buf.write("\3l\5l\u05a2\nl\3m\3m\3m\3m\5m\u05a8\nm\3n\3n\3o\3o\3")
        buf.write("o\3o\3o\3o\5o\u05b2\no\3o\3o\5o\u05b6\no\3o\3o\3o\5o\u05bb")
        buf.write("\no\3p\3p\3q\3q\6q\u05c1\nq\rq\16q\u05c2\3q\3q\6q\u05c7")
        buf.write("\nq\rq\16q\u05c8\3q\3q\3q\7q\u05ce\nq\fq\16q\u05d1\13")
        buf.write("q\3q\5q\u05d4\nq\3r\3r\5r\u05d8\nr\3s\3s\3s\7s\u05dd\n")
        buf.write("s\fs\16s\u05e0\13s\3t\3t\3t\3t\3t\3t\5t\u05e8\nt\3t\7")
        buf.write("t\u05eb\nt\ft\16t\u05ee\13t\3u\3u\3u\5u\u05f3\nu\3v\3")
        buf.write("v\3v\3w\3w\3w\5w\u05fb\nw\3x\5x\u05fe\nx\3x\3x\7x\u0602")
        buf.write("\nx\fx\16x\u0605\13x\3y\3y\3y\5y\u060a\ny\3y\3y\3y\3y")
        buf.write("\5y\u0610\ny\3z\3z\5z\u0614\nz\3{\3{\3{\3{\3{\5{\u061b")
        buf.write("\n{\3{\7{\u061e\n{\f{\16{\u0621\13{\3|\7|\u0624\n|\f|")
        buf.write("\16|\u0627\13|\3|\3|\3|\3|\3|\3|\5|\u062f\n|\3|\7|\u0632")
        buf.write("\n|\f|\16|\u0635\13|\3}\3}\5}\u0639\n}\3}\3}\3}\3}\3}")
        buf.write("\5}\u0640\n}\3~\5~\u0643\n~\3~\3~\5~\u0647\n~\7~\u0649")
        buf.write("\n~\f~\16~\u064c\13~\3\177\3\177\3\177\3\177\3\177\3\177")
        buf.write("\5\177\u0654\n\177\3\u0080\3\u0080\3\u0081\3\u0081\3\u0082")
        buf.write("\3\u0082\3\u0083\3\u0083\3\u0084\3\u0084\3\u0085\3\u0085")
        buf.write("\3\u0086\3\u0086\3\u0086\2\7\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u0087\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,")
        buf.write(".\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080")
        buf.write("\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092")
        buf.write("\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4")
        buf.write("\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6")
        buf.write("\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8")
        buf.write("\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da")
        buf.write("\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec")
        buf.write("\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe")
        buf.write("\u0100\u0102\u0104\u0106\u0108\u010a\2\33\13\2\4\4\6\7")
        buf.write("\t\n\16\25\27\27\32\33\36\37\"\"$$\4\2\66\66OO\4\2\64")
        buf.write("\64uu\3\2\u00ce\u00cf\3\2\u00b1\u00b2\4\2\u00a0\u00a1")
        buf.write("\u00b7\u00b8\3\2\u009c\u009f\4\2\u00bd\u00be\u00c5\u00c5")
        buf.write("\3\2\u00bf\u00c1\3\2\u00c2\u00c3\4\2\u00bb\u00bb\u00bd")
        buf.write("\u00be\3\2\u009a\u009b\3\2UV\3\2mn\5\2\u00a2\u00a4\u00a6")
        buf.write("\u00ae\u00d0\u00d0\3\2\u00bd\u00be\4\2\u00d5\u00d6\u00d8")
        buf.write("\u00d9\4\2\64\64gg\4\2**JJ\4\2*\u0096\u00d4\u00d4\6\2")
        buf.write("**JJjlqq\3\2\u008f\u0096\3\2\177\u008e\t\2++..<<[\\ff")
        buf.write("oorr\13\2++-.;<LLY\\ffoorrxz\2\u06f2\2\u010d\3\2\2\2\4")
        buf.write("\u011a\3\2\2\2\6\u011c\3\2\2\2\b\u011f\3\2\2\2\n\u0126")
        buf.write("\3\2\2\2\f\u012e\3\2\2\2\16\u013a\3\2\2\2\20\u013c\3\2")
        buf.write("\2\2\22\u0144\3\2\2\2\24\u0151\3\2\2\2\26\u0156\3\2\2")
        buf.write("\2\30\u016c\3\2\2\2\32\u016e\3\2\2\2\34\u017c\3\2\2\2")
        buf.write("\36\u01a7\3\2\2\2 \u01a9\3\2\2\2\"\u01bf\3\2\2\2$\u01c1")
        buf.write("\3\2\2\2&\u01c9\3\2\2\2(\u01d1\3\2\2\2*\u01d4\3\2\2\2")
        buf.write(",\u01db\3\2\2\2.\u01e9\3\2\2\2\60\u01ec\3\2\2\2\62\u020e")
        buf.write("\3\2\2\2\64\u0210\3\2\2\2\66\u0218\3\2\2\28\u0220\3\2")
        buf.write("\2\2:\u0227\3\2\2\2<\u022d\3\2\2\2>\u0231\3\2\2\2@\u0233")
        buf.write("\3\2\2\2B\u024f\3\2\2\2D\u0251\3\2\2\2F\u0271\3\2\2\2")
        buf.write("H\u0273\3\2\2\2J\u0277\3\2\2\2L\u027c\3\2\2\2N\u027f\3")
        buf.write("\2\2\2P\u0283\3\2\2\2R\u028d\3\2\2\2T\u0293\3\2\2\2V\u02a9")
        buf.write("\3\2\2\2X\u02ab\3\2\2\2Z\u02ad\3\2\2\2\\\u02ce\3\2\2\2")
        buf.write("^\u02d4\3\2\2\2`\u02da\3\2\2\2b\u02e0\3\2\2\2d\u02e6\3")
        buf.write("\2\2\2f\u02e9\3\2\2\2h\u02ef\3\2\2\2j\u0320\3\2\2\2l\u0333")
        buf.write("\3\2\2\2n\u033a\3\2\2\2p\u033d\3\2\2\2r\u0341\3\2\2\2")
        buf.write("t\u0345\3\2\2\2v\u0353\3\2\2\2x\u0357\3\2\2\2z\u0360\3")
        buf.write("\2\2\2|\u0369\3\2\2\2~\u0378\3\2\2\2\u0080\u037a\3\2\2")
        buf.write("\2\u0082\u038d\3\2\2\2\u0084\u038f\3\2\2\2\u0086\u0393")
        buf.write("\3\2\2\2\u0088\u03ce\3\2\2\2\u008a\u03d9\3\2\2\2\u008c")
        buf.write("\u03dd\3\2\2\2\u008e\u03df\3\2\2\2\u0090\u03e6\3\2\2\2")
        buf.write("\u0092\u03f4\3\2\2\2\u0094\u03f8\3\2\2\2\u0096\u03fe\3")
        buf.write("\2\2\2\u0098\u0402\3\2\2\2\u009a\u0405\3\2\2\2\u009c\u0409")
        buf.write("\3\2\2\2\u009e\u040e\3\2\2\2\u00a0\u0412\3\2\2\2\u00a2")
        buf.write("\u041e\3\2\2\2\u00a4\u0426\3\2\2\2\u00a6\u042d\3\2\2\2")
        buf.write("\u00a8\u0445\3\2\2\2\u00aa\u045c\3\2\2\2\u00ac\u046d\3")
        buf.write("\2\2\2\u00ae\u047e\3\2\2\2\u00b0\u04f7\3\2\2\2\u00b2\u04f9")
        buf.write("\3\2\2\2\u00b4\u04fe\3\2\2\2\u00b6\u0500\3\2\2\2\u00b8")
        buf.write("\u0506\3\2\2\2\u00ba\u051d\3\2\2\2\u00bc\u051f\3\2\2\2")
        buf.write("\u00be\u052c\3\2\2\2\u00c0\u0535\3\2\2\2\u00c2\u0540\3")
        buf.write("\2\2\2\u00c4\u0542\3\2\2\2\u00c6\u054b\3\2\2\2\u00c8\u0552")
        buf.write("\3\2\2\2\u00ca\u055a\3\2\2\2\u00cc\u0562\3\2\2\2\u00ce")
        buf.write("\u0576\3\2\2\2\u00d0\u058d\3\2\2\2\u00d2\u058f\3\2\2\2")
        buf.write("\u00d4\u0597\3\2\2\2\u00d6\u05a1\3\2\2\2\u00d8\u05a7\3")
        buf.write("\2\2\2\u00da\u05a9\3\2\2\2\u00dc\u05ba\3\2\2\2\u00de\u05bc")
        buf.write("\3\2\2\2\u00e0\u05d3\3\2\2\2\u00e2\u05d7\3\2\2\2\u00e4")
        buf.write("\u05d9\3\2\2\2\u00e6\u05e7\3\2\2\2\u00e8\u05ef\3\2\2\2")
        buf.write("\u00ea\u05f4\3\2\2\2\u00ec\u05fa\3\2\2\2\u00ee\u05fd\3")
        buf.write("\2\2\2\u00f0\u060f\3\2\2\2\u00f2\u0613\3\2\2\2\u00f4\u061a")
        buf.write("\3\2\2\2\u00f6\u0625\3\2\2\2\u00f8\u063f\3\2\2\2\u00fa")
        buf.write("\u0642\3\2\2\2\u00fc\u0653\3\2\2\2\u00fe\u0655\3\2\2\2")
        buf.write("\u0100\u0657\3\2\2\2\u0102\u0659\3\2\2\2\u0104\u065b\3")
        buf.write("\2\2\2\u0106\u065d\3\2\2\2\u0108\u065f\3\2\2\2\u010a\u0661")
        buf.write("\3\2\2\2\u010c\u010e\7\13\2\2\u010d\u010c\3\2\2\2\u010d")
        buf.write("\u010e\3\2\2\2\u010e\u0112\3\2\2\2\u010f\u0111\5\4\3\2")
        buf.write("\u0110\u010f\3\2\2\2\u0111\u0114\3\2\2\2\u0112\u0110\3")
        buf.write("\2\2\2\u0112\u0113\3\2\2\2\u0113\u0115\3\2\2\2\u0114\u0112")
        buf.write("\3\2\2\2\u0115\u0116\7\2\2\3\u0116\3\3\2\2\2\u0117\u011b")
        buf.write("\5\6\4\2\u0118\u011b\5\n\6\2\u0119\u011b\5\b\5\2\u011a")
        buf.write("\u0117\3\2\2\2\u011a\u0118\3\2\2\2\u011a\u0119\3\2\2\2")
        buf.write("\u011b\5\3\2\2\2\u011c\u011d\t\2\2\2\u011d\7\3\2\2\2\u011e")
        buf.write("\u0120\7!\2\2\u011f\u011e\3\2\2\2\u0120\u0121\3\2\2\2")
        buf.write("\u0121\u011f\3\2\2\2\u0121\u0122\3\2\2\2\u0122\t\3\2\2")
        buf.write("\2\u0123\u0125\5\f\7\2\u0124\u0123\3\2\2\2\u0125\u0128")
        buf.write("\3\2\2\2\u0126\u0124\3\2\2\2\u0126\u0127\3\2\2\2\u0127")
        buf.write("\u012a\3\2\2\2\u0128\u0126\3\2\2\2\u0129\u012b\5\16\b")
        buf.write("\2\u012a\u0129\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012a")
        buf.write("\3\2\2\2\u012c\u012d\3\2\2\2\u012d\13\3\2\2\2\u012e\u012f")
        buf.write("\7T\2\2\u012f\u0130\7c\2\2\u0130\u0131\5\u00c8e\2\u0131")
        buf.write("\u0132\7\u00cf\2\2\u0132\r\3\2\2\2\u0133\u013b\5@!\2\u0134")
        buf.write("\u013b\5B\"\2\u0135\u013b\5\20\t\2\u0136\u013b\5\26\f")
        buf.write("\2\u0137\u013b\5\32\16\2\u0138\u013b\5\34\17\2\u0139\u013b")
        buf.write("\5\u00a0Q\2\u013a\u0133\3\2\2\2\u013a\u0134\3\2\2\2\u013a")
        buf.write("\u0135\3\2\2\2\u013a\u0136\3\2\2\2\u013a\u0137\3\2\2\2")
        buf.write("\u013a\u0138\3\2\2\2\u013a\u0139\3\2\2\2\u013b\17\3\2")
        buf.write("\2\2\u013c\u013e\7{\2\2\u013d\u013f\t\3\2\2\u013e\u013d")
        buf.write("\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u0140\3\2\2\2\u0140")
        buf.write("\u0141\5\22\n\2\u0141\u0142\7\u00cf\2\2\u0142\21\3\2\2")
        buf.write("\2\u0143\u0145\7\u00b5\2\2\u0144\u0143\3\2\2\2\u0144\u0145")
        buf.write("\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u014e\5\24\13\2\u0147")
        buf.write("\u0149\7\u00cd\2\2\u0148\u014a\7\u00b5\2\2\u0149\u0148")
        buf.write("\3\2\2\2\u0149\u014a\3\2\2\2\u014a\u014b\3\2\2\2\u014b")
        buf.write("\u014d\5\24\13\2\u014c\u0147\3\2\2\2\u014d\u0150\3\2\2")
        buf.write("\2\u014e\u014c\3\2\2\2\u014e\u014f\3\2\2\2\u014f\23\3")
        buf.write("\2\2\2\u0150\u014e\3\2\2\2\u0151\u0154\5\u00c8e\2\u0152")
        buf.write("\u0153\7,\2\2\u0153\u0155\5\u0100\u0081\2\u0154\u0152")
        buf.write("\3\2\2\2\u0154\u0155\3\2\2\2\u0155\25\3\2\2\2\u0156\u0165")
        buf.write("\7c\2\2\u0157\u0159\5\u00c8e\2\u0158\u0157\3\2\2\2\u0158")
        buf.write("\u0159\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015e\7\u00cb")
        buf.write("\2\2\u015b\u015d\5\30\r\2\u015c\u015b\3\2\2\2\u015d\u0160")
        buf.write("\3\2\2\2\u015e\u015c\3\2\2\2\u015e\u015f\3\2\2\2\u015f")
        buf.write("\u0161\3\2\2\2\u0160\u015e\3\2\2\2\u0161\u0166\7\u00cc")
        buf.write("\2\2\u0162\u0163\5\u00c8e\2\u0163\u0164\7\u00cf\2\2\u0164")
        buf.write("\u0166\3\2\2\2\u0165\u0158\3\2\2\2\u0165\u0162\3\2\2\2")
        buf.write("\u0166\27\3\2\2\2\u0167\u016d\5B\"\2\u0168\u016d\5\20")
        buf.write("\t\2\u0169\u016d\5\32\16\2\u016a\u016d\5\34\17\2\u016b")
        buf.write("\u016d\5\u00a0Q\2\u016c\u0167\3\2\2\2\u016c\u0168\3\2")
        buf.write("\2\2\u016c\u0169\3\2\2\2\u016c\u016a\3\2\2\2\u016c\u016b")
        buf.write("\3\2\2\2\u016d\31\3\2\2\2\u016e\u016f\5.\30\2\u016f\u0171")
        buf.write("\7O\2\2\u0170\u0172\7\u00b9\2\2\u0171\u0170\3\2\2\2\u0171")
        buf.write("\u0172\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0175\5\u0100")
        buf.write("\u0081\2\u0174\u0176\5\"\22\2\u0175\u0174\3\2\2\2\u0175")
        buf.write("\u0176\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u0178\7\u00c7")
        buf.write("\2\2\u0178\u0179\5z>\2\u0179\u017a\7\u00c8\2\2\u017a\u017b")
        buf.write("\5D#\2\u017b\33\3\2\2\2\u017c\u017e\5.\30\2\u017d\u017f")
        buf.write("\7j\2\2\u017e\u017d\3\2\2\2\u017e\u017f\3\2\2\2\u017f")
        buf.write("\u0181\3\2\2\2\u0180\u0182\5\u00fe\u0080\2\u0181\u0180")
        buf.write("\3\2\2\2\u0181\u0182\3\2\2\2\u0182\u0184\3\2\2\2\u0183")
        buf.write("\u0185\7h\2\2\u0184\u0183\3\2\2\2\u0184\u0185\3\2\2\2")
        buf.write("\u0185\u019c\3\2\2\2\u0186\u0187\5\36\20\2\u0187\u0189")
        buf.write("\5\u0100\u0081\2\u0188\u018a\5\"\22\2\u0189\u0188\3\2")
        buf.write("\2\2\u0189\u018a\3\2\2\2\u018a\u018d\3\2\2\2\u018b\u018c")
        buf.write("\7I\2\2\u018c\u018e\5\u00c0a\2\u018d\u018b\3\2\2\2\u018d")
        buf.write("\u018e\3\2\2\2\u018e\u0191\3\2\2\2\u018f\u0190\7S\2\2")
        buf.write("\u0190\u0192\5 \21\2\u0191\u018f\3\2\2\2\u0191\u0192\3")
        buf.write("\2\2\2\u0192\u019d\3\2\2\2\u0193\u0194\7]\2\2\u0194\u0196")
        buf.write("\5\u0100\u0081\2\u0195\u0197\5\"\22\2\u0196\u0195\3\2")
        buf.write("\2\2\u0196\u0197\3\2\2\2\u0197\u019a\3\2\2\2\u0198\u0199")
        buf.write("\7I\2\2\u0199\u019b\5 \21\2\u019a\u0198\3\2\2\2\u019a")
        buf.write("\u019b\3\2\2\2\u019b\u019d\3\2\2\2\u019c\u0186\3\2\2\2")
        buf.write("\u019c\u0193\3\2\2\2\u019d\u019e\3\2\2\2\u019e\u01a2\7")
        buf.write("\u00cb\2\2\u019f\u01a1\5\u0088E\2\u01a0\u019f\3\2\2\2")
        buf.write("\u01a1\u01a4\3\2\2\2\u01a2\u01a0\3\2\2\2\u01a2\u01a3\3")
        buf.write("\2\2\2\u01a3\u01a5\3\2\2\2\u01a4\u01a2\3\2\2\2\u01a5\u01a6")
        buf.write("\7\u00cc\2\2\u01a6\35\3\2\2\2\u01a7\u01a8\t\4\2\2\u01a8")
        buf.write("\37\3\2\2\2\u01a9\u01ae\5\u00c0a\2\u01aa\u01ab\7\u00cd")
        buf.write("\2\2\u01ab\u01ad\5\u00c0a\2\u01ac\u01aa\3\2\2\2\u01ad")
        buf.write("\u01b0\3\2\2\2\u01ae\u01ac\3\2\2\2\u01ae\u01af\3\2\2\2")
        buf.write("\u01af!\3\2\2\2\u01b0\u01ae\3\2\2\2\u01b1\u01b2\7\u0097")
        buf.write("\2\2\u01b2\u01b3\5$\23\2\u01b3\u01b4\7\u0098\2\2\u01b4")
        buf.write("\u01c0\3\2\2\2\u01b5\u01b6\7\u0097\2\2\u01b6\u01b7\5&")
        buf.write("\24\2\u01b7\u01b8\7\u0098\2\2\u01b8\u01c0\3\2\2\2\u01b9")
        buf.write("\u01ba\7\u0097\2\2\u01ba\u01bb\5$\23\2\u01bb\u01bc\7\u00cd")
        buf.write("\2\2\u01bc\u01bd\5&\24\2\u01bd\u01be\7\u0098\2\2\u01be")
        buf.write("\u01c0\3\2\2\2\u01bf\u01b1\3\2\2\2\u01bf\u01b5\3\2\2\2")
        buf.write("\u01bf\u01b9\3\2\2\2\u01c0#\3\2\2\2\u01c1\u01c6\5(\25")
        buf.write("\2\u01c2\u01c3\7\u00cd\2\2\u01c3\u01c5\5(\25\2\u01c4\u01c2")
        buf.write("\3\2\2\2\u01c5\u01c8\3\2\2\2\u01c6\u01c4\3\2\2\2\u01c6")
        buf.write("\u01c7\3\2\2\2\u01c7%\3\2\2\2\u01c8\u01c6\3\2\2\2\u01c9")
        buf.write("\u01ce\5*\26\2\u01ca\u01cb\7\u00cd\2\2\u01cb\u01cd\5*")
        buf.write("\26\2\u01cc\u01ca\3\2\2\2\u01cd\u01d0\3\2\2\2\u01ce\u01cc")
        buf.write("\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf\'\3\2\2\2\u01d0\u01ce")
        buf.write("\3\2\2\2\u01d1\u01d2\5.\30\2\u01d2\u01d3\5\u0100\u0081")
        buf.write("\2\u01d3)\3\2\2\2\u01d4\u01d5\5.\30\2\u01d5\u01d6\5\u0100")
        buf.write("\u0081\2\u01d6\u01d9\7\u00d0\2\2\u01d7\u01da\5\u00c0a")
        buf.write("\2\u01d8\u01da\5\u0108\u0085\2\u01d9\u01d7\3\2\2\2\u01d9")
        buf.write("\u01d8\3\2\2\2\u01da+\3\2\2\2\u01db\u01dc\7\u0097\2\2")
        buf.write("\u01dc\u01e1\5\u00c2b\2\u01dd\u01de\7\u00cd\2\2\u01de")
        buf.write("\u01e0\5\u00c2b\2\u01df\u01dd\3\2\2\2\u01e0\u01e3\3\2")
        buf.write("\2\2\u01e1\u01df\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e4")
        buf.write("\3\2\2\2\u01e3\u01e1\3\2\2\2\u01e4\u01e5\7\u0098\2\2\u01e5")
        buf.write("-\3\2\2\2\u01e6\u01e8\5\60\31\2\u01e7\u01e6\3\2\2\2\u01e8")
        buf.write("\u01eb\3\2\2\2\u01e9\u01e7\3\2\2\2\u01e9\u01ea\3\2\2\2")
        buf.write("\u01ea/\3\2\2\2\u01eb\u01e9\3\2\2\2\u01ec\u01f0\7\u00c9")
        buf.write("\2\2\u01ed\u01ee\5\u0100\u0081\2\u01ee\u01ef\7\u00ce\2")
        buf.write("\2\u01ef\u01f1\3\2\2\2\u01f0\u01ed\3\2\2\2\u01f0\u01f1")
        buf.write("\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2\u01f7\5\62\32\2\u01f3")
        buf.write("\u01f4\7\u00cd\2\2\u01f4\u01f6\5\62\32\2\u01f5\u01f3\3")
        buf.write("\2\2\2\u01f6\u01f9\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f7\u01f8")
        buf.write("\3\2\2\2\u01f8\u01fa\3\2\2\2\u01f9\u01f7\3\2\2\2\u01fa")
        buf.write("\u01fb\7\u00ca\2\2\u01fb\61\3\2\2\2\u01fc\u020f\5\u00c6")
        buf.write("d\2\u01fd\u01fe\5\u00c6d\2\u01fe\u01ff\7\u00c7\2\2\u01ff")
        buf.write("\u0200\5\64\33\2\u0200\u0201\7\u00c8\2\2\u0201\u020f\3")
        buf.write("\2\2\2\u0202\u0203\5\u00c6d\2\u0203\u0204\7\u00c7\2\2")
        buf.write("\u0204\u0205\5\66\34\2\u0205\u0206\7\u00c8\2\2\u0206\u020f")
        buf.write("\3\2\2\2\u0207\u0208\5\u00c6d\2\u0208\u0209\7\u00c7\2")
        buf.write("\2\u0209\u020a\5\64\33\2\u020a\u020b\7\u00cd\2\2\u020b")
        buf.write("\u020c\5\66\34\2\u020c\u020d\7\u00c8\2\2\u020d\u020f\3")
        buf.write("\2\2\2\u020e\u01fc\3\2\2\2\u020e\u01fd\3\2\2\2\u020e\u0202")
        buf.write("\3\2\2\2\u020e\u0207\3\2\2\2\u020f\63\3\2\2\2\u0210\u0215")
        buf.write("\5\u00a6T\2\u0211\u0212\7\u00cd\2\2\u0212\u0214\5\u00a6")
        buf.write("T\2\u0213\u0211\3\2\2\2\u0214\u0217\3\2\2\2\u0215\u0213")
        buf.write("\3\2\2\2\u0215\u0216\3\2\2\2\u0216\65\3\2\2\2\u0217\u0215")
        buf.write("\3\2\2\2\u0218\u021d\58\35\2\u0219\u021a\7\u00cd\2\2\u021a")
        buf.write("\u021c\58\35\2\u021b\u0219\3\2\2\2\u021c\u021f\3\2\2\2")
        buf.write("\u021d\u021b\3\2\2\2\u021d\u021e\3\2\2\2\u021e\67\3\2")
        buf.write("\2\2\u021f\u021d\3\2\2\2\u0220\u0221\7\u00d3\2\2\u0221")
        buf.write("\u0222\7\u0099\2\2\u0222\u0223\5\u00a6T\2\u02239\3\2\2")
        buf.write("\2\u0224\u0226\5<\37\2\u0225\u0224\3\2\2\2\u0226\u0229")
        buf.write("\3\2\2\2\u0227\u0225\3\2\2\2\u0227\u0228\3\2\2\2\u0228")
        buf.write(";\3\2\2\2\u0229\u0227\3\2\2\2\u022a\u022e\5> \2\u022b")
        buf.write("\u022e\5\32\16\2\u022c\u022e\5\34\17\2\u022d\u022a\3\2")
        buf.write("\2\2\u022d\u022b\3\2\2\2\u022d\u022c\3\2\2\2\u022e=\3")
        buf.write("\2\2\2\u022f\u0232\5B\"\2\u0230\u0232\5@!\2\u0231\u022f")
        buf.write("\3\2\2\2\u0231\u0230\3\2\2\2\u0232?\3\2\2\2\u0233\u0234")
        buf.write("\7\u00cf\2\2\u0234A\3\2\2\2\u0235\u0236\5\u0100\u0081")
        buf.write("\2\u0236\u0237\7\u00ce\2\2\u0237\u0250\3\2\2\2\u0238\u0250")
        buf.write("\5D#\2\u0239\u0250\5F$\2\u023a\u0250\5P)\2\u023b\u0250")
        buf.write("\5R*\2\u023c\u0250\5T+\2\u023d\u0250\5Z.\2\u023e\u0250")
        buf.write("\5^\60\2\u023f\u0250\5`\61\2\u0240\u0250\5b\62\2\u0241")
        buf.write("\u0242\5\u00b6\\\2\u0242\u0243\7\u00cf\2\2\u0243\u0250")
        buf.write("\3\2\2\2\u0244\u0250\5\u0080A\2\u0245\u0250\5\u0086D\2")
        buf.write("\u0246\u0250\5\u0084C\2\u0247\u0250\5d\63\2\u0248\u0250")
        buf.write("\5f\64\2\u0249\u0250\5h\65\2\u024a\u0250\5j\66\2\u024b")
        buf.write("\u0250\5p9\2\u024c\u0250\5r:\2\u024d\u0250\5t;\2\u024e")
        buf.write("\u0250\5v<\2\u024f\u0235\3\2\2\2\u024f\u0238\3\2\2\2\u024f")
        buf.write("\u0239\3\2\2\2\u024f\u023a\3\2\2\2\u024f\u023b\3\2\2\2")
        buf.write("\u024f\u023c\3\2\2\2\u024f\u023d\3\2\2\2\u024f\u023e\3")
        buf.write("\2\2\2\u024f\u023f\3\2\2\2\u024f\u0240\3\2\2\2\u024f\u0241")
        buf.write("\3\2\2\2\u024f\u0244\3\2\2\2\u024f\u0245\3\2\2\2\u024f")
        buf.write("\u0246\3\2\2\2\u024f\u0247\3\2\2\2\u024f\u0248\3\2\2\2")
        buf.write("\u024f\u0249\3\2\2\2\u024f\u024a\3\2\2\2\u024f\u024b\3")
        buf.write("\2\2\2\u024f\u024c\3\2\2\2\u024f\u024d\3\2\2\2\u024f\u024e")
        buf.write("\3\2\2\2\u0250C\3\2\2\2\u0251\u0252\7\u00cb\2\2\u0252")
        buf.write("\u0253\5:\36\2\u0253\u0254\7\u00cc\2\2\u0254E\3\2\2\2")
        buf.write("\u0255\u0256\7R\2\2\u0256\u0257\5\u00a4S\2\u0257\u025b")
        buf.write("\5> \2\u0258\u025a\5H%\2\u0259\u0258\3\2\2\2\u025a\u025d")
        buf.write("\3\2\2\2\u025b\u0259\3\2\2\2\u025b\u025c\3\2\2\2\u025c")
        buf.write("\u025f\3\2\2\2\u025d\u025b\3\2\2\2\u025e\u0260\5L\'\2")
        buf.write("\u025f\u025e\3\2\2\2\u025f\u0260\3\2\2\2\u0260\u0272\3")
        buf.write("\2\2\2\u0261\u0262\7R\2\2\u0262\u0263\5\u00a4S\2\u0263")
        buf.write("\u0264\7\u00ce\2\2\u0264\u0268\5:\36\2\u0265\u0267\5J")
        buf.write("&\2\u0266\u0265\3\2\2\2\u0267\u026a\3\2\2\2\u0268\u0266")
        buf.write("\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026c\3\2\2\2\u026a")
        buf.write("\u0268\3\2\2\2\u026b\u026d\5N(\2\u026c\u026b\3\2\2\2\u026c")
        buf.write("\u026d\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u026f\7D\2\2")
        buf.write("\u026f\u0270\7\u00cf\2\2\u0270\u0272\3\2\2\2\u0271\u0255")
        buf.write("\3\2\2\2\u0271\u0261\3\2\2\2\u0272G\3\2\2\2\u0273\u0274")
        buf.write("\7?\2\2\u0274\u0275\5\u00a4S\2\u0275\u0276\5> \2\u0276")
        buf.write("I\3\2\2\2\u0277\u0278\7?\2\2\u0278\u0279\5\u00a4S\2\u0279")
        buf.write("\u027a\7\u00ce\2\2\u027a\u027b\5:\36\2\u027bK\3\2\2\2")
        buf.write("\u027c\u027d\7>\2\2\u027d\u027e\5> \2\u027eM\3\2\2\2\u027f")
        buf.write("\u0280\7>\2\2\u0280\u0281\7\u00ce\2\2\u0281\u0282\5:\36")
        buf.write("\2\u0282O\3\2\2\2\u0283\u0284\7}\2\2\u0284\u028b\5\u00a4")
        buf.write("S\2\u0285\u028c\5> \2\u0286\u0287\7\u00ce\2\2\u0287\u0288")
        buf.write("\5:\36\2\u0288\u0289\7F\2\2\u0289\u028a\7\u00cf\2\2\u028a")
        buf.write("\u028c\3\2\2\2\u028b\u0285\3\2\2\2\u028b\u0286\3\2\2\2")
        buf.write("\u028cQ\3\2\2\2\u028d\u028e\7:\2\2\u028e\u028f\5> \2\u028f")
        buf.write("\u0290\7}\2\2\u0290\u0291\5\u00a4S\2\u0291\u0292\7\u00cf")
        buf.write("\2\2\u0292S\3\2\2\2\u0293\u0294\7M\2\2\u0294\u0296\7\u00c7")
        buf.write("\2\2\u0295\u0297\5V,\2\u0296\u0295\3\2\2\2\u0296\u0297")
        buf.write("\3\2\2\2\u0297\u0298\3\2\2\2\u0298\u029a\7\u00cf\2\2\u0299")
        buf.write("\u029b\5\u00a2R\2\u029a\u0299\3\2\2\2\u029a\u029b\3\2")
        buf.write("\2\2\u029b\u029c\3\2\2\2\u029c\u029e\7\u00cf\2\2\u029d")
        buf.write("\u029f\5X-\2\u029e\u029d\3\2\2\2\u029e\u029f\3\2\2\2\u029f")
        buf.write("\u02a0\3\2\2\2\u02a0\u02a7\7\u00c8\2\2\u02a1\u02a8\5>")
        buf.write(" \2\u02a2\u02a3\7\u00ce\2\2\u02a3\u02a4\5:\36\2\u02a4")
        buf.write("\u02a5\7B\2\2\u02a5\u02a6\7\u00cf\2\2\u02a6\u02a8\3\2")
        buf.write("\2\2\u02a7\u02a1\3\2\2\2\u02a7\u02a2\3\2\2\2\u02a8U\3")
        buf.write("\2\2\2\u02a9\u02aa\5\u00a2R\2\u02aaW\3\2\2\2\u02ab\u02ac")
        buf.write("\5\u00a2R\2\u02acY\3\2\2\2\u02ad\u02ae\7s\2\2\u02ae\u02c6")
        buf.write("\5\u00a4S\2\u02af\u02b1\7\u00cb\2\2\u02b0\u02b2\7\u00cf")
        buf.write("\2\2\u02b1\u02b0\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b6")
        buf.write("\3\2\2\2\u02b3\u02b5\5\\/\2\u02b4\u02b3\3\2\2\2\u02b5")
        buf.write("\u02b8\3\2\2\2\u02b6\u02b4\3\2\2\2\u02b6\u02b7\3\2\2\2")
        buf.write("\u02b7\u02b9\3\2\2\2\u02b8\u02b6\3\2\2\2\u02b9\u02c7\7")
        buf.write("\u00cc\2\2\u02ba\u02bc\7\u00ce\2\2\u02bb\u02bd\7\u00cf")
        buf.write("\2\2\u02bc\u02bb\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd\u02c1")
        buf.write("\3\2\2\2\u02be\u02c0\5\\/\2\u02bf\u02be\3\2\2\2\u02c0")
        buf.write("\u02c3\3\2\2\2\u02c1\u02bf\3\2\2\2\u02c1\u02c2\3\2\2\2")
        buf.write("\u02c2\u02c4\3\2\2\2\u02c3\u02c1\3\2\2\2\u02c4\u02c5\7")
        buf.write("E\2\2\u02c5\u02c7\7\u00cf\2\2\u02c6\u02af\3\2\2\2\u02c6")
        buf.write("\u02ba\3\2\2\2\u02c7[\3\2\2\2\u02c8\u02c9\7\62\2\2\u02c9")
        buf.write("\u02cc\5\u00a6T\2\u02ca\u02cc\79\2\2\u02cb\u02c8\3\2\2")
        buf.write("\2\u02cb\u02ca\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02cf")
        buf.write("\t\5\2\2\u02ce\u02cb\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0")
        buf.write("\u02ce\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1\u02d2\3\2\2\2")
        buf.write("\u02d2\u02d3\5:\36\2\u02d3]\3\2\2\2\u02d4\u02d6\7\60\2")
        buf.write("\2\u02d5\u02d7\5\u00a6T\2\u02d6\u02d5\3\2\2\2\u02d6\u02d7")
        buf.write("\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02d9\7\u00cf\2\2\u02d9")
        buf.write("_\3\2\2\2\u02da\u02dc\7\67\2\2\u02db\u02dd\5\u00a6T\2")
        buf.write("\u02dc\u02db\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u02de\3")
        buf.write("\2\2\2\u02de\u02df\7\u00cf\2\2\u02dfa\3\2\2\2\u02e0\u02e2")
        buf.write("\7p\2\2\u02e1\u02e3\5\u00a6T\2\u02e2\u02e1\3\2\2\2\u02e2")
        buf.write("\u02e3\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4\u02e5\7\u00cf")
        buf.write("\2\2\u02e5c\3\2\2\2\u02e6\u02e7\5\u00a6T\2\u02e7\u02e8")
        buf.write("\7\u00cf\2\2\u02e8e\3\2\2\2\u02e9\u02ea\7z\2\2\u02ea\u02eb")
        buf.write("\7\u00c7\2\2\u02eb\u02ec\5\u00e4s\2\u02ec\u02ed\7\u00c8")
        buf.write("\2\2\u02ed\u02ee\7\u00cf\2\2\u02eeg\3\2\2\2\u02ef\u0316")
        buf.write("\7N\2\2\u02f0\u02f1\7\u00c7\2\2\u02f1\u02f2\5\u00e6t\2")
        buf.write("\u02f2\u02f4\7,\2\2\u02f3\u02f5\7\u00b9\2\2\u02f4\u02f3")
        buf.write("\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6")
        buf.write("\u02fc\5\u00e6t\2\u02f7\u02f9\7\u0099\2\2\u02f8\u02fa")
        buf.write("\7\u00b9\2\2\u02f9\u02f8\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa")
        buf.write("\u02fb\3\2\2\2\u02fb\u02fd\5\u00e6t\2\u02fc\u02f7\3\2")
        buf.write("\2\2\u02fc\u02fd\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u02ff")
        buf.write("\7\u00c8\2\2\u02ff\u0317\3\2\2\2\u0300\u0301\7\u00c7\2")
        buf.write("\2\u0301\u0302\5\u00a6T\2\u0302\u0303\7,\2\2\u0303\u0309")
        buf.write("\5\u00e6t\2\u0304\u0306\7\u0099\2\2\u0305\u0307\7\u00b9")
        buf.write("\2\2\u0306\u0305\3\2\2\2\u0306\u0307\3\2\2\2\u0307\u0308")
        buf.write("\3\2\2\2\u0308\u030a\5\u00e6t\2\u0309\u0304\3\2\2\2\u0309")
        buf.write("\u030a\3\2\2\2\u030a\u030b\3\2\2\2\u030b\u030c\7\u00c8")
        buf.write("\2\2\u030c\u0317\3\2\2\2\u030d\u030e\7\u00c7\2\2\u030e")
        buf.write("\u030f\5\u00e6t\2\u030f\u0310\7,\2\2\u0310\u0311\7_\2")
        buf.write("\2\u0311\u0312\7\u00c7\2\2\u0312\u0313\5\u00fa~\2\u0313")
        buf.write("\u0314\7\u00c8\2\2\u0314\u0315\7\u00c8\2\2\u0315\u0317")
        buf.write("\3\2\2\2\u0316\u02f0\3\2\2\2\u0316\u0300\3\2\2\2\u0316")
        buf.write("\u030d\3\2\2\2\u0317\u031e\3\2\2\2\u0318\u031f\5> \2\u0319")
        buf.write("\u031a\7\u00ce\2\2\u031a\u031b\5:\36\2\u031b\u031c\7C")
        buf.write("\2\2\u031c\u031d\7\u00cf\2\2\u031d\u031f\3\2\2\2\u031e")
        buf.write("\u0318\3\2\2\2\u031e\u0319\3\2\2\2\u031fi\3\2\2\2\u0320")
        buf.write("\u0321\7v\2\2\u0321\u0331\5D#\2\u0322\u0324\5l\67\2\u0323")
        buf.write("\u0322\3\2\2\2\u0324\u0325\3\2\2\2\u0325\u0323\3\2\2\2")
        buf.write("\u0325\u0326\3\2\2\2\u0326\u0328\3\2\2\2\u0327\u0329\5")
        buf.write("n8\2\u0328\u0327\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u0332")
        buf.write("\3\2\2\2\u032a\u032c\5l\67\2\u032b\u032a\3\2\2\2\u032c")
        buf.write("\u032f\3\2\2\2\u032d\u032b\3\2\2\2\u032d\u032e\3\2\2\2")
        buf.write("\u032e\u0330\3\2\2\2\u032f\u032d\3\2\2\2\u0330\u0332\5")
        buf.write("n8\2\u0331\u0323\3\2\2\2\u0331\u032d\3\2\2\2\u0332k\3")
        buf.write("\2\2\2\u0333\u0334\7\63\2\2\u0334\u0335\7\u00c7\2\2\u0335")
        buf.write("\u0336\5\u00c0a\2\u0336\u0337\7\u00d3\2\2\u0337\u0338")
        buf.write("\7\u00c8\2\2\u0338\u0339\5D#\2\u0339m\3\2\2\2\u033a\u033b")
        buf.write("\7K\2\2\u033b\u033c\5D#\2\u033co\3\2\2\2\u033d\u033e\7")
        buf.write("t\2\2\u033e\u033f\5\u00a6T\2\u033f\u0340\7\u00cf\2\2\u0340")
        buf.write("q\3\2\2\2\u0341\u0342\7Q\2\2\u0342\u0343\5\u0100\u0081")
        buf.write("\2\u0343\u0344\7\u00cf\2\2\u0344s\3\2\2\2\u0345\u0346")
        buf.write("\78\2\2\u0346\u0347\7\u00c7\2\2\u0347\u0348\5x=\2\u0348")
        buf.write("\u034f\7\u00c8\2\2\u0349\u0350\5> \2\u034a\u034b\7\u00ce")
        buf.write("\2\2\u034b\u034c\5:\36\2\u034c\u034d\7A\2\2\u034d\u034e")
        buf.write("\7\u00cf\2\2\u034e\u0350\3\2\2\2\u034f\u0349\3\2\2\2\u034f")
        buf.write("\u034a\3\2\2\2\u0350u\3\2\2\2\u0351\u0354\5\6\4\2\u0352")
        buf.write("\u0354\5\b\5\2\u0353\u0351\3\2\2\2\u0353\u0352\3\2\2\2")
        buf.write("\u0354\u0355\3\2\2\2\u0355\u0353\3\2\2\2\u0355\u0356\3")
        buf.write("\2\2\2\u0356w\3\2\2\2\u0357\u035c\5\u009eP\2\u0358\u0359")
        buf.write("\7\u00cd\2\2\u0359\u035b\5\u009eP\2\u035a\u0358\3\2\2")
        buf.write("\2\u035b\u035e\3\2\2\2\u035c\u035a\3\2\2\2\u035c\u035d")
        buf.write("\3\2\2\2\u035dy\3\2\2\2\u035e\u035c\3\2\2\2\u035f\u0361")
        buf.write("\5|?\2\u0360\u035f\3\2\2\2\u0360\u0361\3\2\2\2\u0361\u0366")
        buf.write("\3\2\2\2\u0362\u0363\7\u00cd\2\2\u0363\u0365\5|?\2\u0364")
        buf.write("\u0362\3\2\2\2\u0365\u0368\3\2\2\2\u0366\u0364\3\2\2\2")
        buf.write("\u0366\u0367\3\2\2\2\u0367{\3\2\2\2\u0368\u0366\3\2\2")
        buf.write("\2\u0369\u036b\5.\30\2\u036a\u036c\5~@\2\u036b\u036a\3")
        buf.write("\2\2\2\u036b\u036c\3\2\2\2\u036c\u036e\3\2\2\2\u036d\u036f")
        buf.write("\7\u00b9\2\2\u036e\u036d\3\2\2\2\u036e\u036f\3\2\2\2\u036f")
        buf.write("\u0371\3\2\2\2\u0370\u0372\7\u00b6\2\2\u0371\u0370\3\2")
        buf.write("\2\2\u0371\u0372\3\2\2\2\u0372\u0373\3\2\2\2\u0373\u0374")
        buf.write("\5\u009cO\2\u0374}\3\2\2\2\u0375\u0379\5\u00c0a\2\u0376")
        buf.write("\u0379\7\61\2\2\u0377\u0379\5\u0108\u0085\2\u0378\u0375")
        buf.write("\3\2\2\2\u0378\u0376\3\2\2\2\u0378\u0377\3\2\2\2\u0379")
        buf.write("\177\3\2\2\2\u037a\u037b\7P\2\2\u037b\u0380\5\u0082B\2")
        buf.write("\u037c\u037d\7\u00cd\2\2\u037d\u037f\5\u0082B\2\u037e")
        buf.write("\u037c\3\2\2\2\u037f\u0382\3\2\2\2\u0380\u037e\3\2\2\2")
        buf.write("\u0380\u0381\3\2\2\2\u0381\u0383\3\2\2\2\u0382\u0380\3")
        buf.write("\2\2\2\u0383\u0384\7\u00cf\2\2\u0384\u0081\3\2\2\2\u0385")
        buf.write("\u038e\7\u00d3\2\2\u0386\u0387\7\u00c4\2\2\u0387\u038e")
        buf.write("\5\u00e6t\2\u0388\u0389\7\u00c4\2\2\u0389\u038a\7\u00cb")
        buf.write("\2\2\u038a\u038b\5\u00a6T\2\u038b\u038c\7\u00cc\2\2\u038c")
        buf.write("\u038e\3\2\2\2\u038d\u0385\3\2\2\2\u038d\u0386\3\2\2\2")
        buf.write("\u038d\u0388\3\2\2\2\u038e\u0083\3\2\2\2\u038f\u0390\7")
        buf.write("=\2\2\u0390\u0391\5\u00a2R\2\u0391\u0392\7\u00cf\2\2\u0392")
        buf.write("\u0085\3\2\2\2\u0393\u0394\7q\2\2\u0394\u0399\5\u009c")
        buf.write("O\2\u0395\u0396\7\u00cd\2\2\u0396\u0398\5\u009cO\2\u0397")
        buf.write("\u0395\3\2\2\2\u0398\u039b\3\2\2\2\u0399\u0397\3\2\2\2")
        buf.write("\u0399\u039a\3\2\2\2\u039a\u039c\3\2\2\2\u039b\u0399\3")
        buf.write("\2\2\2\u039c\u039d\7\u00cf\2\2\u039d\u0087\3\2\2\2\u039e")
        buf.write("\u039f\5.\30\2\u039f\u03a0\5\u0098M\2\u03a0\u03a5\5\u009c")
        buf.write("O\2\u03a1\u03a2\7\u00cd\2\2\u03a2\u03a4\5\u009cO\2\u03a3")
        buf.write("\u03a1\3\2\2\2\u03a4\u03a7\3\2\2\2\u03a5\u03a3\3\2\2\2")
        buf.write("\u03a5\u03a6\3\2\2\2\u03a6\u03a8\3\2\2\2\u03a7\u03a5\3")
        buf.write("\2\2\2\u03a8\u03a9\7\u00cf\2\2\u03a9\u03cf\3\2\2\2\u03aa")
        buf.write("\u03ab\5.\30\2\u03ab\u03ac\7\66\2\2\u03ac\u03b1\5\u009e")
        buf.write("P\2\u03ad\u03ae\7\u00cd\2\2\u03ae\u03b0\5\u009eP\2\u03af")
        buf.write("\u03ad\3\2\2\2\u03b0\u03b3\3\2\2\2\u03b1\u03af\3\2\2\2")
        buf.write("\u03b1\u03b2\3\2\2\2\u03b2\u03b4\3\2\2\2\u03b3\u03b1\3")
        buf.write("\2\2\2\u03b4\u03b5\7\u00cf\2\2\u03b5\u03cf\3\2\2\2\u03b6")
        buf.write("\u03b8\5.\30\2\u03b7\u03b9\5\u009aN\2\u03b8\u03b7\3\2")
        buf.write("\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\u03bc")
        buf.write("\7O\2\2\u03bb\u03bd\7\u00b9\2\2\u03bc\u03bb\3\2\2\2\u03bc")
        buf.write("\u03bd\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03c0\5\u0100")
        buf.write("\u0081\2\u03bf\u03c1\5\"\22\2\u03c0\u03bf\3\2\2\2\u03c0")
        buf.write("\u03c1\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c3\7\u00c7")
        buf.write("\2\2\u03c3\u03c4\5z>\2\u03c4\u03c6\7\u00c8\2\2\u03c5\u03c7")
        buf.write("\5\u0094K\2\u03c6\u03c5\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7")
        buf.write("\u03c8\3\2\2\2\u03c8\u03c9\5\u0096L\2\u03c9\u03cf\3\2")
        buf.write("\2\2\u03ca\u03cb\7{\2\2\u03cb\u03cc\5\u00caf\2\u03cc\u03cd")
        buf.write("\5\u008aF\2\u03cd\u03cf\3\2\2\2\u03ce\u039e\3\2\2\2\u03ce")
        buf.write("\u03aa\3\2\2\2\u03ce\u03b6\3\2\2\2\u03ce\u03ca\3\2\2\2")
        buf.write("\u03cf\u0089\3\2\2\2\u03d0\u03da\7\u00cf\2\2\u03d1\u03d5")
        buf.write("\7\u00cb\2\2\u03d2\u03d4\5\u008cG\2\u03d3\u03d2\3\2\2")
        buf.write("\2\u03d4\u03d7\3\2\2\2\u03d5\u03d3\3\2\2\2\u03d5\u03d6")
        buf.write("\3\2\2\2\u03d6\u03d8\3\2\2\2\u03d7\u03d5\3\2\2\2\u03d8")
        buf.write("\u03da\7\u00cc\2\2\u03d9\u03d0\3\2\2\2\u03d9\u03d1\3\2")
        buf.write("\2\2\u03da\u008b\3\2\2\2\u03db\u03de\5\u008eH\2\u03dc")
        buf.write("\u03de\5\u0090I\2\u03dd\u03db\3\2\2\2\u03dd\u03dc\3\2")
        buf.write("\2\2\u03de\u008d\3\2\2\2\u03df\u03e0\5\u00c6d\2\u03e0")
        buf.write("\u03e1\7\u00b3\2\2\u03e1\u03e2\5\u0100\u0081\2\u03e2\u03e3")
        buf.write("\7X\2\2\u03e3\u03e4\5\u00caf\2\u03e4\u03e5\7\u00cf\2\2")
        buf.write("\u03e5\u008f\3\2\2\2\u03e6\u03e7\5\u0092J\2\u03e7\u03ed")
        buf.write("\7,\2\2\u03e8\u03ee\5\u0102\u0082\2\u03e9\u03eb\5\u0102")
        buf.write("\u0082\2\u03ea\u03e9\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb")
        buf.write("\u03ec\3\2\2\2\u03ec\u03ee\5\u0100\u0081\2\u03ed\u03e8")
        buf.write("\3\2\2\2\u03ed\u03ea\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef")
        buf.write("\u03f0\7\u00cf\2\2\u03f0\u0091\3\2\2\2\u03f1\u03f2\5\u00c6")
        buf.write("d\2\u03f2\u03f3\7\u00b3\2\2\u03f3\u03f5\3\2\2\2\u03f4")
        buf.write("\u03f1\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f6\3\2\2\2")
        buf.write("\u03f6\u03f7\5\u0100\u0081\2\u03f7\u0093\3\2\2\2\u03f8")
        buf.write("\u03f9\7\u00ce\2\2\u03f9\u03fa\5\u0100\u0081\2\u03fa\u03fb")
        buf.write("\5\u00ccg\2\u03fb\u0095\3\2\2\2\u03fc\u03ff\7\u00cf\2")
        buf.write("\2\u03fd\u03ff\5D#\2\u03fe\u03fc\3\2\2\2\u03fe\u03fd\3")
        buf.write("\2\2\2\u03ff\u0097\3\2\2\2\u0400\u0403\5\u009aN\2\u0401")
        buf.write("\u0403\7|\2\2\u0402\u0400\3\2\2\2\u0402\u0401\3\2\2\2")
        buf.write("\u0403\u0099\3\2\2\2\u0404\u0406\5\u0102\u0082\2\u0405")
        buf.write("\u0404\3\2\2\2\u0406\u0407\3\2\2\2\u0407\u0405\3\2\2\2")
        buf.write("\u0407\u0408\3\2\2\2\u0408\u009b\3\2\2\2\u0409\u040c\7")
        buf.write("\u00d3\2\2\u040a\u040b\7\u00d0\2\2\u040b\u040d\5\u00d0")
        buf.write("i\2\u040c\u040a\3\2\2\2\u040c\u040d\3\2\2\2\u040d\u009d")
        buf.write("\3\2\2\2\u040e\u040f\5\u0100\u0081\2\u040f\u0410\7\u00d0")
        buf.write("\2\2\u0410\u0411\5\u00d0i\2\u0411\u009f\3\2\2\2\u0412")
        buf.write("\u0413\5.\30\2\u0413\u0414\7\66\2\2\u0414\u0419\5\u009e")
        buf.write("P\2\u0415\u0416\7\u00cd\2\2\u0416\u0418\5\u009eP\2\u0417")
        buf.write("\u0415\3\2\2\2\u0418\u041b\3\2\2\2\u0419\u0417\3\2\2\2")
        buf.write("\u0419\u041a\3\2\2\2\u041a\u041c\3\2\2\2\u041b\u0419\3")
        buf.write("\2\2\2\u041c\u041d\7\u00cf\2\2\u041d\u00a1\3\2\2\2\u041e")
        buf.write("\u0423\5\u00a6T\2\u041f\u0420\7\u00cd\2\2\u0420\u0422")
        buf.write("\5\u00a6T\2\u0421\u041f\3\2\2\2\u0422\u0425\3\2\2\2\u0423")
        buf.write("\u0421\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u00a3\3\2\2\2")
        buf.write("\u0425\u0423\3\2\2\2\u0426\u0429\7\u00c7\2\2\u0427\u042a")
        buf.write("\5\u00a6T\2\u0428\u042a\5\u00b6\\\2\u0429\u0427\3\2\2")
        buf.write("\2\u0429\u0428\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u042c")
        buf.write("\7\u00c8\2\2\u042c\u00a5\3\2\2\2\u042d\u042e\bT\1\2\u042e")
        buf.write("\u042f\5\u00a8U\2\u042f\u0442\3\2\2\2\u0430\u0431\f\6")
        buf.write("\2\2\u0431\u0433\7\u00c6\2\2\u0432\u0434\5\u00a6T\2\u0433")
        buf.write("\u0432\3\2\2\2\u0433\u0434\3\2\2\2\u0434\u0435\3\2\2\2")
        buf.write("\u0435\u0436\7\u00ce\2\2\u0436\u0441\5\u00a8U\2\u0437")
        buf.write("\u0438\f\5\2\2\u0438\u0439\7`\2\2\u0439\u0441\5\u00a8")
        buf.write("U\2\u043a\u043b\f\4\2\2\u043b\u043c\7b\2\2\u043c\u0441")
        buf.write("\5\u00a8U\2\u043d\u043e\f\3\2\2\u043e\u043f\7a\2\2\u043f")
        buf.write("\u0441\5\u00a8U\2\u0440\u0430\3\2\2\2\u0440\u0437\3\2")
        buf.write("\2\2\u0440\u043a\3\2\2\2\u0440\u043d\3\2\2\2\u0441\u0444")
        buf.write("\3\2\2\2\u0442\u0440\3\2\2\2\u0442\u0443\3\2\2\2\u0443")
        buf.write("\u00a7\3\2\2\2\u0444\u0442\3\2\2\2\u0445\u0446\bU\1\2")
        buf.write("\u0446\u0447\5\u00aaV\2\u0447\u0459\3\2\2\2\u0448\u0449")
        buf.write("\f\7\2\2\u0449\u044a\7\u00b9\2\2\u044a\u0458\5\u00aaV")
        buf.write("\2\u044b\u044c\f\6\2\2\u044c\u044d\7\u00bc\2\2\u044d\u0458")
        buf.write("\5\u00aaV\2\u044e\u044f\f\5\2\2\u044f\u0450\7\u00ba\2")
        buf.write("\2\u0450\u0458\5\u00aaV\2\u0451\u0452\f\4\2\2\u0452\u0453")
        buf.write("\7\u00b0\2\2\u0453\u0458\5\u00aaV\2\u0454\u0455\f\3\2")
        buf.write("\2\u0455\u0456\7\u00af\2\2\u0456\u0458\5\u00aaV\2\u0457")
        buf.write("\u0448\3\2\2\2\u0457\u044b\3\2\2\2\u0457\u044e\3\2\2\2")
        buf.write("\u0457\u0451\3\2\2\2\u0457\u0454\3\2\2\2\u0458\u045b\3")
        buf.write("\2\2\2\u0459\u0457\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u00a9")
        buf.write("\3\2\2\2\u045b\u0459\3\2\2\2\u045c\u045d\bV\1\2\u045d")
        buf.write("\u045e\5\u00acW\2\u045e\u046a\3\2\2\2\u045f\u0460\f\5")
        buf.write("\2\2\u0460\u0461\t\6\2\2\u0461\u0469\5\u00acW\2\u0462")
        buf.write("\u0463\f\4\2\2\u0463\u0464\t\7\2\2\u0464\u0469\5\u00ac")
        buf.write("W\2\u0465\u0466\f\3\2\2\u0466\u0467\t\b\2\2\u0467\u0469")
        buf.write("\5\u00acW\2\u0468\u045f\3\2\2\2\u0468\u0462\3\2\2\2\u0468")
        buf.write("\u0465\3\2\2\2\u0469\u046c\3\2\2\2\u046a\u0468\3\2\2\2")
        buf.write("\u046a\u046b\3\2\2\2\u046b\u00ab\3\2\2\2\u046c\u046a\3")
        buf.write("\2\2\2\u046d\u046e\bW\1\2\u046e\u046f\5\u00aeX\2\u046f")
        buf.write("\u0475\3\2\2\2\u0470\u0471\f\3\2\2\u0471\u0472\t\t\2\2")
        buf.write("\u0472\u0474\5\u00aeX\2\u0473\u0470\3\2\2\2\u0474\u0477")
        buf.write("\3\2\2\2\u0475\u0473\3\2\2\2\u0475\u0476\3\2\2\2\u0476")
        buf.write("\u00ad\3\2\2\2\u0477\u0475\3\2\2\2\u0478\u0479\bX\1\2")
        buf.write("\u0479\u047f\5\u00b0Y\2\u047a\u047b\5\u00b0Y\2\u047b\u047c")
        buf.write("\7\u00a5\2\2\u047c\u047d\5\u00aeX\5\u047d\u047f\3\2\2")
        buf.write("\2\u047e\u0478\3\2\2\2\u047e\u047a\3\2\2\2\u047f\u0488")
        buf.write("\3\2\2\2\u0480\u0481\f\4\2\2\u0481\u0482\7W\2\2\u0482")
        buf.write("\u0487\5\u00c2b\2\u0483\u0484\f\3\2\2\u0484\u0485\t\n")
        buf.write("\2\2\u0485\u0487\5\u00b0Y\2\u0486\u0480\3\2\2\2\u0486")
        buf.write("\u0483\3\2\2\2\u0487\u048a\3\2\2\2\u0488\u0486\3\2\2\2")
        buf.write("\u0488\u0489\3\2\2\2\u0489\u00af\3\2\2\2\u048a\u0488\3")
        buf.write("\2\2\2\u048b\u048c\7\65\2\2\u048c\u04f8\5\u00a6T\2\u048d")
        buf.write("\u04f8\5\u00b2Z\2\u048e\u048f\5\u00dep\2\u048f\u0490\7")
        buf.write("\u00c9\2\2\u0490\u0491\5\u00a6T\2\u0491\u0492\7\u00ca")
        buf.write("\2\2\u0492\u04f8\3\2\2\2\u0493\u0494\7\u00c7\2\2\u0494")
        buf.write("\u0495\5\u010a\u0086\2\u0495\u0496\7\u00c8\2\2\u0496\u0497")
        buf.write("\5\u00a6T\2\u0497\u04f8\3\2\2\2\u0498\u0499\t\13\2\2\u0499")
        buf.write("\u04f8\5\u00a6T\2\u049a\u049b\t\f\2\2\u049b\u04f8\5\u00a6")
        buf.write("T\2\u049c\u049d\t\r\2\2\u049d\u04f8\5\u00e6t\2\u049e\u049f")
        buf.write("\5\u00e6t\2\u049f\u04a0\t\r\2\2\u04a0\u04f8\3\2\2\2\u04a1")
        buf.write("\u04a2\5\u00e6t\2\u04a2\u04a3\5\u00b4[\2\u04a3\u04a4\5")
        buf.write("\u00a6T\2\u04a4\u04f8\3\2\2\2\u04a5\u04a6\5\u00e6t\2\u04a6")
        buf.write("\u04a7\7\u00d0\2\2\u04a7\u04aa\7\u00b9\2\2\u04a8\u04ab")
        buf.write("\5\u00e6t\2\u04a9\u04ab\5\u00b2Z\2\u04aa\u04a8\3\2\2\2")
        buf.write("\u04aa\u04a9\3\2\2\2\u04ab\u04f8\3\2\2\2\u04ac\u04ad\7")
        buf.write("i\2\2\u04ad\u04f8\5\u00a6T\2\u04ae\u04f8\5\u00e6t\2\u04af")
        buf.write("\u04f8\5\u00d6l\2\u04b0\u04f8\5\u00e0q\2\u04b1\u04f8\7")
        buf.write("\u00d4\2\2\u04b2\u04f8\7\u00da\2\2\u04b3\u04f8\5\u00a4")
        buf.write("S\2\u04b4\u04b5\7+\2\2\u04b5\u04b7\7\u00c7\2\2\u04b6\u04b8")
        buf.write("\5\u00b8]\2\u04b7\u04b6\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8")
        buf.write("\u04b9\3\2\2\2\u04b9\u04c0\7\u00c8\2\2\u04ba\u04bc\7\u00c9")
        buf.write("\2\2\u04bb\u04bd\5\u00b8]\2\u04bc\u04bb\3\2\2\2\u04bc")
        buf.write("\u04bd\3\2\2\2\u04bd\u04be\3\2\2\2\u04be\u04c0\7\u00ca")
        buf.write("\2\2\u04bf\u04b4\3\2\2\2\u04bf\u04ba\3\2\2\2\u04c0\u04c5")
        buf.write("\3\2\2\2\u04c1\u04c2\7\u00c9\2\2\u04c2\u04c3\5\u00a6T")
        buf.write("\2\u04c3\u04c4\7\u00ca\2\2\u04c4\u04c6\3\2\2\2\u04c5\u04c1")
        buf.write("\3\2\2\2\u04c5\u04c6\3\2\2\2\u04c6\u04f8\3\2\2\2\u04c7")
        buf.write("\u04f8\7~\2\2\u04c8\u04c9\7_\2\2\u04c9\u04ca\7\u00c7\2")
        buf.write("\2\u04ca\u04cb\5\u00fa~\2\u04cb\u04cc\7\u00c8\2\2\u04cc")
        buf.write("\u04cd\7\u00d0\2\2\u04cd\u04ce\5\u00a6T\2\u04ce\u04f8")
        buf.write("\3\2\2\2\u04cf\u04d0\7^\2\2\u04d0\u04d1\7\u00c7\2\2\u04d1")
        buf.write("\u04d2\5\u00e4s\2\u04d2\u04d3\7\u00c8\2\2\u04d3\u04f8")
        buf.write("\3\2\2\2\u04d4\u04d5\7@\2\2\u04d5\u04d6\7\u00c7\2\2\u04d6")
        buf.write("\u04d7\5\u00e6t\2\u04d7\u04d8\7\u00c8\2\2\u04d8\u04f8")
        buf.write("\3\2\2\2\u04d9\u04da\7G\2\2\u04da\u04db\7\u00c7\2\2\u04db")
        buf.write("\u04dc\5\u00a6T\2\u04dc\u04dd\7\u00c8\2\2\u04dd\u04f8")
        buf.write("\3\2\2\2\u04de\u04e2\7H\2\2\u04df\u04e0\7\u00c7\2\2\u04e0")
        buf.write("\u04e3\7\u00c8\2\2\u04e1\u04e3\5\u00a4S\2\u04e2\u04df")
        buf.write("\3\2\2\2\u04e2\u04e1\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3")
        buf.write("\u04f8\3\2\2\2\u04e4\u04e5\t\16\2\2\u04e5\u04f8\5\u00a6")
        buf.write("T\2\u04e6\u04e7\t\17\2\2\u04e7\u04f8\5\u00a6T\2\u04e8")
        buf.write("\u04ea\7q\2\2\u04e9\u04e8\3\2\2\2\u04e9\u04ea\3\2\2\2")
        buf.write("\u04ea\u04eb\3\2\2\2\u04eb\u04ed\7O\2\2\u04ec\u04ee\7")
        buf.write("\u00b9\2\2\u04ed\u04ec\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee")
        buf.write("\u04ef\3\2\2\2\u04ef\u04f0\7\u00c7\2\2\u04f0\u04f1\5z")
        buf.write(">\2\u04f1\u04f3\7\u00c8\2\2\u04f2\u04f4\5\u00bc_\2\u04f3")
        buf.write("\u04f2\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u04f5\3\2\2\2")
        buf.write("\u04f5\u04f6\5D#\2\u04f6\u04f8\3\2\2\2\u04f7\u048b\3\2")
        buf.write("\2\2\u04f7\u048d\3\2\2\2\u04f7\u048e\3\2\2\2\u04f7\u0493")
        buf.write("\3\2\2\2\u04f7\u0498\3\2\2\2\u04f7\u049a\3\2\2\2\u04f7")
        buf.write("\u049c\3\2\2\2\u04f7\u049e\3\2\2\2\u04f7\u04a1\3\2\2\2")
        buf.write("\u04f7\u04a5\3\2\2\2\u04f7\u04ac\3\2\2\2\u04f7\u04ae\3")
        buf.write("\2\2\2\u04f7\u04af\3\2\2\2\u04f7\u04b0\3\2\2\2\u04f7\u04b1")
        buf.write("\3\2\2\2\u04f7\u04b2\3\2\2\2\u04f7\u04b3\3\2\2\2\u04f7")
        buf.write("\u04bf\3\2\2\2\u04f7\u04c7\3\2\2\2\u04f7\u04c8\3\2\2\2")
        buf.write("\u04f7\u04cf\3\2\2\2\u04f7\u04d4\3\2\2\2\u04f7\u04d9\3")
        buf.write("\2\2\2\u04f7\u04de\3\2\2\2\u04f7\u04e4\3\2\2\2\u04f7\u04e6")
        buf.write("\3\2\2\2\u04f7\u04e9\3\2\2\2\u04f8\u00b1\3\2\2\2\u04f9")
        buf.write("\u04fa\7d\2\2\u04fa\u04fc\5\u00c2b\2\u04fb\u04fd\5\u00cc")
        buf.write("g\2\u04fc\u04fb\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u00b3")
        buf.write("\3\2\2\2\u04fe\u04ff\t\20\2\2\u04ff\u00b5\3\2\2\2\u0500")
        buf.write("\u0501\7~\2\2\u0501\u0504\5\u00a6T\2\u0502\u0503\7\u0099")
        buf.write("\2\2\u0503\u0505\5\u00a6T\2\u0504\u0502\3\2\2\2\u0504")
        buf.write("\u0505\3\2\2\2\u0505\u00b7\3\2\2\2\u0506\u050b\5\u00ba")
        buf.write("^\2\u0507\u0508\7\u00cd\2\2\u0508\u050a\5\u00ba^\2\u0509")
        buf.write("\u0507\3\2\2\2\u050a\u050d\3\2\2\2\u050b\u0509\3\2\2\2")
        buf.write("\u050b\u050c\3\2\2\2\u050c\u050f\3\2\2\2\u050d\u050b\3")
        buf.write("\2\2\2\u050e\u0510\7\u00cd\2\2\u050f\u050e\3\2\2\2\u050f")
        buf.write("\u0510\3\2\2\2\u0510\u00b9\3\2\2\2\u0511\u0514\5\u00a6")
        buf.write("T\2\u0512\u0513\7\u0099\2\2\u0513\u0515\5\u00a6T\2\u0514")
        buf.write("\u0512\3\2\2\2\u0514\u0515\3\2\2\2\u0515\u051e\3\2\2\2")
        buf.write("\u0516\u0517\5\u00a6T\2\u0517\u0518\7\u0099\2\2\u0518")
        buf.write("\u051a\3\2\2\2\u0519\u0516\3\2\2\2\u0519\u051a\3\2\2\2")
        buf.write("\u051a\u051b\3\2\2\2\u051b\u051c\7\u00b9\2\2\u051c\u051e")
        buf.write("\5\u00e6t\2\u051d\u0511\3\2\2\2\u051d\u0519\3\2\2\2\u051e")
        buf.write("\u00bb\3\2\2\2\u051f\u0520\7{\2\2\u0520\u0521\7\u00c7")
        buf.write("\2\2\u0521\u0526\5\u00be`\2\u0522\u0523\7\u00cd\2\2\u0523")
        buf.write("\u0525\5\u00be`\2\u0524\u0522\3\2\2\2\u0525\u0528\3\2")
        buf.write("\2\2\u0526\u0524\3\2\2\2\u0526\u0527\3\2\2\2\u0527\u0529")
        buf.write("\3\2\2\2\u0528\u0526\3\2\2\2\u0529\u052a\7\u00c8\2\2\u052a")
        buf.write("\u00bd\3\2\2\2\u052b\u052d\7\u00b9\2\2\u052c\u052b\3\2")
        buf.write("\2\2\u052c\u052d\3\2\2\2\u052d\u052e\3\2\2\2\u052e\u052f")
        buf.write("\7\u00d3\2\2\u052f\u00bf\3\2\2\2\u0530\u0532\5\u00c6d")
        buf.write("\2\u0531\u0533\5,\27\2\u0532\u0531\3\2\2\2\u0532\u0533")
        buf.write("\3\2\2\2\u0533\u0536\3\2\2\2\u0534\u0536\7q\2\2\u0535")
        buf.write("\u0530\3\2\2\2\u0535\u0534\3\2\2\2\u0536\u00c1\3\2\2\2")
        buf.write("\u0537\u053a\5\u00c6d\2\u0538\u053a\5\u00c4c\2\u0539\u0537")
        buf.write("\3\2\2\2\u0539\u0538\3\2\2\2\u053a\u053c\3\2\2\2\u053b")
        buf.write("\u053d\5,\27\2\u053c\u053b\3\2\2\2\u053c\u053d\3\2\2\2")
        buf.write("\u053d\u0541\3\2\2\2\u053e\u0541\5\u0108\u0085\2\u053f")
        buf.write("\u0541\7q\2\2\u0540\u0539\3\2\2\2\u0540\u053e\3\2\2\2")
        buf.write("\u0540\u053f\3\2\2\2\u0541\u00c3\3\2\2\2\u0542\u0547\5")
        buf.write("\u00f0y\2\u0543\u0544\7\u00b4\2\2\u0544\u0546\5\u00f2")
        buf.write("z\2\u0545\u0543\3\2\2\2\u0546\u0549\3\2\2\2\u0547\u0545")
        buf.write("\3\2\2\2\u0547\u0548\3\2\2\2\u0548\u00c5\3\2\2\2\u0549")
        buf.write("\u0547\3\2\2\2\u054a\u054c\7c\2\2\u054b\u054a\3\2\2\2")
        buf.write("\u054b\u054c\3\2\2\2\u054c\u054e\3\2\2\2\u054d\u054f\7")
        buf.write("\u00b5\2\2\u054e\u054d\3\2\2\2\u054e\u054f\3\2\2\2\u054f")
        buf.write("\u0550\3\2\2\2\u0550\u0551\5\u00c8e\2\u0551\u00c7\3\2")
        buf.write("\2\2\u0552\u0557\5\u0100\u0081\2\u0553\u0554\7\u00b5\2")
        buf.write("\2\u0554\u0556\5\u0100\u0081\2\u0555\u0553\3\2\2\2\u0556")
        buf.write("\u0559\3\2\2\2\u0557\u0555\3\2\2\2\u0557\u0558\3\2\2\2")
        buf.write("\u0558\u00c9\3\2\2\2\u0559\u0557\3\2\2\2\u055a\u055f\5")
        buf.write("\u00c6d\2\u055b\u055c\7\u00cd\2\2\u055c\u055e\5\u00c6")
        buf.write("d\2\u055d\u055b\3\2\2\2\u055e\u0561\3\2\2\2\u055f\u055d")
        buf.write("\3\2\2\2\u055f\u0560\3\2\2\2\u0560\u00cb\3\2\2\2\u0561")
        buf.write("\u055f\3\2\2\2\u0562\u056c\7\u00c7\2\2\u0563\u0568\5\u00ce")
        buf.write("h\2\u0564\u0565\7\u00cd\2\2\u0565\u0567\5\u00ceh\2\u0566")
        buf.write("\u0564\3\2\2\2\u0567\u056a\3\2\2\2\u0568\u0566\3\2\2\2")
        buf.write("\u0568\u0569\3\2\2\2\u0569\u056d\3\2\2\2\u056a\u0568\3")
        buf.write("\2\2\2\u056b\u056d\5\u00b6\\\2\u056c\u0563\3\2\2\2\u056c")
        buf.write("\u056b\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u056e\3\2\2\2")
        buf.write("\u056e\u056f\7\u00c8\2\2\u056f\u00cd\3\2\2\2\u0570\u0572")
        buf.write("\7\u00b6\2\2\u0571\u0570\3\2\2\2\u0571\u0572\3\2\2\2\u0572")
        buf.write("\u0573\3\2\2\2\u0573\u0577\5\u00a6T\2\u0574\u0575\7\u00b9")
        buf.write("\2\2\u0575\u0577\5\u00e6t\2\u0576\u0571\3\2\2\2\u0576")
        buf.write("\u0574\3\2\2\2\u0577\u00cf\3\2\2\2\u0578\u058e\5\u00d6")
        buf.write("l\2\u0579\u058e\5\u00e0q\2\u057a\u057b\7+\2\2\u057b\u0580")
        buf.write("\7\u00c7\2\2\u057c\u057e\5\u00d2j\2\u057d\u057f\7\u00cd")
        buf.write("\2\2\u057e\u057d\3\2\2\2\u057e\u057f\3\2\2\2\u057f\u0581")
        buf.write("\3\2\2\2\u0580\u057c\3\2\2\2\u0580\u0581\3\2\2\2\u0581")
        buf.write("\u0582\3\2\2\2\u0582\u058e\7\u00c8\2\2\u0583\u0588\7\u00c9")
        buf.write("\2\2\u0584\u0586\5\u00d2j\2\u0585\u0587\7\u00cd\2\2\u0586")
        buf.write("\u0585\3\2\2\2\u0586\u0587\3\2\2\2\u0587\u0589\3\2\2\2")
        buf.write("\u0588\u0584\3\2\2\2\u0588\u0589\3\2\2\2\u0589\u058a\3")
        buf.write("\2\2\2\u058a\u058e\7\u00ca\2\2\u058b\u058c\t\21\2\2\u058c")
        buf.write("\u058e\5\u00d0i\2\u058d\u0578\3\2\2\2\u058d\u0579\3\2")
        buf.write("\2\2\u058d\u057a\3\2\2\2\u058d\u0583\3\2\2\2\u058d\u058b")
        buf.write("\3\2\2\2\u058e\u00d1\3\2\2\2\u058f\u0594\5\u00d4k\2\u0590")
        buf.write("\u0591\7\u00cd\2\2\u0591\u0593\5\u00d4k\2\u0592\u0590")
        buf.write("\3\2\2\2\u0593\u0596\3\2\2\2\u0594\u0592\3\2\2\2\u0594")
        buf.write("\u0595\3\2\2\2\u0595\u00d3\3\2\2\2\u0596\u0594\3\2\2\2")
        buf.write("\u0597\u059a\5\u00d0i\2\u0598\u0599\7\u0099\2\2\u0599")
        buf.write("\u059b\5\u00d0i\2\u059a\u0598\3\2\2\2\u059a\u059b\3\2")
        buf.write("\2\2\u059b\u00d5\3\2\2\2\u059c\u05a2\7e\2\2\u059d\u05a2")
        buf.write("\5\u00d8m\2\u059e\u05a2\5\u0104\u0083\2\u059f\u05a2\5")
        buf.write("\u00dco\2\u05a0\u05a2\5\u00c6d\2\u05a1\u059c\3\2\2\2\u05a1")
        buf.write("\u059d\3\2\2\2\u05a1\u059e\3\2\2\2\u05a1\u059f\3\2\2\2")
        buf.write("\u05a1\u05a0\3\2\2\2\u05a2\u00d7\3\2\2\2\u05a3\u05a8\7")
        buf.write("\u00d7\2\2\u05a4\u05a8\7/\2\2\u05a5\u05a8\5\u00dan\2\u05a6")
        buf.write("\u05a8\5\u00dep\2\u05a7\u05a3\3\2\2\2\u05a7\u05a4\3\2")
        buf.write("\2\2\u05a7\u05a5\3\2\2\2\u05a7\u05a6\3\2\2\2\u05a8\u00d9")
        buf.write("\3\2\2\2\u05a9\u05aa\t\22\2\2\u05aa\u00db\3\2\2\2\u05ab")
        buf.write("\u05ac\t\23\2\2\u05ac\u05b1\7\u00b3\2\2\u05ad\u05b2\5")
        buf.write("\u0100\u0081\2\u05ae\u05b2\7\u0083\2\2\u05af\u05b2\7\177")
        buf.write("\2\2\u05b0\u05b2\7\u0080\2\2\u05b1\u05ad\3\2\2\2\u05b1")
        buf.write("\u05ae\3\2\2\2\u05b1\u05af\3\2\2\2\u05b1\u05b0\3\2\2\2")
        buf.write("\u05b2\u05bb\3\2\2\2\u05b3\u05b6\5\u00c0a\2\u05b4\u05b6")
        buf.write("\5\u00f6|\2\u05b5\u05b3\3\2\2\2\u05b5\u05b4\3\2\2\2\u05b6")
        buf.write("\u05b7\3\2\2\2\u05b7\u05b8\7\u00b3\2\2\u05b8\u05b9\5\u0100")
        buf.write("\u0081\2\u05b9\u05bb\3\2\2\2\u05ba\u05ab\3\2\2\2\u05ba")
        buf.write("\u05b5\3\2\2\2\u05bb\u00dd\3\2\2\2\u05bc\u05bd\7\u00d4")
        buf.write("\2\2\u05bd\u00df\3\2\2\2\u05be\u05c0\7\u00de\2\2\u05bf")
        buf.write("\u05c1\7\u00e5\2\2\u05c0\u05bf\3\2\2\2\u05c1\u05c2\3\2")
        buf.write("\2\2\u05c2\u05c0\3\2\2\2\u05c2\u05c3\3\2\2\2\u05c3\u05d4")
        buf.write("\3\2\2\2\u05c4\u05c6\7\u00dd\2\2\u05c5\u05c7\7\u00e5\2")
        buf.write("\2\u05c6\u05c5\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05c6")
        buf.write("\3\2\2\2\u05c8\u05c9\3\2\2\2\u05c9\u05d4\3\2\2\2\u05ca")
        buf.write("\u05d4\7\u00db\2\2\u05cb\u05cf\7\u00dc\2\2\u05cc\u05ce")
        buf.write("\5\u00e2r\2\u05cd\u05cc\3\2\2\2\u05ce\u05d1\3\2\2\2\u05cf")
        buf.write("\u05cd\3\2\2\2\u05cf\u05d0\3\2\2\2\u05d0\u05d2\3\2\2\2")
        buf.write("\u05d1\u05cf\3\2\2\2\u05d2\u05d4\7\u00dc\2\2\u05d3\u05be")
        buf.write("\3\2\2\2\u05d3\u05c4\3\2\2\2\u05d3\u05ca\3\2\2\2\u05d3")
        buf.write("\u05cb\3\2\2\2\u05d4\u00e1\3\2\2\2\u05d5\u05d8\7\u00e1")
        buf.write("\2\2\u05d6\u05d8\5\u00e6t\2\u05d7\u05d5\3\2\2\2\u05d7")
        buf.write("\u05d6\3\2\2\2\u05d8\u00e3\3\2\2\2\u05d9\u05de\5\u00e6")
        buf.write("t\2\u05da\u05db\7\u00cd\2\2\u05db\u05dd\5\u00e6t\2\u05dc")
        buf.write("\u05da\3\2\2\2\u05dd\u05e0\3\2\2\2\u05de\u05dc\3\2\2\2")
        buf.write("\u05de\u05df\3\2\2\2\u05df\u00e5\3\2\2\2\u05e0\u05de\3")
        buf.write("\2\2\2\u05e1\u05e8\5\u00f0y\2\u05e2\u05e8\5\u00eav\2\u05e3")
        buf.write("\u05e4\7\u00c7\2\2\u05e4\u05e5\5\u00b2Z\2\u05e5\u05e6")
        buf.write("\7\u00c8\2\2\u05e6\u05e8\3\2\2\2\u05e7\u05e1\3\2\2\2\u05e7")
        buf.write("\u05e2\3\2\2\2\u05e7\u05e3\3\2\2\2\u05e8\u05ec\3\2\2\2")
        buf.write("\u05e9\u05eb\5\u00e8u\2\u05ea\u05e9\3\2\2\2\u05eb\u05ee")
        buf.write("\3\2\2\2\u05ec\u05ea\3\2\2\2\u05ec\u05ed\3\2\2\2\u05ed")
        buf.write("\u00e7\3\2\2\2\u05ee\u05ec\3\2\2\2\u05ef\u05f0\7\u00b4")
        buf.write("\2\2\u05f0\u05f2\5\u00f2z\2\u05f1\u05f3\5\u00eex\2\u05f2")
        buf.write("\u05f1\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3\u00e9\3\2\2\2")
        buf.write("\u05f4\u05f5\5\u00ecw\2\u05f5\u05f6\5\u00eex\2\u05f6\u00eb")
        buf.write("\3\2\2\2\u05f7\u05fb\5\u00c6d\2\u05f8\u05fb\5\u00dco\2")
        buf.write("\u05f9\u05fb\5\u00f0y\2\u05fa\u05f7\3\2\2\2\u05fa\u05f8")
        buf.write("\3\2\2\2\u05fa\u05f9\3\2\2\2\u05fb\u00ed\3\2\2\2\u05fc")
        buf.write("\u05fe\5,\27\2\u05fd\u05fc\3\2\2\2\u05fd\u05fe\3\2\2\2")
        buf.write("\u05fe\u05ff\3\2\2\2\u05ff\u0603\5\u00ccg\2\u0600\u0602")
        buf.write("\5\u00f8}\2\u0601\u0600\3\2\2\2\u0602\u0605\3\2\2\2\u0603")
        buf.write("\u0601\3\2\2\2\u0603\u0604\3\2\2\2\u0604\u00ef\3\2\2\2")
        buf.write("\u0605\u0603\3\2\2\2\u0606\u0609\5\u00f6|\2\u0607\u0608")
        buf.write("\7\u00b3\2\2\u0608\u060a\5\u00f6|\2\u0609\u0607\3\2\2")
        buf.write("\2\u0609\u060a\3\2\2\2\u060a\u0610\3\2\2\2\u060b\u060c")
        buf.write("\5\u00c0a\2\u060c\u060d\7\u00b3\2\2\u060d\u060e\5\u00f6")
        buf.write("|\2\u060e\u0610\3\2\2\2\u060f\u0606\3\2\2\2\u060f\u060b")
        buf.write("\3\2\2\2\u0610\u00f1\3\2\2\2\u0611\u0614\5\u00f4{\2\u0612")
        buf.write("\u0614\5\u00f6|\2\u0613\u0611\3\2\2\2\u0613\u0612\3\2")
        buf.write("\2\2\u0614\u00f3\3\2\2\2\u0615\u061b\5\u0100\u0081\2\u0616")
        buf.write("\u0617\7\u00cb\2\2\u0617\u0618\5\u00a6T\2\u0618\u0619")
        buf.write("\7\u00cc\2\2\u0619\u061b\3\2\2\2\u061a\u0615\3\2\2\2\u061a")
        buf.write("\u0616\3\2\2\2\u061b\u061f\3\2\2\2\u061c\u061e\5\u00f8")
        buf.write("}\2\u061d\u061c\3\2\2\2\u061e\u0621\3\2\2\2\u061f\u061d")
        buf.write("\3\2\2\2\u061f\u0620\3\2\2\2\u0620\u00f5\3\2\2\2\u0621")
        buf.write("\u061f\3\2\2\2\u0622\u0624\7\u00c4\2\2\u0623\u0622\3\2")
        buf.write("\2\2\u0624\u0627\3\2\2\2\u0625\u0623\3\2\2\2\u0625\u0626")
        buf.write("\3\2\2\2\u0626\u062e\3\2\2\2\u0627\u0625\3\2\2\2\u0628")
        buf.write("\u062f\7\u00d3\2\2\u0629\u062a\7\u00c4\2\2\u062a\u062b")
        buf.write("\7\u00cb\2\2\u062b\u062c\5\u00a6T\2\u062c\u062d\7\u00cc")
        buf.write("\2\2\u062d\u062f\3\2\2\2\u062e\u0628\3\2\2\2\u062e\u0629")
        buf.write("\3\2\2\2\u062f\u0633\3\2\2\2\u0630\u0632\5\u00f8}\2\u0631")
        buf.write("\u0630\3\2\2\2\u0632\u0635\3\2\2\2\u0633\u0631\3\2\2\2")
        buf.write("\u0633\u0634\3\2\2\2\u0634\u00f7\3\2\2\2\u0635\u0633\3")
        buf.write("\2\2\2\u0636\u0638\7\u00c9\2\2\u0637\u0639\5\u00a6T\2")
        buf.write("\u0638\u0637\3\2\2\2\u0638\u0639\3\2\2\2\u0639\u063a\3")
        buf.write("\2\2\2\u063a\u0640\7\u00ca\2\2\u063b\u063c\7\u00cb\2\2")
        buf.write("\u063c\u063d\5\u00a6T\2\u063d\u063e\7\u00cc\2\2\u063e")
        buf.write("\u0640\3\2\2\2\u063f\u0636\3\2\2\2\u063f\u063b\3\2\2\2")
        buf.write("\u0640\u00f9\3\2\2\2\u0641\u0643\5\u00fc\177\2\u0642\u0641")
        buf.write("\3\2\2\2\u0642\u0643\3\2\2\2\u0643\u064a\3\2\2\2\u0644")
        buf.write("\u0646\7\u00cd\2\2\u0645\u0647\5\u00fc\177\2\u0646\u0645")
        buf.write("\3\2\2\2\u0646\u0647\3\2\2\2\u0647\u0649\3\2\2\2\u0648")
        buf.write("\u0644\3\2\2\2\u0649\u064c\3\2\2\2\u064a\u0648\3\2\2\2")
        buf.write("\u064a\u064b\3\2\2\2\u064b\u00fb\3\2\2\2\u064c\u064a\3")
        buf.write("\2\2\2\u064d\u0654\5\u00e6t\2\u064e\u064f\7_\2\2\u064f")
        buf.write("\u0650\7\u00c7\2\2\u0650\u0651\5\u00fa~\2\u0651\u0652")
        buf.write("\7\u00c8\2\2\u0652\u0654\3\2\2\2\u0653\u064d\3\2\2\2\u0653")
        buf.write("\u064e\3\2\2\2\u0654\u00fd\3\2\2\2\u0655\u0656\t\24\2")
        buf.write("\2\u0656\u00ff\3\2\2\2\u0657\u0658\t\25\2\2\u0658\u0101")
        buf.write("\3\2\2\2\u0659\u065a\t\26\2\2\u065a\u0103\3\2\2\2\u065b")
        buf.write("\u065c\t\27\2\2\u065c\u0105\3\2\2\2\u065d\u065e\t\30\2")
        buf.write("\2\u065e\u0107\3\2\2\2\u065f\u0660\t\31\2\2\u0660\u0109")
        buf.write("\3\2\2\2\u0661\u0662\t\32\2\2\u0662\u010b\3\2\2\2\u00c0")
        buf.write("\u010d\u0112\u011a\u0121\u0126\u012c\u013a\u013e\u0144")
        buf.write("\u0149\u014e\u0154\u0158\u015e\u0165\u016c\u0171\u0175")
        buf.write("\u017e\u0181\u0184\u0189\u018d\u0191\u0196\u019a\u019c")
        buf.write("\u01a2\u01ae\u01bf\u01c6\u01ce\u01d9\u01e1\u01e9\u01f0")
        buf.write("\u01f7\u020e\u0215\u021d\u0227\u022d\u0231\u024f\u025b")
        buf.write("\u025f\u0268\u026c\u0271\u028b\u0296\u029a\u029e\u02a7")
        buf.write("\u02b1\u02b6\u02bc\u02c1\u02c6\u02cb\u02d0\u02d6\u02dc")
        buf.write("\u02e2\u02f4\u02f9\u02fc\u0306\u0309\u0316\u031e\u0325")
        buf.write("\u0328\u032d\u0331\u034f\u0353\u0355\u035c\u0360\u0366")
        buf.write("\u036b\u036e\u0371\u0378\u0380\u038d\u0399\u03a5\u03b1")
        buf.write("\u03b8\u03bc\u03c0\u03c6\u03ce\u03d5\u03d9\u03dd\u03ea")
        buf.write("\u03ed\u03f4\u03fe\u0402\u0407\u040c\u0419\u0423\u0429")
        buf.write("\u0433\u0440\u0442\u0457\u0459\u0468\u046a\u0475\u047e")
        buf.write("\u0486\u0488\u04aa\u04b7\u04bc\u04bf\u04c5\u04e2\u04e9")
        buf.write("\u04ed\u04f3\u04f7\u04fc\u0504\u050b\u050f\u0514\u0519")
        buf.write("\u051d\u0526\u052c\u0532\u0535\u0539\u053c\u0540\u0547")
        buf.write("\u054b\u054e\u0557\u055f\u0568\u056c\u0571\u0576\u057e")
        buf.write("\u0580\u0586\u0588\u058d\u0594\u059a\u05a1\u05a7\u05b1")
        buf.write("\u05b5\u05ba\u05c2\u05c8\u05cf\u05d3\u05d7\u05de\u05e7")
        buf.write("\u05ec\u05f2\u05fa\u05fd\u0603\u0609\u060f\u0613\u061a")
        buf.write("\u061f\u0625\u062e\u0633\u0638\u063f\u0642\u0646\u064a")
        buf.write("\u0653")
        return buf.getvalue()


class PHPParser ( Parser ):

    grammarFileName = "PHPParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'/>'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'//'", "'#'", "'abstract'", "'array'", 
                     "'as'", "'binary'", "<INVALID>", "<INVALID>", "'break'", 
                     "'callable'", "'case'", "'catch'", "'class'", "'clone'", 
                     "'const'", "'continue'", "'declare'", "'default'", 
                     "'do'", "'real'", "'double'", "'echo'", "'else'", "'elseif'", 
                     "'empty'", "'enddeclare'", "'endfor'", "'endforeach'", 
                     "'endif'", "'endswitch'", "'endwhile'", "'eval'", "'die'", 
                     "'extends'", "'final'", "'finally'", "'float'", "'for'", 
                     "'foreach'", "'function'", "'global'", "'goto'", "'if'", 
                     "'implements'", "'import'", "'include'", "'include_once'", 
                     "'instanceof'", "'insteadof'", "'int8'", "'int16'", 
                     "'int64'", "<INVALID>", "'interface'", "'isset'", "'list'", 
                     "'and'", "'or'", "'xor'", "'namespace'", "'new'", "'null'", 
                     "'object'", "'parent'", "'partial'", "'print'", "'private'", 
                     "'protected'", "'public'", "'require'", "'require_once'", 
                     "'resource'", "'return'", "'static'", "'string'", "'switch'", 
                     "'throw'", "'trait'", "'try'", "'clrtypeof'", "<INVALID>", 
                     "'unicode'", "'unset'", "'use'", "'var'", "'while'", 
                     "'yield'", "'__get'", "'__set'", "'__call'", "'__callstatic'", 
                     "'__construct'", "'__destruct'", "'__wakeup'", "'__sleep'", 
                     "'__autoload'", "'__isset'", "'__unset'", "'__tostring'", 
                     "'__invoke'", "'__set_state'", "'__clone'", "'__debuginfo'", 
                     "'__namespace__'", "'__class__'", "'__trait__'", "'__function__'", 
                     "'__method__'", "'__line__'", "'__file__'", "'__dir__'", 
                     "'<:'", "':>'", "'=>'", "'++'", "'--'", "'==='", "'!=='", 
                     "'=='", "<INVALID>", "'<='", "'>='", "'+='", "'-='", 
                     "'*='", "'**'", "'**='", "'/='", "'.='", "'%='", "'<<='", 
                     "'>>='", "'&='", "'|='", "'^='", "'||'", "'&&'", "'<<'", 
                     "'>>'", "'::'", "'->'", "'\\'", "'...'", "<INVALID>", 
                     "<INVALID>", "'&'", "'|'", "'!'", "'^'", "'+'", "'-'", 
                     "'*'", "'%'", "<INVALID>", "'~'", "'@'", "<INVALID>", 
                     "'.'", "'?'", "'('", "')'", "'['", "']'", "<INVALID>", 
                     "'}'", "','", "':'", "';'", "<INVALID>", "'''", "'`'" ]

    symbolicNames = [ "<INVALID>", "SeaWhitespace", "HtmlText", "PHPStart", 
                      "HtmlScriptOpen", "HtmlStyleOpen", "HtmlComment", 
                      "HtmlDtd", "HtmlOpen", "Shebang", "Error", "PHPStartInside", 
                      "HtmlClose", "HtmlSlashClose", "HtmlSlash", "HtmlEquals", 
                      "HtmlStartQuoteString", "HtmlStartDoubleQuoteString", 
                      "HtmlHex", "HtmlDecimal", "HtmlSpace", "HtmlName", 
                      "ErrorInside", "PHPStartInsideQuoteString", "HtmlEndQuoteString", 
                      "HtmlQuoteString", "ErrorHtmlQuote", "PHPStartDoubleQuoteString", 
                      "HtmlEndDoubleQuoteString", "HtmlDoubleQuoteString", 
                      "ErrorHtmlDoubleQuote", "ScriptText", "ScriptClose", 
                      "PHPStartInsideScript", "StyleBody", "PHPEnd", "Whitespace", 
                      "MultiLineComment", "SingleLineComment", "ShellStyleComment", 
                      "Abstract", "Array", "As", "BinaryCast", "BoolType", 
                      "BooleanConstant", "Break", "Callable", "Case", "Catch", 
                      "Class", "Clone", "Const", "Continue", "Declare", 
                      "Default", "Do", "DoubleCast", "DoubleType", "Echo", 
                      "Else", "ElseIf", "Empty", "EndDeclare", "EndFor", 
                      "EndForeach", "EndIf", "EndSwitch", "EndWhile", "Eval", 
                      "Exit", "Extends", "Final", "Finally", "FloatCast", 
                      "For", "Foreach", "Function", "Global", "Goto", "If", 
                      "Implements", "Import", "Include", "IncludeOnce", 
                      "InstanceOf", "InsteadOf", "Int8Cast", "Int16Cast", 
                      "Int64Type", "IntType", "Interface", "IsSet", "List", 
                      "LogicalAnd", "LogicalOr", "LogicalXor", "Namespace", 
                      "New", "Null", "ObjectType", "Parent_", "Partial", 
                      "Print", "Private", "Protected", "Public", "Require", 
                      "RequireOnce", "Resource", "Return", "Static", "StringType", 
                      "Switch", "Throw", "Trait", "Try", "Typeof", "UintCast", 
                      "UnicodeCast", "Unset", "Use", "Var", "While", "Yield", 
                      "Get", "Set", "Call", "CallStatic", "Constructor", 
                      "Destruct", "Wakeup", "Sleep", "Autoload", "IsSet__", 
                      "Unset__", "ToString__", "Invoke", "SetState", "Clone__", 
                      "DebugInfo", "Namespace__", "Class__", "Traic__", 
                      "Function__", "Method__", "Line__", "File__", "Dir__", 
                      "Lgeneric", "Rgeneric", "DoubleArrow", "Inc", "Dec", 
                      "IsIdentical", "IsNoidentical", "IsEqual", "IsNotEq", 
                      "IsSmallerOrEqual", "IsGreaterOrEqual", "PlusEqual", 
                      "MinusEqual", "MulEqual", "Pow", "PowEqual", "DivEqual", 
                      "Concaequal", "ModEqual", "ShiftLeftEqual", "ShiftRightEqual", 
                      "AndEqual", "OrEqual", "XorEqual", "BooleanOr", "BooleanAnd", 
                      "ShiftLeft", "ShiftRight", "DoubleColon", "ObjectOperator", 
                      "NamespaceSeparator", "Ellipsis", "Less", "Greater", 
                      "Ampersand", "Pipe", "Bang", "Caret", "Plus", "Minus", 
                      "Asterisk", "Percent", "Divide", "Tilde", "SuppressWarnings", 
                      "Dollar", "Dot", "QuestionMark", "OpenRoundBracket", 
                      "CloseRoundBracket", "OpenSquareBracket", "CloseSquareBracket", 
                      "OpenCurlyBracket", "CloseCurlyBracket", "Comma", 
                      "Colon", "SemiColon", "Eq", "Quote", "BackQuote", 
                      "VarName", "Label", "Octal", "Decimal", "Real", "Hex", 
                      "Binary", "BackQuoteString", "SingleQuoteString", 
                      "DoubleQuote", "StartNowDoc", "StartHereDoc", "ErrorPhp", 
                      "CurlyDollar", "StringPart", "Comment", "PHPEndSingleLineComment", 
                      "CommentEnd", "HereDocText" ]

    RULE_htmlDocument = 0
    RULE_htmlElementOrPhpBlock = 1
    RULE_htmlElement = 2
    RULE_scriptTextPart = 3
    RULE_phpBlock = 4
    RULE_importStatement = 5
    RULE_topStatement = 6
    RULE_useDeclaration = 7
    RULE_useDeclarationContentList = 8
    RULE_useDeclarationContent = 9
    RULE_namespaceDeclaration = 10
    RULE_namespaceStatement = 11
    RULE_functionDeclaration = 12
    RULE_classDeclaration = 13
    RULE_classEntryType = 14
    RULE_interfaceList = 15
    RULE_typeParameterListInBrackets = 16
    RULE_typeParameterList = 17
    RULE_typeParameterWithDefaultsList = 18
    RULE_typeParameterDecl = 19
    RULE_typeParameterWithDefaultDecl = 20
    RULE_genericDynamicArgs = 21
    RULE_attributes = 22
    RULE_attributesGroup = 23
    RULE_attribute = 24
    RULE_attributeArgList = 25
    RULE_attributeNamedArgList = 26
    RULE_attributeNamedArg = 27
    RULE_innerStatementList = 28
    RULE_innerStatement = 29
    RULE_statement = 30
    RULE_emptyStatement = 31
    RULE_nonEmptyStatement = 32
    RULE_blockStatement = 33
    RULE_ifStatement = 34
    RULE_elseIfStatement = 35
    RULE_elseIfColonStatement = 36
    RULE_elseStatement = 37
    RULE_elseColonStatement = 38
    RULE_whileStatement = 39
    RULE_doWhileStatement = 40
    RULE_forStatement = 41
    RULE_forInit = 42
    RULE_forUpdate = 43
    RULE_switchStatement = 44
    RULE_switchBlock = 45
    RULE_breakStatement = 46
    RULE_continueStatement = 47
    RULE_returnStatement = 48
    RULE_expressionStatement = 49
    RULE_unsetStatement = 50
    RULE_foreachStatement = 51
    RULE_tryCatchFinally = 52
    RULE_catchClause = 53
    RULE_finallyStatement = 54
    RULE_throwStatement = 55
    RULE_gotoStatement = 56
    RULE_declareStatement = 57
    RULE_inlineHtml = 58
    RULE_declareList = 59
    RULE_formalParameterList = 60
    RULE_formalParameter = 61
    RULE_typeHint = 62
    RULE_globalStatement = 63
    RULE_globalVar = 64
    RULE_echoStatement = 65
    RULE_staticVariableStatement = 66
    RULE_classStatement = 67
    RULE_traitAdaptations = 68
    RULE_traitAdaptationStatement = 69
    RULE_traitPrecedence = 70
    RULE_traitAlias = 71
    RULE_traitMethodReference = 72
    RULE_baseCtorCall = 73
    RULE_methodBody = 74
    RULE_propertyModifiers = 75
    RULE_memberModifiers = 76
    RULE_variableInitializer = 77
    RULE_identifierInititalizer = 78
    RULE_globalConstantDeclaration = 79
    RULE_expressionList = 80
    RULE_parenthesis = 81
    RULE_expression = 82
    RULE_andOrExpression = 83
    RULE_comparisonExpression = 84
    RULE_additionExpression = 85
    RULE_multiplicationExpression = 86
    RULE_notLeftRecursionExpression = 87
    RULE_newExpr = 88
    RULE_assignmentOperator = 89
    RULE_yieldExpression = 90
    RULE_arrayItemList = 91
    RULE_arrayItem = 92
    RULE_lambdaFunctionUseVars = 93
    RULE_lambdaFunctionUseVar = 94
    RULE_qualifiedStaticTypeRef = 95
    RULE_typeRef = 96
    RULE_indirectTypeRef = 97
    RULE_qualifiedNamespaceName = 98
    RULE_namespaceNameList = 99
    RULE_qualifiedNamespaceNameList = 100
    RULE_arguments = 101
    RULE_actualArgument = 102
    RULE_constantInititalizer = 103
    RULE_constantArrayItemList = 104
    RULE_constantArrayItem = 105
    RULE_constant = 106
    RULE_literalConstant = 107
    RULE_numericConstant = 108
    RULE_classConstant = 109
    RULE_stringConstant = 110
    RULE_string = 111
    RULE_interpolatedStringPart = 112
    RULE_chainList = 113
    RULE_chain = 114
    RULE_memberAccess = 115
    RULE_functionCall = 116
    RULE_functionCallName = 117
    RULE_actualArguments = 118
    RULE_chainBase = 119
    RULE_keyedFieldName = 120
    RULE_keyedSimpleFieldName = 121
    RULE_keyedVariable = 122
    RULE_squareCurlyExpression = 123
    RULE_assignmentList = 124
    RULE_assignmentListElement = 125
    RULE_modifier = 126
    RULE_identifier = 127
    RULE_memberModifier = 128
    RULE_magicConstant = 129
    RULE_magicMethod = 130
    RULE_primitiveType = 131
    RULE_castOperation = 132

    ruleNames =  [ "htmlDocument", "htmlElementOrPhpBlock", "htmlElement", 
                   "scriptTextPart", "phpBlock", "importStatement", "topStatement", 
                   "useDeclaration", "useDeclarationContentList", "useDeclarationContent", 
                   "namespaceDeclaration", "namespaceStatement", "functionDeclaration", 
                   "classDeclaration", "classEntryType", "interfaceList", 
                   "typeParameterListInBrackets", "typeParameterList", "typeParameterWithDefaultsList", 
                   "typeParameterDecl", "typeParameterWithDefaultDecl", 
                   "genericDynamicArgs", "attributes", "attributesGroup", 
                   "attribute", "attributeArgList", "attributeNamedArgList", 
                   "attributeNamedArg", "innerStatementList", "innerStatement", 
                   "statement", "emptyStatement", "nonEmptyStatement", "blockStatement", 
                   "ifStatement", "elseIfStatement", "elseIfColonStatement", 
                   "elseStatement", "elseColonStatement", "whileStatement", 
                   "doWhileStatement", "forStatement", "forInit", "forUpdate", 
                   "switchStatement", "switchBlock", "breakStatement", "continueStatement", 
                   "returnStatement", "expressionStatement", "unsetStatement", 
                   "foreachStatement", "tryCatchFinally", "catchClause", 
                   "finallyStatement", "throwStatement", "gotoStatement", 
                   "declareStatement", "inlineHtml", "declareList", "formalParameterList", 
                   "formalParameter", "typeHint", "globalStatement", "globalVar", 
                   "echoStatement", "staticVariableStatement", "classStatement", 
                   "traitAdaptations", "traitAdaptationStatement", "traitPrecedence", 
                   "traitAlias", "traitMethodReference", "baseCtorCall", 
                   "methodBody", "propertyModifiers", "memberModifiers", 
                   "variableInitializer", "identifierInititalizer", "globalConstantDeclaration", 
                   "expressionList", "parenthesis", "expression", "andOrExpression", 
                   "comparisonExpression", "additionExpression", "multiplicationExpression", 
                   "notLeftRecursionExpression", "newExpr", "assignmentOperator", 
                   "yieldExpression", "arrayItemList", "arrayItem", "lambdaFunctionUseVars", 
                   "lambdaFunctionUseVar", "qualifiedStaticTypeRef", "typeRef", 
                   "indirectTypeRef", "qualifiedNamespaceName", "namespaceNameList", 
                   "qualifiedNamespaceNameList", "arguments", "actualArgument", 
                   "constantInititalizer", "constantArrayItemList", "constantArrayItem", 
                   "constant", "literalConstant", "numericConstant", "classConstant", 
                   "stringConstant", "string", "interpolatedStringPart", 
                   "chainList", "chain", "memberAccess", "functionCall", 
                   "functionCallName", "actualArguments", "chainBase", "keyedFieldName", 
                   "keyedSimpleFieldName", "keyedVariable", "squareCurlyExpression", 
                   "assignmentList", "assignmentListElement", "modifier", 
                   "identifier", "memberModifier", "magicConstant", "magicMethod", 
                   "primitiveType", "castOperation" ]

    EOF = Token.EOF
    SeaWhitespace=1
    HtmlText=2
    PHPStart=3
    HtmlScriptOpen=4
    HtmlStyleOpen=5
    HtmlComment=6
    HtmlDtd=7
    HtmlOpen=8
    Shebang=9
    Error=10
    PHPStartInside=11
    HtmlClose=12
    HtmlSlashClose=13
    HtmlSlash=14
    HtmlEquals=15
    HtmlStartQuoteString=16
    HtmlStartDoubleQuoteString=17
    HtmlHex=18
    HtmlDecimal=19
    HtmlSpace=20
    HtmlName=21
    ErrorInside=22
    PHPStartInsideQuoteString=23
    HtmlEndQuoteString=24
    HtmlQuoteString=25
    ErrorHtmlQuote=26
    PHPStartDoubleQuoteString=27
    HtmlEndDoubleQuoteString=28
    HtmlDoubleQuoteString=29
    ErrorHtmlDoubleQuote=30
    ScriptText=31
    ScriptClose=32
    PHPStartInsideScript=33
    StyleBody=34
    PHPEnd=35
    Whitespace=36
    MultiLineComment=37
    SingleLineComment=38
    ShellStyleComment=39
    Abstract=40
    Array=41
    As=42
    BinaryCast=43
    BoolType=44
    BooleanConstant=45
    Break=46
    Callable=47
    Case=48
    Catch=49
    Class=50
    Clone=51
    Const=52
    Continue=53
    Declare=54
    Default=55
    Do=56
    DoubleCast=57
    DoubleType=58
    Echo=59
    Else=60
    ElseIf=61
    Empty=62
    EndDeclare=63
    EndFor=64
    EndForeach=65
    EndIf=66
    EndSwitch=67
    EndWhile=68
    Eval=69
    Exit=70
    Extends=71
    Final=72
    Finally=73
    FloatCast=74
    For=75
    Foreach=76
    Function=77
    Global=78
    Goto=79
    If=80
    Implements=81
    Import=82
    Include=83
    IncludeOnce=84
    InstanceOf=85
    InsteadOf=86
    Int8Cast=87
    Int16Cast=88
    Int64Type=89
    IntType=90
    Interface=91
    IsSet=92
    List=93
    LogicalAnd=94
    LogicalOr=95
    LogicalXor=96
    Namespace=97
    New=98
    Null=99
    ObjectType=100
    Parent_=101
    Partial=102
    Print=103
    Private=104
    Protected=105
    Public=106
    Require=107
    RequireOnce=108
    Resource=109
    Return=110
    Static=111
    StringType=112
    Switch=113
    Throw=114
    Trait=115
    Try=116
    Typeof=117
    UintCast=118
    UnicodeCast=119
    Unset=120
    Use=121
    Var=122
    While=123
    Yield=124
    Get=125
    Set=126
    Call=127
    CallStatic=128
    Constructor=129
    Destruct=130
    Wakeup=131
    Sleep=132
    Autoload=133
    IsSet__=134
    Unset__=135
    ToString__=136
    Invoke=137
    SetState=138
    Clone__=139
    DebugInfo=140
    Namespace__=141
    Class__=142
    Traic__=143
    Function__=144
    Method__=145
    Line__=146
    File__=147
    Dir__=148
    Lgeneric=149
    Rgeneric=150
    DoubleArrow=151
    Inc=152
    Dec=153
    IsIdentical=154
    IsNoidentical=155
    IsEqual=156
    IsNotEq=157
    IsSmallerOrEqual=158
    IsGreaterOrEqual=159
    PlusEqual=160
    MinusEqual=161
    MulEqual=162
    Pow=163
    PowEqual=164
    DivEqual=165
    Concaequal=166
    ModEqual=167
    ShiftLeftEqual=168
    ShiftRightEqual=169
    AndEqual=170
    OrEqual=171
    XorEqual=172
    BooleanOr=173
    BooleanAnd=174
    ShiftLeft=175
    ShiftRight=176
    DoubleColon=177
    ObjectOperator=178
    NamespaceSeparator=179
    Ellipsis=180
    Less=181
    Greater=182
    Ampersand=183
    Pipe=184
    Bang=185
    Caret=186
    Plus=187
    Minus=188
    Asterisk=189
    Percent=190
    Divide=191
    Tilde=192
    SuppressWarnings=193
    Dollar=194
    Dot=195
    QuestionMark=196
    OpenRoundBracket=197
    CloseRoundBracket=198
    OpenSquareBracket=199
    CloseSquareBracket=200
    OpenCurlyBracket=201
    CloseCurlyBracket=202
    Comma=203
    Colon=204
    SemiColon=205
    Eq=206
    Quote=207
    BackQuote=208
    VarName=209
    Label=210
    Octal=211
    Decimal=212
    Real=213
    Hex=214
    Binary=215
    BackQuoteString=216
    SingleQuoteString=217
    DoubleQuote=218
    StartNowDoc=219
    StartHereDoc=220
    ErrorPhp=221
    CurlyDollar=222
    StringPart=223
    Comment=224
    PHPEndSingleLineComment=225
    CommentEnd=226
    HereDocText=227

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class HtmlDocumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PHPParser.EOF, 0)

        def Shebang(self):
            return self.getToken(PHPParser.Shebang, 0)

        def htmlElementOrPhpBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.HtmlElementOrPhpBlockContext)
            else:
                return self.getTypedRuleContext(PHPParser.HtmlElementOrPhpBlockContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_htmlDocument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHtmlDocument" ):
                listener.enterHtmlDocument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHtmlDocument" ):
                listener.exitHtmlDocument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHtmlDocument" ):
                return visitor.visitHtmlDocument(self)
            else:
                return visitor.visitChildren(self)




    def htmlDocument(self):

        localctx = PHPParser.HtmlDocumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_htmlDocument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PHPParser.Shebang:
                self.state = 266
                self.match(PHPParser.Shebang)


            self.state = 272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PHPParser.HtmlText) | (1 << PHPParser.HtmlScriptOpen) | (1 << PHPParser.HtmlStyleOpen) | (1 << PHPParser.HtmlDtd) | (1 << PHPParser.HtmlOpen) | (1 << PHPParser.HtmlClose) | (1 << PHPParser.HtmlSlashClose) | (1 << PHPParser.HtmlSlash) | (1 << PHPParser.HtmlEquals) | (1 << PHPParser.HtmlStartQuoteString) | (1 << PHPParser.HtmlStartDoubleQuoteString) | (1 << PHPParser.HtmlHex) | (1 << PHPParser.HtmlDecimal) | (1 << PHPParser.HtmlName) | (1 << PHPParser.HtmlEndQuoteString) | (1 << PHPParser.HtmlQuoteString) | (1 << PHPParser.HtmlEndDoubleQuoteString) | (1 << PHPParser.HtmlDoubleQuoteString) | (1 << PHPParser.ScriptText) | (1 << PHPParser.ScriptClose) | (1 << PHPParser.StyleBody) | (1 << PHPParser.Abstract) | (1 << PHPParser.Array) | (1 << PHPParser.As) | (1 << PHPParser.BinaryCast) | (1 << PHPParser.BoolType) | (1 << PHPParser.BooleanConstant) | (1 << PHPParser.Break) | (1 << PHPParser.Callable) | (1 << PHPParser.Case) | (1 << PHPParser.Catch) | (1 << PHPParser.Class) | (1 << PHPParser.Clone) | (1 << PHPParser.Const) | (1 << PHPParser.Continue) | (1 << PHPParser.Declare) | (1 << PHPParser.Default) | (1 << PHPParser.Do) | (1 << PHPParser.DoubleCast) | (1 << PHPParser.DoubleType) | (1 << PHPParser.Echo) | (1 << PHPParser.Else) | (1 << PHPParser.ElseIf) | (1 << PHPParser.Empty) | (1 << PHPParser.EndDeclare))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PHPParser.EndFor - 64)) | (1 << (PHPParser.EndForeach - 64)) | (1 << (PHPParser.EndIf - 64)) | (1 << (PHPParser.EndSwitch - 64)) | (1 << (PHPParser.EndWhile - 64)) | (1 << (PHPParser.Eval - 64)) | (1 << (PHPParser.Exit - 64)) | (1 << (PHPParser.Extends - 64)) | (1 << (PHPParser.Final - 64)) | (1 << (PHPParser.Finally - 64)) | (1 << (PHPParser.FloatCast - 64)) | (1 << (PHPParser.For - 64)) | (1 << (PHPParser.Foreach - 64)) | (1 << (PHPParser.Function - 64)) | (1 << (PHPParser.Global - 64)) | (1 << (PHPParser.Goto - 64)) | (1 << (PHPParser.If - 64)) | (1 << (PHPParser.Implements - 64)) | (1 << (PHPParser.Import - 64)) | (1 << (PHPParser.Include - 64)) | (1 << (PHPParser.IncludeOnce - 64)) | (1 << (PHPParser.InstanceOf - 64)) | (1 << (PHPParser.InsteadOf - 64)) | (1 << (PHPParser.Int8Cast - 64)) | (1 << (PHPParser.Int16Cast - 64)) | (1 << (PHPParser.Int64Type - 64)) | (1 << (PHPParser.IntType - 64)) | (1 << (PHPParser.Interface - 64)) | (1 << (PHPParser.IsSet - 64)) | (1 << (PHPParser.List - 64)) | (1 << (PHPParser.LogicalAnd - 64)) | (1 << (PHPParser.LogicalOr - 64)) | (1 << (PHPParser.LogicalXor - 64)) | (1 << (PHPParser.Namespace - 64)) | (1 << (PHPParser.New - 64)) | (1 << (PHPParser.Null - 64)) | (1 << (PHPParser.ObjectType - 64)) | (1 << (PHPParser.Parent_ - 64)) | (1 << (PHPParser.Partial - 64)) | (1 << (PHPParser.Print - 64)) | (1 << (PHPParser.Private - 64)) | (1 << (PHPParser.Protected - 64)) | (1 << (PHPParser.Public - 64)) | (1 << (PHPParser.Require - 64)) | (1 << (PHPParser.RequireOnce - 64)) | (1 << (PHPParser.Resource - 64)) | (1 << (PHPParser.Return - 64)) | (1 << (PHPParser.Static - 64)) | (1 << (PHPParser.StringType - 64)) | (1 << (PHPParser.Switch - 64)) | (1 << (PHPParser.Throw - 64)) | (1 << (PHPParser.Trait - 64)) | (1 << (PHPParser.Try - 64)) | (1 << (PHPParser.Typeof - 64)) | (1 << (PHPParser.UintCast - 64)) | (1 << (PHPParser.UnicodeCast - 64)) | (1 << (PHPParser.Unset - 64)) | (1 << (PHPParser.Use - 64)) | (1 << (PHPParser.Var - 64)) | (1 << (PHPParser.While - 64)) | (1 << (PHPParser.Yield - 64)) | (1 << (PHPParser.Get - 64)) | (1 << (PHPParser.Set - 64)) | (1 << (PHPParser.Call - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PHPParser.CallStatic - 128)) | (1 << (PHPParser.Constructor - 128)) | (1 << (PHPParser.Destruct - 128)) | (1 << (PHPParser.Wakeup - 128)) | (1 << (PHPParser.Sleep - 128)) | (1 << (PHPParser.Autoload - 128)) | (1 << (PHPParser.IsSet__ - 128)) | (1 << (PHPParser.Unset__ - 128)) | (1 << (PHPParser.ToString__ - 128)) | (1 << (PHPParser.Invoke - 128)) | (1 << (PHPParser.SetState - 128)) | (1 << (PHPParser.Clone__ - 128)) | (1 << (PHPParser.DebugInfo - 128)) | (1 << (PHPParser.Namespace__ - 128)) | (1 << (PHPParser.Class__ - 128)) | (1 << (PHPParser.Traic__ - 128)) | (1 << (PHPParser.Function__ - 128)) | (1 << (PHPParser.Method__ - 128)) | (1 << (PHPParser.Line__ - 128)) | (1 << (PHPParser.File__ - 128)) | (1 << (PHPParser.Dir__ - 128)) | (1 << (PHPParser.Inc - 128)) | (1 << (PHPParser.Dec - 128)) | (1 << (PHPParser.NamespaceSeparator - 128)) | (1 << (PHPParser.Bang - 128)) | (1 << (PHPParser.Plus - 128)) | (1 << (PHPParser.Minus - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PHPParser.Tilde - 192)) | (1 << (PHPParser.SuppressWarnings - 192)) | (1 << (PHPParser.Dollar - 192)) | (1 << (PHPParser.OpenRoundBracket - 192)) | (1 << (PHPParser.OpenSquareBracket - 192)) | (1 << (PHPParser.OpenCurlyBracket - 192)) | (1 << (PHPParser.SemiColon - 192)) | (1 << (PHPParser.VarName - 192)) | (1 << (PHPParser.Label - 192)) | (1 << (PHPParser.Octal - 192)) | (1 << (PHPParser.Decimal - 192)) | (1 << (PHPParser.Real - 192)) | (1 << (PHPParser.Hex - 192)) | (1 << (PHPParser.Binary - 192)) | (1 << (PHPParser.BackQuoteString - 192)) | (1 << (PHPParser.SingleQuoteString - 192)) | (1 << (PHPParser.DoubleQuote - 192)) | (1 << (PHPParser.StartNowDoc - 192)) | (1 << (PHPParser.StartHereDoc - 192)))) != 0):
                self.state = 269
                self.htmlElementOrPhpBlock()
                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 275
            self.match(PHPParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HtmlElementOrPhpBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def htmlElement(self):
            return self.getTypedRuleContext(PHPParser.HtmlElementContext,0)


        def phpBlock(self):
            return self.getTypedRuleContext(PHPParser.PhpBlockContext,0)


        def scriptTextPart(self):
            return self.getTypedRuleContext(PHPParser.ScriptTextPartContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_htmlElementOrPhpBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHtmlElementOrPhpBlock" ):
                listener.enterHtmlElementOrPhpBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHtmlElementOrPhpBlock" ):
                listener.exitHtmlElementOrPhpBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHtmlElementOrPhpBlock" ):
                return visitor.visitHtmlElementOrPhpBlock(self)
            else:
                return visitor.visitChildren(self)




    def htmlElementOrPhpBlock(self):

        localctx = PHPParser.HtmlElementOrPhpBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_htmlElementOrPhpBlock)
        try:
            self.state = 280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 277
                self.htmlElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 278
                self.phpBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 279
                self.scriptTextPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HtmlElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HtmlDtd(self):
            return self.getToken(PHPParser.HtmlDtd, 0)

        def HtmlScriptOpen(self):
            return self.getToken(PHPParser.HtmlScriptOpen, 0)

        def HtmlClose(self):
            return self.getToken(PHPParser.HtmlClose, 0)

        def HtmlStyleOpen(self):
            return self.getToken(PHPParser.HtmlStyleOpen, 0)

        def ScriptClose(self):
            return self.getToken(PHPParser.ScriptClose, 0)

        def StyleBody(self):
            return self.getToken(PHPParser.StyleBody, 0)

        def HtmlOpen(self):
            return self.getToken(PHPParser.HtmlOpen, 0)

        def HtmlName(self):
            return self.getToken(PHPParser.HtmlName, 0)

        def HtmlSlash(self):
            return self.getToken(PHPParser.HtmlSlash, 0)

        def HtmlText(self):
            return self.getToken(PHPParser.HtmlText, 0)

        def HtmlEquals(self):
            return self.getToken(PHPParser.HtmlEquals, 0)

        def HtmlStartQuoteString(self):
            return self.getToken(PHPParser.HtmlStartQuoteString, 0)

        def HtmlEndQuoteString(self):
            return self.getToken(PHPParser.HtmlEndQuoteString, 0)

        def HtmlStartDoubleQuoteString(self):
            return self.getToken(PHPParser.HtmlStartDoubleQuoteString, 0)

        def HtmlEndDoubleQuoteString(self):
            return self.getToken(PHPParser.HtmlEndDoubleQuoteString, 0)

        def HtmlHex(self):
            return self.getToken(PHPParser.HtmlHex, 0)

        def HtmlDecimal(self):
            return self.getToken(PHPParser.HtmlDecimal, 0)

        def HtmlQuoteString(self):
            return self.getToken(PHPParser.HtmlQuoteString, 0)

        def HtmlDoubleQuoteString(self):
            return self.getToken(PHPParser.HtmlDoubleQuoteString, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_htmlElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHtmlElement" ):
                listener.enterHtmlElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHtmlElement" ):
                listener.exitHtmlElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHtmlElement" ):
                return visitor.visitHtmlElement(self)
            else:
                return visitor.visitChildren(self)




    def htmlElement(self):

        localctx = PHPParser.HtmlElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_htmlElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PHPParser.HtmlText) | (1 << PHPParser.HtmlScriptOpen) | (1 << PHPParser.HtmlStyleOpen) | (1 << PHPParser.HtmlDtd) | (1 << PHPParser.HtmlOpen) | (1 << PHPParser.HtmlClose) | (1 << PHPParser.HtmlSlashClose) | (1 << PHPParser.HtmlSlash) | (1 << PHPParser.HtmlEquals) | (1 << PHPParser.HtmlStartQuoteString) | (1 << PHPParser.HtmlStartDoubleQuoteString) | (1 << PHPParser.HtmlHex) | (1 << PHPParser.HtmlDecimal) | (1 << PHPParser.HtmlName) | (1 << PHPParser.HtmlEndQuoteString) | (1 << PHPParser.HtmlQuoteString) | (1 << PHPParser.HtmlEndDoubleQuoteString) | (1 << PHPParser.HtmlDoubleQuoteString) | (1 << PHPParser.ScriptClose) | (1 << PHPParser.StyleBody))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScriptTextPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ScriptText(self, i:int=None):
            if i is None:
                return self.getTokens(PHPParser.ScriptText)
            else:
                return self.getToken(PHPParser.ScriptText, i)

        def getRuleIndex(self):
            return PHPParser.RULE_scriptTextPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScriptTextPart" ):
                listener.enterScriptTextPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScriptTextPart" ):
                listener.exitScriptTextPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScriptTextPart" ):
                return visitor.visitScriptTextPart(self)
            else:
                return visitor.visitChildren(self)




    def scriptTextPart(self):

        localctx = PHPParser.ScriptTextPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_scriptTextPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 284
                    self.match(PHPParser.ScriptText)

                else:
                    raise NoViableAltException(self)
                self.state = 287 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PhpBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.ImportStatementContext)
            else:
                return self.getTypedRuleContext(PHPParser.ImportStatementContext,i)


        def topStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.TopStatementContext)
            else:
                return self.getTypedRuleContext(PHPParser.TopStatementContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_phpBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhpBlock" ):
                listener.enterPhpBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhpBlock" ):
                listener.exitPhpBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhpBlock" ):
                return visitor.visitPhpBlock(self)
            else:
                return visitor.visitChildren(self)




    def phpBlock(self):

        localctx = PHPParser.PhpBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_phpBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 289
                    self.importStatement() 
                self.state = 294
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 296 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 295
                    self.topStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 298 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Import(self):
            return self.getToken(PHPParser.Import, 0)

        def Namespace(self):
            return self.getToken(PHPParser.Namespace, 0)

        def namespaceNameList(self):
            return self.getTypedRuleContext(PHPParser.NamespaceNameListContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_importStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStatement" ):
                listener.enterImportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStatement" ):
                listener.exitImportStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportStatement" ):
                return visitor.visitImportStatement(self)
            else:
                return visitor.visitChildren(self)




    def importStatement(self):

        localctx = PHPParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_importStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(PHPParser.Import)
            self.state = 301
            self.match(PHPParser.Namespace)
            self.state = 302
            self.namespaceNameList()
            self.state = 303
            self.match(PHPParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TopStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def emptyStatement(self):
            return self.getTypedRuleContext(PHPParser.EmptyStatementContext,0)


        def nonEmptyStatement(self):
            return self.getTypedRuleContext(PHPParser.NonEmptyStatementContext,0)


        def useDeclaration(self):
            return self.getTypedRuleContext(PHPParser.UseDeclarationContext,0)


        def namespaceDeclaration(self):
            return self.getTypedRuleContext(PHPParser.NamespaceDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(PHPParser.FunctionDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(PHPParser.ClassDeclarationContext,0)


        def globalConstantDeclaration(self):
            return self.getTypedRuleContext(PHPParser.GlobalConstantDeclarationContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_topStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopStatement" ):
                listener.enterTopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopStatement" ):
                listener.exitTopStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopStatement" ):
                return visitor.visitTopStatement(self)
            else:
                return visitor.visitChildren(self)




    def topStatement(self):

        localctx = PHPParser.TopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_topStatement)
        try:
            self.state = 312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 305
                self.emptyStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 306
                self.nonEmptyStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 307
                self.useDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 308
                self.namespaceDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 309
                self.functionDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 310
                self.classDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 311
                self.globalConstantDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UseDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Use(self):
            return self.getToken(PHPParser.Use, 0)

        def useDeclarationContentList(self):
            return self.getTypedRuleContext(PHPParser.UseDeclarationContentListContext,0)


        def Function(self):
            return self.getToken(PHPParser.Function, 0)

        def Const(self):
            return self.getToken(PHPParser.Const, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_useDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDeclaration" ):
                listener.enterUseDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDeclaration" ):
                listener.exitUseDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseDeclaration" ):
                return visitor.visitUseDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def useDeclaration(self):

        localctx = PHPParser.UseDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_useDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(PHPParser.Use)
            self.state = 316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 315
                _la = self._input.LA(1)
                if not(_la==PHPParser.Const or _la==PHPParser.Function):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 318
            self.useDeclarationContentList()
            self.state = 319
            self.match(PHPParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UseDeclarationContentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useDeclarationContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.UseDeclarationContentContext)
            else:
                return self.getTypedRuleContext(PHPParser.UseDeclarationContentContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_useDeclarationContentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDeclarationContentList" ):
                listener.enterUseDeclarationContentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDeclarationContentList" ):
                listener.exitUseDeclarationContentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseDeclarationContentList" ):
                return visitor.visitUseDeclarationContentList(self)
            else:
                return visitor.visitChildren(self)




    def useDeclarationContentList(self):

        localctx = PHPParser.UseDeclarationContentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_useDeclarationContentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PHPParser.NamespaceSeparator:
                self.state = 321
                self.match(PHPParser.NamespaceSeparator)


            self.state = 324
            self.useDeclarationContent()
            self.state = 332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PHPParser.Comma:
                self.state = 325
                self.match(PHPParser.Comma)
                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.NamespaceSeparator:
                    self.state = 326
                    self.match(PHPParser.NamespaceSeparator)


                self.state = 329
                self.useDeclarationContent()
                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UseDeclarationContentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespaceNameList(self):
            return self.getTypedRuleContext(PHPParser.NamespaceNameListContext,0)


        def As(self):
            return self.getToken(PHPParser.As, 0)

        def identifier(self):
            return self.getTypedRuleContext(PHPParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_useDeclarationContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDeclarationContent" ):
                listener.enterUseDeclarationContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDeclarationContent" ):
                listener.exitUseDeclarationContent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseDeclarationContent" ):
                return visitor.visitUseDeclarationContent(self)
            else:
                return visitor.visitChildren(self)




    def useDeclarationContent(self):

        localctx = PHPParser.UseDeclarationContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_useDeclarationContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.namespaceNameList()
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PHPParser.As:
                self.state = 336
                self.match(PHPParser.As)
                self.state = 337
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespaceDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(PHPParser.Namespace, 0)

        def OpenCurlyBracket(self):
            return self.getToken(PHPParser.OpenCurlyBracket, 0)

        def namespaceNameList(self):
            return self.getTypedRuleContext(PHPParser.NamespaceNameListContext,0)


        def namespaceStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.NamespaceStatementContext)
            else:
                return self.getTypedRuleContext(PHPParser.NamespaceStatementContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_namespaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceDeclaration" ):
                listener.enterNamespaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceDeclaration" ):
                listener.exitNamespaceDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespaceDeclaration" ):
                return visitor.visitNamespaceDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def namespaceDeclaration(self):

        localctx = PHPParser.NamespaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_namespaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.match(PHPParser.Namespace)
            self.state = 355
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)))) != 0) or _la==PHPParser.Label:
                    self.state = 341
                    self.namespaceNameList()


                self.state = 344
                self.match(PHPParser.OpenCurlyBracket)
                self.state = 348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PHPParser.HtmlText) | (1 << PHPParser.HtmlScriptOpen) | (1 << PHPParser.HtmlStyleOpen) | (1 << PHPParser.HtmlDtd) | (1 << PHPParser.HtmlOpen) | (1 << PHPParser.HtmlClose) | (1 << PHPParser.HtmlSlashClose) | (1 << PHPParser.HtmlSlash) | (1 << PHPParser.HtmlEquals) | (1 << PHPParser.HtmlStartQuoteString) | (1 << PHPParser.HtmlStartDoubleQuoteString) | (1 << PHPParser.HtmlHex) | (1 << PHPParser.HtmlDecimal) | (1 << PHPParser.HtmlName) | (1 << PHPParser.HtmlEndQuoteString) | (1 << PHPParser.HtmlQuoteString) | (1 << PHPParser.HtmlEndDoubleQuoteString) | (1 << PHPParser.HtmlDoubleQuoteString) | (1 << PHPParser.ScriptText) | (1 << PHPParser.ScriptClose) | (1 << PHPParser.StyleBody) | (1 << PHPParser.Abstract) | (1 << PHPParser.Array) | (1 << PHPParser.As) | (1 << PHPParser.BinaryCast) | (1 << PHPParser.BoolType) | (1 << PHPParser.BooleanConstant) | (1 << PHPParser.Break) | (1 << PHPParser.Callable) | (1 << PHPParser.Case) | (1 << PHPParser.Catch) | (1 << PHPParser.Class) | (1 << PHPParser.Clone) | (1 << PHPParser.Const) | (1 << PHPParser.Continue) | (1 << PHPParser.Declare) | (1 << PHPParser.Default) | (1 << PHPParser.Do) | (1 << PHPParser.DoubleCast) | (1 << PHPParser.DoubleType) | (1 << PHPParser.Echo) | (1 << PHPParser.Else) | (1 << PHPParser.ElseIf) | (1 << PHPParser.Empty) | (1 << PHPParser.EndDeclare))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PHPParser.EndFor - 64)) | (1 << (PHPParser.EndForeach - 64)) | (1 << (PHPParser.EndIf - 64)) | (1 << (PHPParser.EndSwitch - 64)) | (1 << (PHPParser.EndWhile - 64)) | (1 << (PHPParser.Eval - 64)) | (1 << (PHPParser.Exit - 64)) | (1 << (PHPParser.Extends - 64)) | (1 << (PHPParser.Final - 64)) | (1 << (PHPParser.Finally - 64)) | (1 << (PHPParser.FloatCast - 64)) | (1 << (PHPParser.For - 64)) | (1 << (PHPParser.Foreach - 64)) | (1 << (PHPParser.Function - 64)) | (1 << (PHPParser.Global - 64)) | (1 << (PHPParser.Goto - 64)) | (1 << (PHPParser.If - 64)) | (1 << (PHPParser.Implements - 64)) | (1 << (PHPParser.Import - 64)) | (1 << (PHPParser.Include - 64)) | (1 << (PHPParser.IncludeOnce - 64)) | (1 << (PHPParser.InstanceOf - 64)) | (1 << (PHPParser.InsteadOf - 64)) | (1 << (PHPParser.Int8Cast - 64)) | (1 << (PHPParser.Int16Cast - 64)) | (1 << (PHPParser.Int64Type - 64)) | (1 << (PHPParser.IntType - 64)) | (1 << (PHPParser.Interface - 64)) | (1 << (PHPParser.IsSet - 64)) | (1 << (PHPParser.List - 64)) | (1 << (PHPParser.LogicalAnd - 64)) | (1 << (PHPParser.LogicalOr - 64)) | (1 << (PHPParser.LogicalXor - 64)) | (1 << (PHPParser.Namespace - 64)) | (1 << (PHPParser.New - 64)) | (1 << (PHPParser.Null - 64)) | (1 << (PHPParser.ObjectType - 64)) | (1 << (PHPParser.Parent_ - 64)) | (1 << (PHPParser.Partial - 64)) | (1 << (PHPParser.Print - 64)) | (1 << (PHPParser.Private - 64)) | (1 << (PHPParser.Protected - 64)) | (1 << (PHPParser.Public - 64)) | (1 << (PHPParser.Require - 64)) | (1 << (PHPParser.RequireOnce - 64)) | (1 << (PHPParser.Resource - 64)) | (1 << (PHPParser.Return - 64)) | (1 << (PHPParser.Static - 64)) | (1 << (PHPParser.StringType - 64)) | (1 << (PHPParser.Switch - 64)) | (1 << (PHPParser.Throw - 64)) | (1 << (PHPParser.Trait - 64)) | (1 << (PHPParser.Try - 64)) | (1 << (PHPParser.Typeof - 64)) | (1 << (PHPParser.UintCast - 64)) | (1 << (PHPParser.UnicodeCast - 64)) | (1 << (PHPParser.Unset - 64)) | (1 << (PHPParser.Use - 64)) | (1 << (PHPParser.Var - 64)) | (1 << (PHPParser.While - 64)) | (1 << (PHPParser.Yield - 64)) | (1 << (PHPParser.Get - 64)) | (1 << (PHPParser.Set - 64)) | (1 << (PHPParser.Call - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PHPParser.CallStatic - 128)) | (1 << (PHPParser.Constructor - 128)) | (1 << (PHPParser.Destruct - 128)) | (1 << (PHPParser.Wakeup - 128)) | (1 << (PHPParser.Sleep - 128)) | (1 << (PHPParser.Autoload - 128)) | (1 << (PHPParser.IsSet__ - 128)) | (1 << (PHPParser.Unset__ - 128)) | (1 << (PHPParser.ToString__ - 128)) | (1 << (PHPParser.Invoke - 128)) | (1 << (PHPParser.SetState - 128)) | (1 << (PHPParser.Clone__ - 128)) | (1 << (PHPParser.DebugInfo - 128)) | (1 << (PHPParser.Namespace__ - 128)) | (1 << (PHPParser.Class__ - 128)) | (1 << (PHPParser.Traic__ - 128)) | (1 << (PHPParser.Function__ - 128)) | (1 << (PHPParser.Method__ - 128)) | (1 << (PHPParser.Line__ - 128)) | (1 << (PHPParser.File__ - 128)) | (1 << (PHPParser.Dir__ - 128)) | (1 << (PHPParser.Inc - 128)) | (1 << (PHPParser.Dec - 128)) | (1 << (PHPParser.NamespaceSeparator - 128)) | (1 << (PHPParser.Bang - 128)) | (1 << (PHPParser.Plus - 128)) | (1 << (PHPParser.Minus - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PHPParser.Tilde - 192)) | (1 << (PHPParser.SuppressWarnings - 192)) | (1 << (PHPParser.Dollar - 192)) | (1 << (PHPParser.OpenRoundBracket - 192)) | (1 << (PHPParser.OpenSquareBracket - 192)) | (1 << (PHPParser.OpenCurlyBracket - 192)) | (1 << (PHPParser.VarName - 192)) | (1 << (PHPParser.Label - 192)) | (1 << (PHPParser.Octal - 192)) | (1 << (PHPParser.Decimal - 192)) | (1 << (PHPParser.Real - 192)) | (1 << (PHPParser.Hex - 192)) | (1 << (PHPParser.Binary - 192)) | (1 << (PHPParser.BackQuoteString - 192)) | (1 << (PHPParser.SingleQuoteString - 192)) | (1 << (PHPParser.DoubleQuote - 192)) | (1 << (PHPParser.StartNowDoc - 192)) | (1 << (PHPParser.StartHereDoc - 192)))) != 0):
                    self.state = 345
                    self.namespaceStatement()
                    self.state = 350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 351
                self.match(PHPParser.CloseCurlyBracket)
                pass

            elif la_ == 2:
                self.state = 352
                self.namespaceNameList()
                self.state = 353
                self.match(PHPParser.SemiColon)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespaceStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonEmptyStatement(self):
            return self.getTypedRuleContext(PHPParser.NonEmptyStatementContext,0)


        def useDeclaration(self):
            return self.getTypedRuleContext(PHPParser.UseDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(PHPParser.FunctionDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(PHPParser.ClassDeclarationContext,0)


        def globalConstantDeclaration(self):
            return self.getTypedRuleContext(PHPParser.GlobalConstantDeclarationContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_namespaceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceStatement" ):
                listener.enterNamespaceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceStatement" ):
                listener.exitNamespaceStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespaceStatement" ):
                return visitor.visitNamespaceStatement(self)
            else:
                return visitor.visitChildren(self)




    def namespaceStatement(self):

        localctx = PHPParser.NamespaceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_namespaceStatement)
        try:
            self.state = 362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 357
                self.nonEmptyStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 358
                self.useDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 359
                self.functionDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 360
                self.classDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 361
                self.globalConstantDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(PHPParser.AttributesContext,0)


        def Function(self):
            return self.getToken(PHPParser.Function, 0)

        def identifier(self):
            return self.getTypedRuleContext(PHPParser.IdentifierContext,0)


        def formalParameterList(self):
            return self.getTypedRuleContext(PHPParser.FormalParameterListContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(PHPParser.BlockStatementContext,0)


        def typeParameterListInBrackets(self):
            return self.getTypedRuleContext(PHPParser.TypeParameterListInBracketsContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDeclaration" ):
                return visitor.visitFunctionDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def functionDeclaration(self):

        localctx = PHPParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.attributes()
            self.state = 365
            self.match(PHPParser.Function)
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PHPParser.Ampersand:
                self.state = 366
                self.match(PHPParser.Ampersand)


            self.state = 369
            self.identifier()
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PHPParser.Lgeneric:
                self.state = 370
                self.typeParameterListInBrackets()


            self.state = 373
            self.match(PHPParser.OpenRoundBracket)
            self.state = 374
            self.formalParameterList()
            self.state = 375
            self.match(PHPParser.CloseRoundBracket)
            self.state = 376
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(PHPParser.AttributesContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PHPParser.OpenCurlyBracket, 0)

        def classEntryType(self):
            return self.getTypedRuleContext(PHPParser.ClassEntryTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PHPParser.IdentifierContext,0)


        def Interface(self):
            return self.getToken(PHPParser.Interface, 0)

        def Private(self):
            return self.getToken(PHPParser.Private, 0)

        def modifier(self):
            return self.getTypedRuleContext(PHPParser.ModifierContext,0)


        def Partial(self):
            return self.getToken(PHPParser.Partial, 0)

        def classStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.ClassStatementContext)
            else:
                return self.getTypedRuleContext(PHPParser.ClassStatementContext,i)


        def typeParameterListInBrackets(self):
            return self.getTypedRuleContext(PHPParser.TypeParameterListInBracketsContext,0)


        def Extends(self):
            return self.getToken(PHPParser.Extends, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PHPParser.QualifiedStaticTypeRefContext,0)


        def Implements(self):
            return self.getToken(PHPParser.Implements, 0)

        def interfaceList(self):
            return self.getTypedRuleContext(PHPParser.InterfaceListContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDeclaration" ):
                return visitor.visitClassDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classDeclaration(self):

        localctx = PHPParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.attributes()
            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PHPParser.Private:
                self.state = 379
                self.match(PHPParser.Private)


            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PHPParser.Abstract or _la==PHPParser.Final:
                self.state = 382
                self.modifier()


            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PHPParser.Partial:
                self.state = 385
                self.match(PHPParser.Partial)


            self.state = 410
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.Class, PHPParser.Trait]:
                self.state = 388
                self.classEntryType()
                self.state = 389
                self.identifier()
                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.Lgeneric:
                    self.state = 390
                    self.typeParameterListInBrackets()


                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.Extends:
                    self.state = 393
                    self.match(PHPParser.Extends)
                    self.state = 394
                    self.qualifiedStaticTypeRef()


                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.Implements:
                    self.state = 397
                    self.match(PHPParser.Implements)
                    self.state = 398
                    self.interfaceList()


                pass
            elif token in [PHPParser.Interface]:
                self.state = 401
                self.match(PHPParser.Interface)
                self.state = 402
                self.identifier()
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.Lgeneric:
                    self.state = 403
                    self.typeParameterListInBrackets()


                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.Extends:
                    self.state = 406
                    self.match(PHPParser.Extends)
                    self.state = 407
                    self.interfaceList()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 412
            self.match(PHPParser.OpenCurlyBracket)
            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PHPParser.Abstract or _la==PHPParser.Const or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Private - 72)) | (1 << (PHPParser.Protected - 72)) | (1 << (PHPParser.Public - 72)) | (1 << (PHPParser.Static - 72)) | (1 << (PHPParser.Use - 72)) | (1 << (PHPParser.Var - 72)))) != 0) or _la==PHPParser.OpenSquareBracket:
                self.state = 413
                self.classStatement()
                self.state = 418
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 419
            self.match(PHPParser.CloseCurlyBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassEntryTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(PHPParser.Class, 0)

        def Trait(self):
            return self.getToken(PHPParser.Trait, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_classEntryType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassEntryType" ):
                listener.enterClassEntryType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassEntryType" ):
                listener.exitClassEntryType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassEntryType" ):
                return visitor.visitClassEntryType(self)
            else:
                return visitor.visitChildren(self)




    def classEntryType(self):

        localctx = PHPParser.ClassEntryTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_classEntryType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            _la = self._input.LA(1)
            if not(_la==PHPParser.Class or _la==PHPParser.Trait):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedStaticTypeRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.QualifiedStaticTypeRefContext)
            else:
                return self.getTypedRuleContext(PHPParser.QualifiedStaticTypeRefContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_interfaceList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceList" ):
                listener.enterInterfaceList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceList" ):
                listener.exitInterfaceList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceList" ):
                return visitor.visitInterfaceList(self)
            else:
                return visitor.visitChildren(self)




    def interfaceList(self):

        localctx = PHPParser.InterfaceListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_interfaceList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self.qualifiedStaticTypeRef()
            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PHPParser.Comma:
                self.state = 424
                self.match(PHPParser.Comma)
                self.state = 425
                self.qualifiedStaticTypeRef()
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterListInBracketsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameterList(self):
            return self.getTypedRuleContext(PHPParser.TypeParameterListContext,0)


        def typeParameterWithDefaultsList(self):
            return self.getTypedRuleContext(PHPParser.TypeParameterWithDefaultsListContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_typeParameterListInBrackets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterListInBrackets" ):
                listener.enterTypeParameterListInBrackets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterListInBrackets" ):
                listener.exitTypeParameterListInBrackets(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameterListInBrackets" ):
                return visitor.visitTypeParameterListInBrackets(self)
            else:
                return visitor.visitChildren(self)




    def typeParameterListInBrackets(self):

        localctx = PHPParser.TypeParameterListInBracketsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeParameterListInBrackets)
        try:
            self.state = 445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 431
                self.match(PHPParser.Lgeneric)
                self.state = 432
                self.typeParameterList()
                self.state = 433
                self.match(PHPParser.Rgeneric)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 435
                self.match(PHPParser.Lgeneric)
                self.state = 436
                self.typeParameterWithDefaultsList()
                self.state = 437
                self.match(PHPParser.Rgeneric)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 439
                self.match(PHPParser.Lgeneric)
                self.state = 440
                self.typeParameterList()
                self.state = 441
                self.match(PHPParser.Comma)
                self.state = 442
                self.typeParameterWithDefaultsList()
                self.state = 443
                self.match(PHPParser.Rgeneric)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameterDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.TypeParameterDeclContext)
            else:
                return self.getTypedRuleContext(PHPParser.TypeParameterDeclContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_typeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterList" ):
                listener.enterTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterList" ):
                listener.exitTypeParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameterList" ):
                return visitor.visitTypeParameterList(self)
            else:
                return visitor.visitChildren(self)




    def typeParameterList(self):

        localctx = PHPParser.TypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeParameterList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.typeParameterDecl()
            self.state = 452
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 448
                    self.match(PHPParser.Comma)
                    self.state = 449
                    self.typeParameterDecl() 
                self.state = 454
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterWithDefaultsListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameterWithDefaultDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.TypeParameterWithDefaultDeclContext)
            else:
                return self.getTypedRuleContext(PHPParser.TypeParameterWithDefaultDeclContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_typeParameterWithDefaultsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterWithDefaultsList" ):
                listener.enterTypeParameterWithDefaultsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterWithDefaultsList" ):
                listener.exitTypeParameterWithDefaultsList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameterWithDefaultsList" ):
                return visitor.visitTypeParameterWithDefaultsList(self)
            else:
                return visitor.visitChildren(self)




    def typeParameterWithDefaultsList(self):

        localctx = PHPParser.TypeParameterWithDefaultsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_typeParameterWithDefaultsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.typeParameterWithDefaultDecl()
            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PHPParser.Comma:
                self.state = 456
                self.match(PHPParser.Comma)
                self.state = 457
                self.typeParameterWithDefaultDecl()
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(PHPParser.AttributesContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PHPParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_typeParameterDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterDecl" ):
                listener.enterTypeParameterDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterDecl" ):
                listener.exitTypeParameterDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameterDecl" ):
                return visitor.visitTypeParameterDecl(self)
            else:
                return visitor.visitChildren(self)




    def typeParameterDecl(self):

        localctx = PHPParser.TypeParameterDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_typeParameterDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.attributes()
            self.state = 464
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterWithDefaultDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(PHPParser.AttributesContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PHPParser.IdentifierContext,0)


        def Eq(self):
            return self.getToken(PHPParser.Eq, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PHPParser.QualifiedStaticTypeRefContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(PHPParser.PrimitiveTypeContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_typeParameterWithDefaultDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterWithDefaultDecl" ):
                listener.enterTypeParameterWithDefaultDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterWithDefaultDecl" ):
                listener.exitTypeParameterWithDefaultDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameterWithDefaultDecl" ):
                return visitor.visitTypeParameterWithDefaultDecl(self)
            else:
                return visitor.visitChildren(self)




    def typeParameterWithDefaultDecl(self):

        localctx = PHPParser.TypeParameterWithDefaultDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_typeParameterWithDefaultDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.attributes()
            self.state = 467
            self.identifier()
            self.state = 468
            self.match(PHPParser.Eq)
            self.state = 471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 469
                self.qualifiedStaticTypeRef()
                pass

            elif la_ == 2:
                self.state = 470
                self.primitiveType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericDynamicArgsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.TypeRefContext)
            else:
                return self.getTypedRuleContext(PHPParser.TypeRefContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_genericDynamicArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericDynamicArgs" ):
                listener.enterGenericDynamicArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericDynamicArgs" ):
                listener.exitGenericDynamicArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericDynamicArgs" ):
                return visitor.visitGenericDynamicArgs(self)
            else:
                return visitor.visitChildren(self)




    def genericDynamicArgs(self):

        localctx = PHPParser.GenericDynamicArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_genericDynamicArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(PHPParser.Lgeneric)
            self.state = 474
            self.typeRef()
            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PHPParser.Comma:
                self.state = 475
                self.match(PHPParser.Comma)
                self.state = 476
                self.typeRef()
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 482
            self.match(PHPParser.Rgeneric)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributesGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.AttributesGroupContext)
            else:
                return self.getTypedRuleContext(PHPParser.AttributesGroupContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = PHPParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PHPParser.OpenSquareBracket:
                self.state = 484
                self.attributesGroup()
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributesGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.AttributeContext)
            else:
                return self.getTypedRuleContext(PHPParser.AttributeContext,i)


        def identifier(self):
            return self.getTypedRuleContext(PHPParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_attributesGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributesGroup" ):
                listener.enterAttributesGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributesGroup" ):
                listener.exitAttributesGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributesGroup" ):
                return visitor.visitAttributesGroup(self)
            else:
                return visitor.visitChildren(self)




    def attributesGroup(self):

        localctx = PHPParser.AttributesGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_attributesGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(PHPParser.OpenSquareBracket)
            self.state = 494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 491
                self.identifier()
                self.state = 492
                self.match(PHPParser.Colon)


            self.state = 496
            self.attribute()
            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PHPParser.Comma:
                self.state = 497
                self.match(PHPParser.Comma)
                self.state = 498
                self.attribute()
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 504
            self.match(PHPParser.CloseSquareBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PHPParser.QualifiedNamespaceNameContext,0)


        def attributeArgList(self):
            return self.getTypedRuleContext(PHPParser.AttributeArgListContext,0)


        def attributeNamedArgList(self):
            return self.getTypedRuleContext(PHPParser.AttributeNamedArgListContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = PHPParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_attribute)
        try:
            self.state = 524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 506
                self.qualifiedNamespaceName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 507
                self.qualifiedNamespaceName()
                self.state = 508
                self.match(PHPParser.OpenRoundBracket)
                self.state = 509
                self.attributeArgList()
                self.state = 510
                self.match(PHPParser.CloseRoundBracket)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 512
                self.qualifiedNamespaceName()
                self.state = 513
                self.match(PHPParser.OpenRoundBracket)
                self.state = 514
                self.attributeNamedArgList()
                self.state = 515
                self.match(PHPParser.CloseRoundBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 517
                self.qualifiedNamespaceName()
                self.state = 518
                self.match(PHPParser.OpenRoundBracket)
                self.state = 519
                self.attributeArgList()
                self.state = 520
                self.match(PHPParser.Comma)
                self.state = 521
                self.attributeNamedArgList()
                self.state = 522
                self.match(PHPParser.CloseRoundBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeArgListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PHPParser.ExpressionContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_attributeArgList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeArgList" ):
                listener.enterAttributeArgList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeArgList" ):
                listener.exitAttributeArgList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeArgList" ):
                return visitor.visitAttributeArgList(self)
            else:
                return visitor.visitChildren(self)




    def attributeArgList(self):

        localctx = PHPParser.AttributeArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_attributeArgList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.expression(0)
            self.state = 531
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 527
                    self.match(PHPParser.Comma)
                    self.state = 528
                    self.expression(0) 
                self.state = 533
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeNamedArgListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeNamedArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.AttributeNamedArgContext)
            else:
                return self.getTypedRuleContext(PHPParser.AttributeNamedArgContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_attributeNamedArgList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeNamedArgList" ):
                listener.enterAttributeNamedArgList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeNamedArgList" ):
                listener.exitAttributeNamedArgList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeNamedArgList" ):
                return visitor.visitAttributeNamedArgList(self)
            else:
                return visitor.visitChildren(self)




    def attributeNamedArgList(self):

        localctx = PHPParser.AttributeNamedArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_attributeNamedArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.attributeNamedArg()
            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PHPParser.Comma:
                self.state = 535
                self.match(PHPParser.Comma)
                self.state = 536
                self.attributeNamedArg()
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeNamedArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarName(self):
            return self.getToken(PHPParser.VarName, 0)

        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_attributeNamedArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeNamedArg" ):
                listener.enterAttributeNamedArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeNamedArg" ):
                listener.exitAttributeNamedArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeNamedArg" ):
                return visitor.visitAttributeNamedArg(self)
            else:
                return visitor.visitChildren(self)




    def attributeNamedArg(self):

        localctx = PHPParser.AttributeNamedArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_attributeNamedArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.match(PHPParser.VarName)
            self.state = 543
            self.match(PHPParser.DoubleArrow)
            self.state = 544
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InnerStatementListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.InnerStatementContext)
            else:
                return self.getTypedRuleContext(PHPParser.InnerStatementContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_innerStatementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerStatementList" ):
                listener.enterInnerStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerStatementList" ):
                listener.exitInnerStatementList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerStatementList" ):
                return visitor.visitInnerStatementList(self)
            else:
                return visitor.visitChildren(self)




    def innerStatementList(self):

        localctx = PHPParser.InnerStatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_innerStatementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 546
                    self.innerStatement() 
                self.state = 551
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InnerStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(PHPParser.StatementContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(PHPParser.FunctionDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(PHPParser.ClassDeclarationContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_innerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerStatement" ):
                listener.enterInnerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerStatement" ):
                listener.exitInnerStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerStatement" ):
                return visitor.visitInnerStatement(self)
            else:
                return visitor.visitChildren(self)




    def innerStatement(self):

        localctx = PHPParser.InnerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_innerStatement)
        try:
            self.state = 555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 552
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 553
                self.functionDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 554
                self.classDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonEmptyStatement(self):
            return self.getTypedRuleContext(PHPParser.NonEmptyStatementContext,0)


        def emptyStatement(self):
            return self.getTypedRuleContext(PHPParser.EmptyStatementContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = PHPParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_statement)
        try:
            self.state = 559
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.HtmlText, PHPParser.HtmlScriptOpen, PHPParser.HtmlStyleOpen, PHPParser.HtmlDtd, PHPParser.HtmlOpen, PHPParser.HtmlClose, PHPParser.HtmlSlashClose, PHPParser.HtmlSlash, PHPParser.HtmlEquals, PHPParser.HtmlStartQuoteString, PHPParser.HtmlStartDoubleQuoteString, PHPParser.HtmlHex, PHPParser.HtmlDecimal, PHPParser.HtmlName, PHPParser.HtmlEndQuoteString, PHPParser.HtmlQuoteString, PHPParser.HtmlEndDoubleQuoteString, PHPParser.HtmlDoubleQuoteString, PHPParser.ScriptText, PHPParser.ScriptClose, PHPParser.StyleBody, PHPParser.Abstract, PHPParser.Array, PHPParser.As, PHPParser.BinaryCast, PHPParser.BoolType, PHPParser.BooleanConstant, PHPParser.Break, PHPParser.Callable, PHPParser.Case, PHPParser.Catch, PHPParser.Class, PHPParser.Clone, PHPParser.Const, PHPParser.Continue, PHPParser.Declare, PHPParser.Default, PHPParser.Do, PHPParser.DoubleCast, PHPParser.DoubleType, PHPParser.Echo, PHPParser.Else, PHPParser.ElseIf, PHPParser.Empty, PHPParser.EndDeclare, PHPParser.EndFor, PHPParser.EndForeach, PHPParser.EndIf, PHPParser.EndSwitch, PHPParser.EndWhile, PHPParser.Eval, PHPParser.Exit, PHPParser.Extends, PHPParser.Final, PHPParser.Finally, PHPParser.FloatCast, PHPParser.For, PHPParser.Foreach, PHPParser.Function, PHPParser.Global, PHPParser.Goto, PHPParser.If, PHPParser.Implements, PHPParser.Import, PHPParser.Include, PHPParser.IncludeOnce, PHPParser.InstanceOf, PHPParser.InsteadOf, PHPParser.Int8Cast, PHPParser.Int16Cast, PHPParser.Int64Type, PHPParser.IntType, PHPParser.Interface, PHPParser.IsSet, PHPParser.List, PHPParser.LogicalAnd, PHPParser.LogicalOr, PHPParser.LogicalXor, PHPParser.Namespace, PHPParser.New, PHPParser.Null, PHPParser.ObjectType, PHPParser.Parent_, PHPParser.Partial, PHPParser.Print, PHPParser.Private, PHPParser.Protected, PHPParser.Public, PHPParser.Require, PHPParser.RequireOnce, PHPParser.Resource, PHPParser.Return, PHPParser.Static, PHPParser.StringType, PHPParser.Switch, PHPParser.Throw, PHPParser.Trait, PHPParser.Try, PHPParser.Typeof, PHPParser.UintCast, PHPParser.UnicodeCast, PHPParser.Unset, PHPParser.Use, PHPParser.Var, PHPParser.While, PHPParser.Yield, PHPParser.Get, PHPParser.Set, PHPParser.Call, PHPParser.CallStatic, PHPParser.Constructor, PHPParser.Destruct, PHPParser.Wakeup, PHPParser.Sleep, PHPParser.Autoload, PHPParser.IsSet__, PHPParser.Unset__, PHPParser.ToString__, PHPParser.Invoke, PHPParser.SetState, PHPParser.Clone__, PHPParser.DebugInfo, PHPParser.Namespace__, PHPParser.Class__, PHPParser.Traic__, PHPParser.Function__, PHPParser.Method__, PHPParser.Line__, PHPParser.File__, PHPParser.Dir__, PHPParser.Inc, PHPParser.Dec, PHPParser.NamespaceSeparator, PHPParser.Bang, PHPParser.Plus, PHPParser.Minus, PHPParser.Tilde, PHPParser.SuppressWarnings, PHPParser.Dollar, PHPParser.OpenRoundBracket, PHPParser.OpenSquareBracket, PHPParser.OpenCurlyBracket, PHPParser.VarName, PHPParser.Label, PHPParser.Octal, PHPParser.Decimal, PHPParser.Real, PHPParser.Hex, PHPParser.Binary, PHPParser.BackQuoteString, PHPParser.SingleQuoteString, PHPParser.DoubleQuote, PHPParser.StartNowDoc, PHPParser.StartHereDoc]:
                self.enterOuterAlt(localctx, 1)
                self.state = 557
                self.nonEmptyStatement()
                pass
            elif token in [PHPParser.SemiColon]:
                self.enterOuterAlt(localctx, 2)
                self.state = 558
                self.emptyStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EmptyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PHPParser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStatement" ):
                return visitor.visitEmptyStatement(self)
            else:
                return visitor.visitChildren(self)




    def emptyStatement(self):

        localctx = PHPParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_emptyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(PHPParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonEmptyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PHPParser.IdentifierContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(PHPParser.BlockStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(PHPParser.IfStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(PHPParser.WhileStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(PHPParser.DoWhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(PHPParser.ForStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(PHPParser.SwitchStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(PHPParser.BreakStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(PHPParser.ContinueStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(PHPParser.ReturnStatementContext,0)


        def yieldExpression(self):
            return self.getTypedRuleContext(PHPParser.YieldExpressionContext,0)


        def globalStatement(self):
            return self.getTypedRuleContext(PHPParser.GlobalStatementContext,0)


        def staticVariableStatement(self):
            return self.getTypedRuleContext(PHPParser.StaticVariableStatementContext,0)


        def echoStatement(self):
            return self.getTypedRuleContext(PHPParser.EchoStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(PHPParser.ExpressionStatementContext,0)


        def unsetStatement(self):
            return self.getTypedRuleContext(PHPParser.UnsetStatementContext,0)


        def foreachStatement(self):
            return self.getTypedRuleContext(PHPParser.ForeachStatementContext,0)


        def tryCatchFinally(self):
            return self.getTypedRuleContext(PHPParser.TryCatchFinallyContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(PHPParser.ThrowStatementContext,0)


        def gotoStatement(self):
            return self.getTypedRuleContext(PHPParser.GotoStatementContext,0)


        def declareStatement(self):
            return self.getTypedRuleContext(PHPParser.DeclareStatementContext,0)


        def inlineHtml(self):
            return self.getTypedRuleContext(PHPParser.InlineHtmlContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_nonEmptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonEmptyStatement" ):
                listener.enterNonEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonEmptyStatement" ):
                listener.exitNonEmptyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonEmptyStatement" ):
                return visitor.visitNonEmptyStatement(self)
            else:
                return visitor.visitChildren(self)




    def nonEmptyStatement(self):

        localctx = PHPParser.NonEmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_nonEmptyStatement)
        try:
            self.state = 589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 563
                self.identifier()
                self.state = 564
                self.match(PHPParser.Colon)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 566
                self.blockStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 567
                self.ifStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 568
                self.whileStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 569
                self.doWhileStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 570
                self.forStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 571
                self.switchStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 572
                self.breakStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 573
                self.continueStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 574
                self.returnStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 575
                self.yieldExpression()
                self.state = 576
                self.match(PHPParser.SemiColon)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 578
                self.globalStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 579
                self.staticVariableStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 580
                self.echoStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 581
                self.expressionStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 582
                self.unsetStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 583
                self.foreachStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 584
                self.tryCatchFinally()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 585
                self.throwStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 586
                self.gotoStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 587
                self.declareStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 588
                self.inlineHtml()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenCurlyBracket(self):
            return self.getToken(PHPParser.OpenCurlyBracket, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PHPParser.InnerStatementListContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = PHPParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_blockStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.match(PHPParser.OpenCurlyBracket)
            self.state = 592
            self.innerStatementList()
            self.state = 593
            self.match(PHPParser.CloseCurlyBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(PHPParser.If, 0)

        def parenthesis(self):
            return self.getTypedRuleContext(PHPParser.ParenthesisContext,0)


        def statement(self):
            return self.getTypedRuleContext(PHPParser.StatementContext,0)


        def elseIfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.ElseIfStatementContext)
            else:
                return self.getTypedRuleContext(PHPParser.ElseIfStatementContext,i)


        def elseStatement(self):
            return self.getTypedRuleContext(PHPParser.ElseStatementContext,0)


        def innerStatementList(self):
            return self.getTypedRuleContext(PHPParser.InnerStatementListContext,0)


        def EndIf(self):
            return self.getToken(PHPParser.EndIf, 0)

        def elseIfColonStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.ElseIfColonStatementContext)
            else:
                return self.getTypedRuleContext(PHPParser.ElseIfColonStatementContext,i)


        def elseColonStatement(self):
            return self.getTypedRuleContext(PHPParser.ElseColonStatementContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = PHPParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.state = 623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 595
                self.match(PHPParser.If)
                self.state = 596
                self.parenthesis()
                self.state = 597
                self.statement()
                self.state = 601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 598
                        self.elseIfStatement() 
                    self.state = 603
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

                self.state = 605
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 604
                    self.elseStatement()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 607
                self.match(PHPParser.If)
                self.state = 608
                self.parenthesis()
                self.state = 609
                self.match(PHPParser.Colon)
                self.state = 610
                self.innerStatementList()
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PHPParser.ElseIf:
                    self.state = 611
                    self.elseIfColonStatement()
                    self.state = 616
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.Else:
                    self.state = 617
                    self.elseColonStatement()


                self.state = 620
                self.match(PHPParser.EndIf)
                self.state = 621
                self.match(PHPParser.SemiColon)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElseIfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ElseIf(self):
            return self.getToken(PHPParser.ElseIf, 0)

        def parenthesis(self):
            return self.getTypedRuleContext(PHPParser.ParenthesisContext,0)


        def statement(self):
            return self.getTypedRuleContext(PHPParser.StatementContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_elseIfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfStatement" ):
                listener.enterElseIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfStatement" ):
                listener.exitElseIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseIfStatement" ):
                return visitor.visitElseIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def elseIfStatement(self):

        localctx = PHPParser.ElseIfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_elseIfStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.match(PHPParser.ElseIf)
            self.state = 626
            self.parenthesis()
            self.state = 627
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElseIfColonStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ElseIf(self):
            return self.getToken(PHPParser.ElseIf, 0)

        def parenthesis(self):
            return self.getTypedRuleContext(PHPParser.ParenthesisContext,0)


        def innerStatementList(self):
            return self.getTypedRuleContext(PHPParser.InnerStatementListContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_elseIfColonStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfColonStatement" ):
                listener.enterElseIfColonStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfColonStatement" ):
                listener.exitElseIfColonStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseIfColonStatement" ):
                return visitor.visitElseIfColonStatement(self)
            else:
                return visitor.visitChildren(self)




    def elseIfColonStatement(self):

        localctx = PHPParser.ElseIfColonStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_elseIfColonStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(PHPParser.ElseIf)
            self.state = 630
            self.parenthesis()
            self.state = 631
            self.match(PHPParser.Colon)
            self.state = 632
            self.innerStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(PHPParser.Else, 0)

        def statement(self):
            return self.getTypedRuleContext(PHPParser.StatementContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_elseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseStatement" ):
                listener.enterElseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseStatement" ):
                listener.exitElseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseStatement" ):
                return visitor.visitElseStatement(self)
            else:
                return visitor.visitChildren(self)




    def elseStatement(self):

        localctx = PHPParser.ElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_elseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.match(PHPParser.Else)
            self.state = 635
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElseColonStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(PHPParser.Else, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PHPParser.InnerStatementListContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_elseColonStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseColonStatement" ):
                listener.enterElseColonStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseColonStatement" ):
                listener.exitElseColonStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseColonStatement" ):
                return visitor.visitElseColonStatement(self)
            else:
                return visitor.visitChildren(self)




    def elseColonStatement(self):

        localctx = PHPParser.ElseColonStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_elseColonStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.match(PHPParser.Else)
            self.state = 638
            self.match(PHPParser.Colon)
            self.state = 639
            self.innerStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(PHPParser.While, 0)

        def parenthesis(self):
            return self.getTypedRuleContext(PHPParser.ParenthesisContext,0)


        def statement(self):
            return self.getTypedRuleContext(PHPParser.StatementContext,0)


        def innerStatementList(self):
            return self.getTypedRuleContext(PHPParser.InnerStatementListContext,0)


        def EndWhile(self):
            return self.getToken(PHPParser.EndWhile, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = PHPParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(PHPParser.While)
            self.state = 642
            self.parenthesis()
            self.state = 649
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.HtmlText, PHPParser.HtmlScriptOpen, PHPParser.HtmlStyleOpen, PHPParser.HtmlDtd, PHPParser.HtmlOpen, PHPParser.HtmlClose, PHPParser.HtmlSlashClose, PHPParser.HtmlSlash, PHPParser.HtmlEquals, PHPParser.HtmlStartQuoteString, PHPParser.HtmlStartDoubleQuoteString, PHPParser.HtmlHex, PHPParser.HtmlDecimal, PHPParser.HtmlName, PHPParser.HtmlEndQuoteString, PHPParser.HtmlQuoteString, PHPParser.HtmlEndDoubleQuoteString, PHPParser.HtmlDoubleQuoteString, PHPParser.ScriptText, PHPParser.ScriptClose, PHPParser.StyleBody, PHPParser.Abstract, PHPParser.Array, PHPParser.As, PHPParser.BinaryCast, PHPParser.BoolType, PHPParser.BooleanConstant, PHPParser.Break, PHPParser.Callable, PHPParser.Case, PHPParser.Catch, PHPParser.Class, PHPParser.Clone, PHPParser.Const, PHPParser.Continue, PHPParser.Declare, PHPParser.Default, PHPParser.Do, PHPParser.DoubleCast, PHPParser.DoubleType, PHPParser.Echo, PHPParser.Else, PHPParser.ElseIf, PHPParser.Empty, PHPParser.EndDeclare, PHPParser.EndFor, PHPParser.EndForeach, PHPParser.EndIf, PHPParser.EndSwitch, PHPParser.EndWhile, PHPParser.Eval, PHPParser.Exit, PHPParser.Extends, PHPParser.Final, PHPParser.Finally, PHPParser.FloatCast, PHPParser.For, PHPParser.Foreach, PHPParser.Function, PHPParser.Global, PHPParser.Goto, PHPParser.If, PHPParser.Implements, PHPParser.Import, PHPParser.Include, PHPParser.IncludeOnce, PHPParser.InstanceOf, PHPParser.InsteadOf, PHPParser.Int8Cast, PHPParser.Int16Cast, PHPParser.Int64Type, PHPParser.IntType, PHPParser.Interface, PHPParser.IsSet, PHPParser.List, PHPParser.LogicalAnd, PHPParser.LogicalOr, PHPParser.LogicalXor, PHPParser.Namespace, PHPParser.New, PHPParser.Null, PHPParser.ObjectType, PHPParser.Parent_, PHPParser.Partial, PHPParser.Print, PHPParser.Private, PHPParser.Protected, PHPParser.Public, PHPParser.Require, PHPParser.RequireOnce, PHPParser.Resource, PHPParser.Return, PHPParser.Static, PHPParser.StringType, PHPParser.Switch, PHPParser.Throw, PHPParser.Trait, PHPParser.Try, PHPParser.Typeof, PHPParser.UintCast, PHPParser.UnicodeCast, PHPParser.Unset, PHPParser.Use, PHPParser.Var, PHPParser.While, PHPParser.Yield, PHPParser.Get, PHPParser.Set, PHPParser.Call, PHPParser.CallStatic, PHPParser.Constructor, PHPParser.Destruct, PHPParser.Wakeup, PHPParser.Sleep, PHPParser.Autoload, PHPParser.IsSet__, PHPParser.Unset__, PHPParser.ToString__, PHPParser.Invoke, PHPParser.SetState, PHPParser.Clone__, PHPParser.DebugInfo, PHPParser.Namespace__, PHPParser.Class__, PHPParser.Traic__, PHPParser.Function__, PHPParser.Method__, PHPParser.Line__, PHPParser.File__, PHPParser.Dir__, PHPParser.Inc, PHPParser.Dec, PHPParser.NamespaceSeparator, PHPParser.Bang, PHPParser.Plus, PHPParser.Minus, PHPParser.Tilde, PHPParser.SuppressWarnings, PHPParser.Dollar, PHPParser.OpenRoundBracket, PHPParser.OpenSquareBracket, PHPParser.OpenCurlyBracket, PHPParser.SemiColon, PHPParser.VarName, PHPParser.Label, PHPParser.Octal, PHPParser.Decimal, PHPParser.Real, PHPParser.Hex, PHPParser.Binary, PHPParser.BackQuoteString, PHPParser.SingleQuoteString, PHPParser.DoubleQuote, PHPParser.StartNowDoc, PHPParser.StartHereDoc]:
                self.state = 643
                self.statement()
                pass
            elif token in [PHPParser.Colon]:
                self.state = 644
                self.match(PHPParser.Colon)
                self.state = 645
                self.innerStatementList()
                self.state = 646
                self.match(PHPParser.EndWhile)
                self.state = 647
                self.match(PHPParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoWhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Do(self):
            return self.getToken(PHPParser.Do, 0)

        def statement(self):
            return self.getTypedRuleContext(PHPParser.StatementContext,0)


        def While(self):
            return self.getToken(PHPParser.While, 0)

        def parenthesis(self):
            return self.getTypedRuleContext(PHPParser.ParenthesisContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoWhileStatement" ):
                return visitor.visitDoWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def doWhileStatement(self):

        localctx = PHPParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(PHPParser.Do)
            self.state = 652
            self.statement()
            self.state = 653
            self.match(PHPParser.While)
            self.state = 654
            self.parenthesis()
            self.state = 655
            self.match(PHPParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(PHPParser.For, 0)

        def statement(self):
            return self.getTypedRuleContext(PHPParser.StatementContext,0)


        def innerStatementList(self):
            return self.getTypedRuleContext(PHPParser.InnerStatementListContext,0)


        def EndFor(self):
            return self.getToken(PHPParser.EndFor, 0)

        def forInit(self):
            return self.getTypedRuleContext(PHPParser.ForInitContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(PHPParser.ExpressionListContext,0)


        def forUpdate(self):
            return self.getTypedRuleContext(PHPParser.ForUpdateContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = PHPParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.match(PHPParser.For)
            self.state = 658
            self.match(PHPParser.OpenRoundBracket)
            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)) | (1 << (PHPParser.Inc - 104)) | (1 << (PHPParser.Dec - 104)))) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)) | (1 << (PHPParser.Octal - 179)) | (1 << (PHPParser.Decimal - 179)) | (1 << (PHPParser.Real - 179)) | (1 << (PHPParser.Hex - 179)) | (1 << (PHPParser.Binary - 179)) | (1 << (PHPParser.BackQuoteString - 179)) | (1 << (PHPParser.SingleQuoteString - 179)) | (1 << (PHPParser.DoubleQuote - 179)) | (1 << (PHPParser.StartNowDoc - 179)) | (1 << (PHPParser.StartHereDoc - 179)))) != 0):
                self.state = 659
                self.forInit()


            self.state = 662
            self.match(PHPParser.SemiColon)
            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)) | (1 << (PHPParser.Inc - 104)) | (1 << (PHPParser.Dec - 104)))) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)) | (1 << (PHPParser.Octal - 179)) | (1 << (PHPParser.Decimal - 179)) | (1 << (PHPParser.Real - 179)) | (1 << (PHPParser.Hex - 179)) | (1 << (PHPParser.Binary - 179)) | (1 << (PHPParser.BackQuoteString - 179)) | (1 << (PHPParser.SingleQuoteString - 179)) | (1 << (PHPParser.DoubleQuote - 179)) | (1 << (PHPParser.StartNowDoc - 179)) | (1 << (PHPParser.StartHereDoc - 179)))) != 0):
                self.state = 663
                self.expressionList()


            self.state = 666
            self.match(PHPParser.SemiColon)
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)) | (1 << (PHPParser.Inc - 104)) | (1 << (PHPParser.Dec - 104)))) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)) | (1 << (PHPParser.Octal - 179)) | (1 << (PHPParser.Decimal - 179)) | (1 << (PHPParser.Real - 179)) | (1 << (PHPParser.Hex - 179)) | (1 << (PHPParser.Binary - 179)) | (1 << (PHPParser.BackQuoteString - 179)) | (1 << (PHPParser.SingleQuoteString - 179)) | (1 << (PHPParser.DoubleQuote - 179)) | (1 << (PHPParser.StartNowDoc - 179)) | (1 << (PHPParser.StartHereDoc - 179)))) != 0):
                self.state = 667
                self.forUpdate()


            self.state = 670
            self.match(PHPParser.CloseRoundBracket)
            self.state = 677
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.HtmlText, PHPParser.HtmlScriptOpen, PHPParser.HtmlStyleOpen, PHPParser.HtmlDtd, PHPParser.HtmlOpen, PHPParser.HtmlClose, PHPParser.HtmlSlashClose, PHPParser.HtmlSlash, PHPParser.HtmlEquals, PHPParser.HtmlStartQuoteString, PHPParser.HtmlStartDoubleQuoteString, PHPParser.HtmlHex, PHPParser.HtmlDecimal, PHPParser.HtmlName, PHPParser.HtmlEndQuoteString, PHPParser.HtmlQuoteString, PHPParser.HtmlEndDoubleQuoteString, PHPParser.HtmlDoubleQuoteString, PHPParser.ScriptText, PHPParser.ScriptClose, PHPParser.StyleBody, PHPParser.Abstract, PHPParser.Array, PHPParser.As, PHPParser.BinaryCast, PHPParser.BoolType, PHPParser.BooleanConstant, PHPParser.Break, PHPParser.Callable, PHPParser.Case, PHPParser.Catch, PHPParser.Class, PHPParser.Clone, PHPParser.Const, PHPParser.Continue, PHPParser.Declare, PHPParser.Default, PHPParser.Do, PHPParser.DoubleCast, PHPParser.DoubleType, PHPParser.Echo, PHPParser.Else, PHPParser.ElseIf, PHPParser.Empty, PHPParser.EndDeclare, PHPParser.EndFor, PHPParser.EndForeach, PHPParser.EndIf, PHPParser.EndSwitch, PHPParser.EndWhile, PHPParser.Eval, PHPParser.Exit, PHPParser.Extends, PHPParser.Final, PHPParser.Finally, PHPParser.FloatCast, PHPParser.For, PHPParser.Foreach, PHPParser.Function, PHPParser.Global, PHPParser.Goto, PHPParser.If, PHPParser.Implements, PHPParser.Import, PHPParser.Include, PHPParser.IncludeOnce, PHPParser.InstanceOf, PHPParser.InsteadOf, PHPParser.Int8Cast, PHPParser.Int16Cast, PHPParser.Int64Type, PHPParser.IntType, PHPParser.Interface, PHPParser.IsSet, PHPParser.List, PHPParser.LogicalAnd, PHPParser.LogicalOr, PHPParser.LogicalXor, PHPParser.Namespace, PHPParser.New, PHPParser.Null, PHPParser.ObjectType, PHPParser.Parent_, PHPParser.Partial, PHPParser.Print, PHPParser.Private, PHPParser.Protected, PHPParser.Public, PHPParser.Require, PHPParser.RequireOnce, PHPParser.Resource, PHPParser.Return, PHPParser.Static, PHPParser.StringType, PHPParser.Switch, PHPParser.Throw, PHPParser.Trait, PHPParser.Try, PHPParser.Typeof, PHPParser.UintCast, PHPParser.UnicodeCast, PHPParser.Unset, PHPParser.Use, PHPParser.Var, PHPParser.While, PHPParser.Yield, PHPParser.Get, PHPParser.Set, PHPParser.Call, PHPParser.CallStatic, PHPParser.Constructor, PHPParser.Destruct, PHPParser.Wakeup, PHPParser.Sleep, PHPParser.Autoload, PHPParser.IsSet__, PHPParser.Unset__, PHPParser.ToString__, PHPParser.Invoke, PHPParser.SetState, PHPParser.Clone__, PHPParser.DebugInfo, PHPParser.Namespace__, PHPParser.Class__, PHPParser.Traic__, PHPParser.Function__, PHPParser.Method__, PHPParser.Line__, PHPParser.File__, PHPParser.Dir__, PHPParser.Inc, PHPParser.Dec, PHPParser.NamespaceSeparator, PHPParser.Bang, PHPParser.Plus, PHPParser.Minus, PHPParser.Tilde, PHPParser.SuppressWarnings, PHPParser.Dollar, PHPParser.OpenRoundBracket, PHPParser.OpenSquareBracket, PHPParser.OpenCurlyBracket, PHPParser.SemiColon, PHPParser.VarName, PHPParser.Label, PHPParser.Octal, PHPParser.Decimal, PHPParser.Real, PHPParser.Hex, PHPParser.Binary, PHPParser.BackQuoteString, PHPParser.SingleQuoteString, PHPParser.DoubleQuote, PHPParser.StartNowDoc, PHPParser.StartHereDoc]:
                self.state = 671
                self.statement()
                pass
            elif token in [PHPParser.Colon]:
                self.state = 672
                self.match(PHPParser.Colon)
                self.state = 673
                self.innerStatementList()
                self.state = 674
                self.match(PHPParser.EndFor)
                self.state = 675
                self.match(PHPParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForInitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(PHPParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInit" ):
                return visitor.visitForInit(self)
            else:
                return visitor.visitChildren(self)




    def forInit(self):

        localctx = PHPParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_forInit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForUpdateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(PHPParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_forUpdate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForUpdate" ):
                listener.enterForUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForUpdate" ):
                listener.exitForUpdate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForUpdate" ):
                return visitor.visitForUpdate(self)
            else:
                return visitor.visitChildren(self)




    def forUpdate(self):

        localctx = PHPParser.ForUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_forUpdate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Switch(self):
            return self.getToken(PHPParser.Switch, 0)

        def parenthesis(self):
            return self.getTypedRuleContext(PHPParser.ParenthesisContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PHPParser.OpenCurlyBracket, 0)

        def EndSwitch(self):
            return self.getToken(PHPParser.EndSwitch, 0)

        def switchBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.SwitchBlockContext)
            else:
                return self.getTypedRuleContext(PHPParser.SwitchBlockContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchStatement" ):
                return visitor.visitSwitchStatement(self)
            else:
                return visitor.visitChildren(self)




    def switchStatement(self):

        localctx = PHPParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_switchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(PHPParser.Switch)
            self.state = 684
            self.parenthesis()
            self.state = 708
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.OpenCurlyBracket]:
                self.state = 685
                self.match(PHPParser.OpenCurlyBracket)
                self.state = 687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.SemiColon:
                    self.state = 686
                    self.match(PHPParser.SemiColon)


                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PHPParser.Case or _la==PHPParser.Default:
                    self.state = 689
                    self.switchBlock()
                    self.state = 694
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 695
                self.match(PHPParser.CloseCurlyBracket)
                pass
            elif token in [PHPParser.Colon]:
                self.state = 696
                self.match(PHPParser.Colon)
                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.SemiColon:
                    self.state = 697
                    self.match(PHPParser.SemiColon)


                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PHPParser.Case or _la==PHPParser.Default:
                    self.state = 700
                    self.switchBlock()
                    self.state = 705
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 706
                self.match(PHPParser.EndSwitch)
                self.state = 707
                self.match(PHPParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerStatementList(self):
            return self.getTypedRuleContext(PHPParser.InnerStatementListContext,0)


        def Case(self, i:int=None):
            if i is None:
                return self.getTokens(PHPParser.Case)
            else:
                return self.getToken(PHPParser.Case, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PHPParser.ExpressionContext,i)


        def Default(self, i:int=None):
            if i is None:
                return self.getTokens(PHPParser.Default)
            else:
                return self.getToken(PHPParser.Default, i)

        def getRuleIndex(self):
            return PHPParser.RULE_switchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlock" ):
                listener.enterSwitchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlock" ):
                listener.exitSwitchBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchBlock" ):
                return visitor.visitSwitchBlock(self)
            else:
                return visitor.visitChildren(self)




    def switchBlock(self):

        localctx = PHPParser.SwitchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_switchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 713
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PHPParser.Case]:
                        self.state = 710
                        self.match(PHPParser.Case)
                        self.state = 711
                        self.expression(0)
                        pass
                    elif token in [PHPParser.Default]:
                        self.state = 712
                        self.match(PHPParser.Default)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 715
                    _la = self._input.LA(1)
                    if not(_la==PHPParser.Colon or _la==PHPParser.SemiColon):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 718 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

            self.state = 720
            self.innerStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BreakStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(PHPParser.Break, 0)

        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)




    def breakStatement(self):

        localctx = PHPParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_breakStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(PHPParser.Break)
            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)) | (1 << (PHPParser.Inc - 104)) | (1 << (PHPParser.Dec - 104)))) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)) | (1 << (PHPParser.Octal - 179)) | (1 << (PHPParser.Decimal - 179)) | (1 << (PHPParser.Real - 179)) | (1 << (PHPParser.Hex - 179)) | (1 << (PHPParser.Binary - 179)) | (1 << (PHPParser.BackQuoteString - 179)) | (1 << (PHPParser.SingleQuoteString - 179)) | (1 << (PHPParser.DoubleQuote - 179)) | (1 << (PHPParser.StartNowDoc - 179)) | (1 << (PHPParser.StartHereDoc - 179)))) != 0):
                self.state = 723
                self.expression(0)


            self.state = 726
            self.match(PHPParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContinueStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Continue(self):
            return self.getToken(PHPParser.Continue, 0)

        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = PHPParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_continueStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(PHPParser.Continue)
            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)) | (1 << (PHPParser.Inc - 104)) | (1 << (PHPParser.Dec - 104)))) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)) | (1 << (PHPParser.Octal - 179)) | (1 << (PHPParser.Decimal - 179)) | (1 << (PHPParser.Real - 179)) | (1 << (PHPParser.Hex - 179)) | (1 << (PHPParser.Binary - 179)) | (1 << (PHPParser.BackQuoteString - 179)) | (1 << (PHPParser.SingleQuoteString - 179)) | (1 << (PHPParser.DoubleQuote - 179)) | (1 << (PHPParser.StartNowDoc - 179)) | (1 << (PHPParser.StartHereDoc - 179)))) != 0):
                self.state = 729
                self.expression(0)


            self.state = 732
            self.match(PHPParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Return(self):
            return self.getToken(PHPParser.Return, 0)

        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = PHPParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(PHPParser.Return)
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)) | (1 << (PHPParser.Inc - 104)) | (1 << (PHPParser.Dec - 104)))) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)) | (1 << (PHPParser.Octal - 179)) | (1 << (PHPParser.Decimal - 179)) | (1 << (PHPParser.Real - 179)) | (1 << (PHPParser.Hex - 179)) | (1 << (PHPParser.Binary - 179)) | (1 << (PHPParser.BackQuoteString - 179)) | (1 << (PHPParser.SingleQuoteString - 179)) | (1 << (PHPParser.DoubleQuote - 179)) | (1 << (PHPParser.StartNowDoc - 179)) | (1 << (PHPParser.StartHereDoc - 179)))) != 0):
                self.state = 735
                self.expression(0)


            self.state = 738
            self.match(PHPParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = PHPParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.expression(0)
            self.state = 741
            self.match(PHPParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnsetStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Unset(self):
            return self.getToken(PHPParser.Unset, 0)

        def chainList(self):
            return self.getTypedRuleContext(PHPParser.ChainListContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_unsetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsetStatement" ):
                listener.enterUnsetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsetStatement" ):
                listener.exitUnsetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsetStatement" ):
                return visitor.visitUnsetStatement(self)
            else:
                return visitor.visitChildren(self)




    def unsetStatement(self):

        localctx = PHPParser.UnsetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_unsetStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(PHPParser.Unset)
            self.state = 744
            self.match(PHPParser.OpenRoundBracket)
            self.state = 745
            self.chainList()
            self.state = 746
            self.match(PHPParser.CloseRoundBracket)
            self.state = 747
            self.match(PHPParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForeachStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Foreach(self):
            return self.getToken(PHPParser.Foreach, 0)

        def chain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.ChainContext)
            else:
                return self.getTypedRuleContext(PHPParser.ChainContext,i)


        def As(self):
            return self.getToken(PHPParser.As, 0)

        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)


        def List(self):
            return self.getToken(PHPParser.List, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(PHPParser.AssignmentListContext,0)


        def statement(self):
            return self.getTypedRuleContext(PHPParser.StatementContext,0)


        def innerStatementList(self):
            return self.getTypedRuleContext(PHPParser.InnerStatementListContext,0)


        def EndForeach(self):
            return self.getToken(PHPParser.EndForeach, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_foreachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeachStatement" ):
                listener.enterForeachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeachStatement" ):
                listener.exitForeachStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeachStatement" ):
                return visitor.visitForeachStatement(self)
            else:
                return visitor.visitChildren(self)




    def foreachStatement(self):

        localctx = PHPParser.ForeachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_foreachStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.match(PHPParser.Foreach)
            self.state = 788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 750
                self.match(PHPParser.OpenRoundBracket)
                self.state = 751
                self.chain()
                self.state = 752
                self.match(PHPParser.As)
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.Ampersand:
                    self.state = 753
                    self.match(PHPParser.Ampersand)


                self.state = 756
                self.chain()
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.DoubleArrow:
                    self.state = 757
                    self.match(PHPParser.DoubleArrow)
                    self.state = 759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PHPParser.Ampersand:
                        self.state = 758
                        self.match(PHPParser.Ampersand)


                    self.state = 761
                    self.chain()


                self.state = 764
                self.match(PHPParser.CloseRoundBracket)
                pass

            elif la_ == 2:
                self.state = 766
                self.match(PHPParser.OpenRoundBracket)
                self.state = 767
                self.expression(0)
                self.state = 768
                self.match(PHPParser.As)
                self.state = 769
                self.chain()
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.DoubleArrow:
                    self.state = 770
                    self.match(PHPParser.DoubleArrow)
                    self.state = 772
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PHPParser.Ampersand:
                        self.state = 771
                        self.match(PHPParser.Ampersand)


                    self.state = 774
                    self.chain()


                self.state = 777
                self.match(PHPParser.CloseRoundBracket)
                pass

            elif la_ == 3:
                self.state = 779
                self.match(PHPParser.OpenRoundBracket)
                self.state = 780
                self.chain()
                self.state = 781
                self.match(PHPParser.As)
                self.state = 782
                self.match(PHPParser.List)
                self.state = 783
                self.match(PHPParser.OpenRoundBracket)
                self.state = 784
                self.assignmentList()
                self.state = 785
                self.match(PHPParser.CloseRoundBracket)
                self.state = 786
                self.match(PHPParser.CloseRoundBracket)
                pass


            self.state = 796
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.HtmlText, PHPParser.HtmlScriptOpen, PHPParser.HtmlStyleOpen, PHPParser.HtmlDtd, PHPParser.HtmlOpen, PHPParser.HtmlClose, PHPParser.HtmlSlashClose, PHPParser.HtmlSlash, PHPParser.HtmlEquals, PHPParser.HtmlStartQuoteString, PHPParser.HtmlStartDoubleQuoteString, PHPParser.HtmlHex, PHPParser.HtmlDecimal, PHPParser.HtmlName, PHPParser.HtmlEndQuoteString, PHPParser.HtmlQuoteString, PHPParser.HtmlEndDoubleQuoteString, PHPParser.HtmlDoubleQuoteString, PHPParser.ScriptText, PHPParser.ScriptClose, PHPParser.StyleBody, PHPParser.Abstract, PHPParser.Array, PHPParser.As, PHPParser.BinaryCast, PHPParser.BoolType, PHPParser.BooleanConstant, PHPParser.Break, PHPParser.Callable, PHPParser.Case, PHPParser.Catch, PHPParser.Class, PHPParser.Clone, PHPParser.Const, PHPParser.Continue, PHPParser.Declare, PHPParser.Default, PHPParser.Do, PHPParser.DoubleCast, PHPParser.DoubleType, PHPParser.Echo, PHPParser.Else, PHPParser.ElseIf, PHPParser.Empty, PHPParser.EndDeclare, PHPParser.EndFor, PHPParser.EndForeach, PHPParser.EndIf, PHPParser.EndSwitch, PHPParser.EndWhile, PHPParser.Eval, PHPParser.Exit, PHPParser.Extends, PHPParser.Final, PHPParser.Finally, PHPParser.FloatCast, PHPParser.For, PHPParser.Foreach, PHPParser.Function, PHPParser.Global, PHPParser.Goto, PHPParser.If, PHPParser.Implements, PHPParser.Import, PHPParser.Include, PHPParser.IncludeOnce, PHPParser.InstanceOf, PHPParser.InsteadOf, PHPParser.Int8Cast, PHPParser.Int16Cast, PHPParser.Int64Type, PHPParser.IntType, PHPParser.Interface, PHPParser.IsSet, PHPParser.List, PHPParser.LogicalAnd, PHPParser.LogicalOr, PHPParser.LogicalXor, PHPParser.Namespace, PHPParser.New, PHPParser.Null, PHPParser.ObjectType, PHPParser.Parent_, PHPParser.Partial, PHPParser.Print, PHPParser.Private, PHPParser.Protected, PHPParser.Public, PHPParser.Require, PHPParser.RequireOnce, PHPParser.Resource, PHPParser.Return, PHPParser.Static, PHPParser.StringType, PHPParser.Switch, PHPParser.Throw, PHPParser.Trait, PHPParser.Try, PHPParser.Typeof, PHPParser.UintCast, PHPParser.UnicodeCast, PHPParser.Unset, PHPParser.Use, PHPParser.Var, PHPParser.While, PHPParser.Yield, PHPParser.Get, PHPParser.Set, PHPParser.Call, PHPParser.CallStatic, PHPParser.Constructor, PHPParser.Destruct, PHPParser.Wakeup, PHPParser.Sleep, PHPParser.Autoload, PHPParser.IsSet__, PHPParser.Unset__, PHPParser.ToString__, PHPParser.Invoke, PHPParser.SetState, PHPParser.Clone__, PHPParser.DebugInfo, PHPParser.Namespace__, PHPParser.Class__, PHPParser.Traic__, PHPParser.Function__, PHPParser.Method__, PHPParser.Line__, PHPParser.File__, PHPParser.Dir__, PHPParser.Inc, PHPParser.Dec, PHPParser.NamespaceSeparator, PHPParser.Bang, PHPParser.Plus, PHPParser.Minus, PHPParser.Tilde, PHPParser.SuppressWarnings, PHPParser.Dollar, PHPParser.OpenRoundBracket, PHPParser.OpenSquareBracket, PHPParser.OpenCurlyBracket, PHPParser.SemiColon, PHPParser.VarName, PHPParser.Label, PHPParser.Octal, PHPParser.Decimal, PHPParser.Real, PHPParser.Hex, PHPParser.Binary, PHPParser.BackQuoteString, PHPParser.SingleQuoteString, PHPParser.DoubleQuote, PHPParser.StartNowDoc, PHPParser.StartHereDoc]:
                self.state = 790
                self.statement()
                pass
            elif token in [PHPParser.Colon]:
                self.state = 791
                self.match(PHPParser.Colon)
                self.state = 792
                self.innerStatementList()
                self.state = 793
                self.match(PHPParser.EndForeach)
                self.state = 794
                self.match(PHPParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryCatchFinallyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(PHPParser.Try, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PHPParser.BlockStatementContext,0)


        def finallyStatement(self):
            return self.getTypedRuleContext(PHPParser.FinallyStatementContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(PHPParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_tryCatchFinally

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryCatchFinally" ):
                listener.enterTryCatchFinally(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryCatchFinally" ):
                listener.exitTryCatchFinally(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryCatchFinally" ):
                return visitor.visitTryCatchFinally(self)
            else:
                return visitor.visitChildren(self)




    def tryCatchFinally(self):

        localctx = PHPParser.TryCatchFinallyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_tryCatchFinally)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(PHPParser.Try)
            self.state = 799
            self.blockStatement()
            self.state = 815
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 801 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 800
                        self.catchClause()

                    else:
                        raise NoViableAltException(self)
                    self.state = 803 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                self.state = 806
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 805
                    self.finallyStatement()


                pass

            elif la_ == 2:
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PHPParser.Catch:
                    self.state = 808
                    self.catchClause()
                    self.state = 813
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 814
                self.finallyStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(PHPParser.Catch, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PHPParser.QualifiedStaticTypeRefContext,0)


        def VarName(self):
            return self.getToken(PHPParser.VarName, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PHPParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchClause" ):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def catchClause(self):

        localctx = PHPParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_catchClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.match(PHPParser.Catch)
            self.state = 818
            self.match(PHPParser.OpenRoundBracket)
            self.state = 819
            self.qualifiedStaticTypeRef()
            self.state = 820
            self.match(PHPParser.VarName)
            self.state = 821
            self.match(PHPParser.CloseRoundBracket)
            self.state = 822
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FinallyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Finally(self):
            return self.getToken(PHPParser.Finally, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PHPParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_finallyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyStatement" ):
                listener.enterFinallyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyStatement" ):
                listener.exitFinallyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinallyStatement" ):
                return visitor.visitFinallyStatement(self)
            else:
                return visitor.visitChildren(self)




    def finallyStatement(self):

        localctx = PHPParser.FinallyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_finallyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(PHPParser.Finally)
            self.state = 825
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThrowStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(PHPParser.Throw, 0)

        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowStatement" ):
                return visitor.visitThrowStatement(self)
            else:
                return visitor.visitChildren(self)




    def throwStatement(self):

        localctx = PHPParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.match(PHPParser.Throw)
            self.state = 828
            self.expression(0)
            self.state = 829
            self.match(PHPParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GotoStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Goto(self):
            return self.getToken(PHPParser.Goto, 0)

        def identifier(self):
            return self.getTypedRuleContext(PHPParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_gotoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGotoStatement" ):
                listener.enterGotoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGotoStatement" ):
                listener.exitGotoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGotoStatement" ):
                return visitor.visitGotoStatement(self)
            else:
                return visitor.visitChildren(self)




    def gotoStatement(self):

        localctx = PHPParser.GotoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_gotoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(PHPParser.Goto)
            self.state = 832
            self.identifier()
            self.state = 833
            self.match(PHPParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclareStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Declare(self):
            return self.getToken(PHPParser.Declare, 0)

        def declareList(self):
            return self.getTypedRuleContext(PHPParser.DeclareListContext,0)


        def statement(self):
            return self.getTypedRuleContext(PHPParser.StatementContext,0)


        def innerStatementList(self):
            return self.getTypedRuleContext(PHPParser.InnerStatementListContext,0)


        def EndDeclare(self):
            return self.getToken(PHPParser.EndDeclare, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_declareStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareStatement" ):
                listener.enterDeclareStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareStatement" ):
                listener.exitDeclareStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclareStatement" ):
                return visitor.visitDeclareStatement(self)
            else:
                return visitor.visitChildren(self)




    def declareStatement(self):

        localctx = PHPParser.DeclareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_declareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(PHPParser.Declare)
            self.state = 836
            self.match(PHPParser.OpenRoundBracket)
            self.state = 837
            self.declareList()
            self.state = 838
            self.match(PHPParser.CloseRoundBracket)
            self.state = 845
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.HtmlText, PHPParser.HtmlScriptOpen, PHPParser.HtmlStyleOpen, PHPParser.HtmlDtd, PHPParser.HtmlOpen, PHPParser.HtmlClose, PHPParser.HtmlSlashClose, PHPParser.HtmlSlash, PHPParser.HtmlEquals, PHPParser.HtmlStartQuoteString, PHPParser.HtmlStartDoubleQuoteString, PHPParser.HtmlHex, PHPParser.HtmlDecimal, PHPParser.HtmlName, PHPParser.HtmlEndQuoteString, PHPParser.HtmlQuoteString, PHPParser.HtmlEndDoubleQuoteString, PHPParser.HtmlDoubleQuoteString, PHPParser.ScriptText, PHPParser.ScriptClose, PHPParser.StyleBody, PHPParser.Abstract, PHPParser.Array, PHPParser.As, PHPParser.BinaryCast, PHPParser.BoolType, PHPParser.BooleanConstant, PHPParser.Break, PHPParser.Callable, PHPParser.Case, PHPParser.Catch, PHPParser.Class, PHPParser.Clone, PHPParser.Const, PHPParser.Continue, PHPParser.Declare, PHPParser.Default, PHPParser.Do, PHPParser.DoubleCast, PHPParser.DoubleType, PHPParser.Echo, PHPParser.Else, PHPParser.ElseIf, PHPParser.Empty, PHPParser.EndDeclare, PHPParser.EndFor, PHPParser.EndForeach, PHPParser.EndIf, PHPParser.EndSwitch, PHPParser.EndWhile, PHPParser.Eval, PHPParser.Exit, PHPParser.Extends, PHPParser.Final, PHPParser.Finally, PHPParser.FloatCast, PHPParser.For, PHPParser.Foreach, PHPParser.Function, PHPParser.Global, PHPParser.Goto, PHPParser.If, PHPParser.Implements, PHPParser.Import, PHPParser.Include, PHPParser.IncludeOnce, PHPParser.InstanceOf, PHPParser.InsteadOf, PHPParser.Int8Cast, PHPParser.Int16Cast, PHPParser.Int64Type, PHPParser.IntType, PHPParser.Interface, PHPParser.IsSet, PHPParser.List, PHPParser.LogicalAnd, PHPParser.LogicalOr, PHPParser.LogicalXor, PHPParser.Namespace, PHPParser.New, PHPParser.Null, PHPParser.ObjectType, PHPParser.Parent_, PHPParser.Partial, PHPParser.Print, PHPParser.Private, PHPParser.Protected, PHPParser.Public, PHPParser.Require, PHPParser.RequireOnce, PHPParser.Resource, PHPParser.Return, PHPParser.Static, PHPParser.StringType, PHPParser.Switch, PHPParser.Throw, PHPParser.Trait, PHPParser.Try, PHPParser.Typeof, PHPParser.UintCast, PHPParser.UnicodeCast, PHPParser.Unset, PHPParser.Use, PHPParser.Var, PHPParser.While, PHPParser.Yield, PHPParser.Get, PHPParser.Set, PHPParser.Call, PHPParser.CallStatic, PHPParser.Constructor, PHPParser.Destruct, PHPParser.Wakeup, PHPParser.Sleep, PHPParser.Autoload, PHPParser.IsSet__, PHPParser.Unset__, PHPParser.ToString__, PHPParser.Invoke, PHPParser.SetState, PHPParser.Clone__, PHPParser.DebugInfo, PHPParser.Namespace__, PHPParser.Class__, PHPParser.Traic__, PHPParser.Function__, PHPParser.Method__, PHPParser.Line__, PHPParser.File__, PHPParser.Dir__, PHPParser.Inc, PHPParser.Dec, PHPParser.NamespaceSeparator, PHPParser.Bang, PHPParser.Plus, PHPParser.Minus, PHPParser.Tilde, PHPParser.SuppressWarnings, PHPParser.Dollar, PHPParser.OpenRoundBracket, PHPParser.OpenSquareBracket, PHPParser.OpenCurlyBracket, PHPParser.SemiColon, PHPParser.VarName, PHPParser.Label, PHPParser.Octal, PHPParser.Decimal, PHPParser.Real, PHPParser.Hex, PHPParser.Binary, PHPParser.BackQuoteString, PHPParser.SingleQuoteString, PHPParser.DoubleQuote, PHPParser.StartNowDoc, PHPParser.StartHereDoc]:
                self.state = 839
                self.statement()
                pass
            elif token in [PHPParser.Colon]:
                self.state = 840
                self.match(PHPParser.Colon)
                self.state = 841
                self.innerStatementList()
                self.state = 842
                self.match(PHPParser.EndDeclare)
                self.state = 843
                self.match(PHPParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InlineHtmlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def htmlElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.HtmlElementContext)
            else:
                return self.getTypedRuleContext(PHPParser.HtmlElementContext,i)


        def scriptTextPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.ScriptTextPartContext)
            else:
                return self.getTypedRuleContext(PHPParser.ScriptTextPartContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_inlineHtml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineHtml" ):
                listener.enterInlineHtml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineHtml" ):
                listener.exitInlineHtml(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineHtml" ):
                return visitor.visitInlineHtml(self)
            else:
                return visitor.visitChildren(self)




    def inlineHtml(self):

        localctx = PHPParser.InlineHtmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_inlineHtml)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 849
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PHPParser.HtmlText, PHPParser.HtmlScriptOpen, PHPParser.HtmlStyleOpen, PHPParser.HtmlDtd, PHPParser.HtmlOpen, PHPParser.HtmlClose, PHPParser.HtmlSlashClose, PHPParser.HtmlSlash, PHPParser.HtmlEquals, PHPParser.HtmlStartQuoteString, PHPParser.HtmlStartDoubleQuoteString, PHPParser.HtmlHex, PHPParser.HtmlDecimal, PHPParser.HtmlName, PHPParser.HtmlEndQuoteString, PHPParser.HtmlQuoteString, PHPParser.HtmlEndDoubleQuoteString, PHPParser.HtmlDoubleQuoteString, PHPParser.ScriptClose, PHPParser.StyleBody]:
                        self.state = 847
                        self.htmlElement()
                        pass
                    elif token in [PHPParser.ScriptText]:
                        self.state = 848
                        self.scriptTextPart()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 851 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclareListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierInititalizer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.IdentifierInititalizerContext)
            else:
                return self.getTypedRuleContext(PHPParser.IdentifierInititalizerContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_declareList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareList" ):
                listener.enterDeclareList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareList" ):
                listener.exitDeclareList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclareList" ):
                return visitor.visitDeclareList(self)
            else:
                return visitor.visitChildren(self)




    def declareList(self):

        localctx = PHPParser.DeclareListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_declareList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.identifierInititalizer()
            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PHPParser.Comma:
                self.state = 854
                self.match(PHPParser.Comma)
                self.state = 855
                self.identifierInititalizer()
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(PHPParser.FormalParameterContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameterList" ):
                return visitor.visitFormalParameterList(self)
            else:
                return visitor.visitChildren(self)




    def formalParameterList(self):

        localctx = PHPParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)))) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Ellipsis - 179)) | (1 << (PHPParser.Ampersand - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) != 0):
                self.state = 861
                self.formalParameter()


            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PHPParser.Comma:
                self.state = 864
                self.match(PHPParser.Comma)
                self.state = 865
                self.formalParameter()
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(PHPParser.AttributesContext,0)


        def variableInitializer(self):
            return self.getTypedRuleContext(PHPParser.VariableInitializerContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(PHPParser.TypeHintContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormalParameter" ):
                return visitor.visitFormalParameter(self)
            else:
                return visitor.visitChildren(self)




    def formalParameter(self):

        localctx = PHPParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_formalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.attributes()
            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)))) != 0) or _la==PHPParser.NamespaceSeparator or _la==PHPParser.Label:
                self.state = 872
                self.typeHint()


            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PHPParser.Ampersand:
                self.state = 875
                self.match(PHPParser.Ampersand)


            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PHPParser.Ellipsis:
                self.state = 878
                self.match(PHPParser.Ellipsis)


            self.state = 881
            self.variableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeHintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PHPParser.QualifiedStaticTypeRefContext,0)


        def Callable(self):
            return self.getToken(PHPParser.Callable, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(PHPParser.PrimitiveTypeContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_typeHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeHint" ):
                listener.enterTypeHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeHint" ):
                listener.exitTypeHint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeHint" ):
                return visitor.visitTypeHint(self)
            else:
                return visitor.visitChildren(self)




    def typeHint(self):

        localctx = PHPParser.TypeHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_typeHint)
        try:
            self.state = 886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 883
                self.qualifiedStaticTypeRef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 884
                self.match(PHPParser.Callable)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 885
                self.primitiveType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GlobalStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Global(self):
            return self.getToken(PHPParser.Global, 0)

        def globalVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.GlobalVarContext)
            else:
                return self.getTypedRuleContext(PHPParser.GlobalVarContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_globalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalStatement" ):
                listener.enterGlobalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalStatement" ):
                listener.exitGlobalStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalStatement" ):
                return visitor.visitGlobalStatement(self)
            else:
                return visitor.visitChildren(self)




    def globalStatement(self):

        localctx = PHPParser.GlobalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_globalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.match(PHPParser.Global)
            self.state = 889
            self.globalVar()
            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PHPParser.Comma:
                self.state = 890
                self.match(PHPParser.Comma)
                self.state = 891
                self.globalVar()
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 897
            self.match(PHPParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GlobalVarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarName(self):
            return self.getToken(PHPParser.VarName, 0)

        def Dollar(self):
            return self.getToken(PHPParser.Dollar, 0)

        def chain(self):
            return self.getTypedRuleContext(PHPParser.ChainContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PHPParser.OpenCurlyBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_globalVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalVar" ):
                listener.enterGlobalVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalVar" ):
                listener.exitGlobalVar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalVar" ):
                return visitor.visitGlobalVar(self)
            else:
                return visitor.visitChildren(self)




    def globalVar(self):

        localctx = PHPParser.GlobalVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_globalVar)
        try:
            self.state = 907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 899
                self.match(PHPParser.VarName)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 900
                self.match(PHPParser.Dollar)
                self.state = 901
                self.chain()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 902
                self.match(PHPParser.Dollar)
                self.state = 903
                self.match(PHPParser.OpenCurlyBracket)
                self.state = 904
                self.expression(0)
                self.state = 905
                self.match(PHPParser.CloseCurlyBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EchoStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Echo(self):
            return self.getToken(PHPParser.Echo, 0)

        def expressionList(self):
            return self.getTypedRuleContext(PHPParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_echoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEchoStatement" ):
                listener.enterEchoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEchoStatement" ):
                listener.exitEchoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEchoStatement" ):
                return visitor.visitEchoStatement(self)
            else:
                return visitor.visitChildren(self)




    def echoStatement(self):

        localctx = PHPParser.EchoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_echoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(PHPParser.Echo)
            self.state = 910
            self.expressionList()
            self.state = 911
            self.match(PHPParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StaticVariableStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Static(self):
            return self.getToken(PHPParser.Static, 0)

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(PHPParser.VariableInitializerContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_staticVariableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVariableStatement" ):
                listener.enterStaticVariableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVariableStatement" ):
                listener.exitStaticVariableStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVariableStatement" ):
                return visitor.visitStaticVariableStatement(self)
            else:
                return visitor.visitChildren(self)




    def staticVariableStatement(self):

        localctx = PHPParser.StaticVariableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_staticVariableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.match(PHPParser.Static)
            self.state = 914
            self.variableInitializer()
            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PHPParser.Comma:
                self.state = 915
                self.match(PHPParser.Comma)
                self.state = 916
                self.variableInitializer()
                self.state = 921
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 922
            self.match(PHPParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(PHPParser.AttributesContext,0)


        def propertyModifiers(self):
            return self.getTypedRuleContext(PHPParser.PropertyModifiersContext,0)


        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(PHPParser.VariableInitializerContext,i)


        def Const(self):
            return self.getToken(PHPParser.Const, 0)

        def identifierInititalizer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.IdentifierInititalizerContext)
            else:
                return self.getTypedRuleContext(PHPParser.IdentifierInititalizerContext,i)


        def Function(self):
            return self.getToken(PHPParser.Function, 0)

        def identifier(self):
            return self.getTypedRuleContext(PHPParser.IdentifierContext,0)


        def formalParameterList(self):
            return self.getTypedRuleContext(PHPParser.FormalParameterListContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(PHPParser.MethodBodyContext,0)


        def memberModifiers(self):
            return self.getTypedRuleContext(PHPParser.MemberModifiersContext,0)


        def typeParameterListInBrackets(self):
            return self.getTypedRuleContext(PHPParser.TypeParameterListInBracketsContext,0)


        def baseCtorCall(self):
            return self.getTypedRuleContext(PHPParser.BaseCtorCallContext,0)


        def Use(self):
            return self.getToken(PHPParser.Use, 0)

        def qualifiedNamespaceNameList(self):
            return self.getTypedRuleContext(PHPParser.QualifiedNamespaceNameListContext,0)


        def traitAdaptations(self):
            return self.getTypedRuleContext(PHPParser.TraitAdaptationsContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_classStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassStatement" ):
                listener.enterClassStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassStatement" ):
                listener.exitClassStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassStatement" ):
                return visitor.visitClassStatement(self)
            else:
                return visitor.visitChildren(self)




    def classStatement(self):

        localctx = PHPParser.ClassStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_classStatement)
        self._la = 0 # Token type
        try:
            self.state = 972
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 924
                self.attributes()
                self.state = 925
                self.propertyModifiers()
                self.state = 926
                self.variableInitializer()
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PHPParser.Comma:
                    self.state = 927
                    self.match(PHPParser.Comma)
                    self.state = 928
                    self.variableInitializer()
                    self.state = 933
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 934
                self.match(PHPParser.SemiColon)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 936
                self.attributes()
                self.state = 937
                self.match(PHPParser.Const)
                self.state = 938
                self.identifierInititalizer()
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PHPParser.Comma:
                    self.state = 939
                    self.match(PHPParser.Comma)
                    self.state = 940
                    self.identifierInititalizer()
                    self.state = 945
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 946
                self.match(PHPParser.SemiColon)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 948
                self.attributes()
                self.state = 950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.Abstract or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Private - 72)) | (1 << (PHPParser.Protected - 72)) | (1 << (PHPParser.Public - 72)) | (1 << (PHPParser.Static - 72)))) != 0):
                    self.state = 949
                    self.memberModifiers()


                self.state = 952
                self.match(PHPParser.Function)
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.Ampersand:
                    self.state = 953
                    self.match(PHPParser.Ampersand)


                self.state = 956
                self.identifier()
                self.state = 958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.Lgeneric:
                    self.state = 957
                    self.typeParameterListInBrackets()


                self.state = 960
                self.match(PHPParser.OpenRoundBracket)
                self.state = 961
                self.formalParameterList()
                self.state = 962
                self.match(PHPParser.CloseRoundBracket)
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.Colon:
                    self.state = 963
                    self.baseCtorCall()


                self.state = 966
                self.methodBody()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 968
                self.match(PHPParser.Use)
                self.state = 969
                self.qualifiedNamespaceNameList()
                self.state = 970
                self.traitAdaptations()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TraitAdaptationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenCurlyBracket(self):
            return self.getToken(PHPParser.OpenCurlyBracket, 0)

        def traitAdaptationStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.TraitAdaptationStatementContext)
            else:
                return self.getTypedRuleContext(PHPParser.TraitAdaptationStatementContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_traitAdaptations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitAdaptations" ):
                listener.enterTraitAdaptations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitAdaptations" ):
                listener.exitTraitAdaptations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraitAdaptations" ):
                return visitor.visitTraitAdaptations(self)
            else:
                return visitor.visitChildren(self)




    def traitAdaptations(self):

        localctx = PHPParser.TraitAdaptationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_traitAdaptations)
        self._la = 0 # Token type
        try:
            self.state = 983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.SemiColon]:
                self.enterOuterAlt(localctx, 1)
                self.state = 974
                self.match(PHPParser.SemiColon)
                pass
            elif token in [PHPParser.OpenCurlyBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 975
                self.match(PHPParser.OpenCurlyBracket)
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)))) != 0) or _la==PHPParser.NamespaceSeparator or _la==PHPParser.Label:
                    self.state = 976
                    self.traitAdaptationStatement()
                    self.state = 981
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 982
                self.match(PHPParser.CloseCurlyBracket)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TraitAdaptationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traitPrecedence(self):
            return self.getTypedRuleContext(PHPParser.TraitPrecedenceContext,0)


        def traitAlias(self):
            return self.getTypedRuleContext(PHPParser.TraitAliasContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_traitAdaptationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitAdaptationStatement" ):
                listener.enterTraitAdaptationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitAdaptationStatement" ):
                listener.exitTraitAdaptationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraitAdaptationStatement" ):
                return visitor.visitTraitAdaptationStatement(self)
            else:
                return visitor.visitChildren(self)




    def traitAdaptationStatement(self):

        localctx = PHPParser.TraitAdaptationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_traitAdaptationStatement)
        try:
            self.state = 987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 985
                self.traitPrecedence()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 986
                self.traitAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TraitPrecedenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PHPParser.QualifiedNamespaceNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PHPParser.IdentifierContext,0)


        def InsteadOf(self):
            return self.getToken(PHPParser.InsteadOf, 0)

        def qualifiedNamespaceNameList(self):
            return self.getTypedRuleContext(PHPParser.QualifiedNamespaceNameListContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_traitPrecedence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitPrecedence" ):
                listener.enterTraitPrecedence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitPrecedence" ):
                listener.exitTraitPrecedence(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraitPrecedence" ):
                return visitor.visitTraitPrecedence(self)
            else:
                return visitor.visitChildren(self)




    def traitPrecedence(self):

        localctx = PHPParser.TraitPrecedenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_traitPrecedence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.qualifiedNamespaceName()
            self.state = 990
            self.match(PHPParser.DoubleColon)
            self.state = 991
            self.identifier()
            self.state = 992
            self.match(PHPParser.InsteadOf)
            self.state = 993
            self.qualifiedNamespaceNameList()
            self.state = 994
            self.match(PHPParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TraitAliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traitMethodReference(self):
            return self.getTypedRuleContext(PHPParser.TraitMethodReferenceContext,0)


        def As(self):
            return self.getToken(PHPParser.As, 0)

        def memberModifier(self):
            return self.getTypedRuleContext(PHPParser.MemberModifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PHPParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_traitAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitAlias" ):
                listener.enterTraitAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitAlias" ):
                listener.exitTraitAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraitAlias" ):
                return visitor.visitTraitAlias(self)
            else:
                return visitor.visitChildren(self)




    def traitAlias(self):

        localctx = PHPParser.TraitAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_traitAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self.traitMethodReference()
            self.state = 997
            self.match(PHPParser.As)
            self.state = 1003
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 998
                self.memberModifier()
                pass

            elif la_ == 2:
                self.state = 1000
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 999
                    self.memberModifier()


                self.state = 1002
                self.identifier()
                pass


            self.state = 1005
            self.match(PHPParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TraitMethodReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PHPParser.IdentifierContext,0)


        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PHPParser.QualifiedNamespaceNameContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_traitMethodReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitMethodReference" ):
                listener.enterTraitMethodReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitMethodReference" ):
                listener.exitTraitMethodReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraitMethodReference" ):
                return visitor.visitTraitMethodReference(self)
            else:
                return visitor.visitChildren(self)




    def traitMethodReference(self):

        localctx = PHPParser.TraitMethodReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_traitMethodReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 1007
                self.qualifiedNamespaceName()
                self.state = 1008
                self.match(PHPParser.DoubleColon)


            self.state = 1012
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BaseCtorCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PHPParser.IdentifierContext,0)


        def arguments(self):
            return self.getTypedRuleContext(PHPParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_baseCtorCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseCtorCall" ):
                listener.enterBaseCtorCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseCtorCall" ):
                listener.exitBaseCtorCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBaseCtorCall" ):
                return visitor.visitBaseCtorCall(self)
            else:
                return visitor.visitChildren(self)




    def baseCtorCall(self):

        localctx = PHPParser.BaseCtorCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_baseCtorCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self.match(PHPParser.Colon)
            self.state = 1015
            self.identifier()
            self.state = 1016
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self):
            return self.getTypedRuleContext(PHPParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodBody" ):
                return visitor.visitMethodBody(self)
            else:
                return visitor.visitChildren(self)




    def methodBody(self):

        localctx = PHPParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_methodBody)
        try:
            self.state = 1020
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.SemiColon]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1018
                self.match(PHPParser.SemiColon)
                pass
            elif token in [PHPParser.OpenCurlyBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1019
                self.blockStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyModifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberModifiers(self):
            return self.getTypedRuleContext(PHPParser.MemberModifiersContext,0)


        def Var(self):
            return self.getToken(PHPParser.Var, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_propertyModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyModifiers" ):
                listener.enterPropertyModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyModifiers" ):
                listener.exitPropertyModifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyModifiers" ):
                return visitor.visitPropertyModifiers(self)
            else:
                return visitor.visitChildren(self)




    def propertyModifiers(self):

        localctx = PHPParser.PropertyModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_propertyModifiers)
        try:
            self.state = 1024
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.Abstract, PHPParser.Final, PHPParser.Private, PHPParser.Protected, PHPParser.Public, PHPParser.Static]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1022
                self.memberModifiers()
                pass
            elif token in [PHPParser.Var]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1023
                self.match(PHPParser.Var)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberModifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.MemberModifierContext)
            else:
                return self.getTypedRuleContext(PHPParser.MemberModifierContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_memberModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberModifiers" ):
                listener.enterMemberModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberModifiers" ):
                listener.exitMemberModifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberModifiers" ):
                return visitor.visitMemberModifiers(self)
            else:
                return visitor.visitChildren(self)




    def memberModifiers(self):

        localctx = PHPParser.MemberModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_memberModifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1026
                self.memberModifier()
                self.state = 1029 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PHPParser.Abstract or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Private - 72)) | (1 << (PHPParser.Protected - 72)) | (1 << (PHPParser.Public - 72)) | (1 << (PHPParser.Static - 72)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarName(self):
            return self.getToken(PHPParser.VarName, 0)

        def Eq(self):
            return self.getToken(PHPParser.Eq, 0)

        def constantInititalizer(self):
            return self.getTypedRuleContext(PHPParser.ConstantInititalizerContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableInitializer" ):
                return visitor.visitVariableInitializer(self)
            else:
                return visitor.visitChildren(self)




    def variableInitializer(self):

        localctx = PHPParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_variableInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.match(PHPParser.VarName)
            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PHPParser.Eq:
                self.state = 1032
                self.match(PHPParser.Eq)
                self.state = 1033
                self.constantInititalizer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierInititalizerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PHPParser.IdentifierContext,0)


        def Eq(self):
            return self.getToken(PHPParser.Eq, 0)

        def constantInititalizer(self):
            return self.getTypedRuleContext(PHPParser.ConstantInititalizerContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_identifierInititalizer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierInititalizer" ):
                listener.enterIdentifierInititalizer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierInititalizer" ):
                listener.exitIdentifierInititalizer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierInititalizer" ):
                return visitor.visitIdentifierInititalizer(self)
            else:
                return visitor.visitChildren(self)




    def identifierInititalizer(self):

        localctx = PHPParser.IdentifierInititalizerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_identifierInititalizer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.identifier()
            self.state = 1037
            self.match(PHPParser.Eq)
            self.state = 1038
            self.constantInititalizer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GlobalConstantDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(PHPParser.AttributesContext,0)


        def Const(self):
            return self.getToken(PHPParser.Const, 0)

        def identifierInititalizer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.IdentifierInititalizerContext)
            else:
                return self.getTypedRuleContext(PHPParser.IdentifierInititalizerContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_globalConstantDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalConstantDeclaration" ):
                listener.enterGlobalConstantDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalConstantDeclaration" ):
                listener.exitGlobalConstantDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalConstantDeclaration" ):
                return visitor.visitGlobalConstantDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def globalConstantDeclaration(self):

        localctx = PHPParser.GlobalConstantDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_globalConstantDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.attributes()
            self.state = 1041
            self.match(PHPParser.Const)
            self.state = 1042
            self.identifierInititalizer()
            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PHPParser.Comma:
                self.state = 1043
                self.match(PHPParser.Comma)
                self.state = 1044
                self.identifierInititalizer()
                self.state = 1049
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1050
            self.match(PHPParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PHPParser.ExpressionContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = PHPParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.expression(0)
            self.state = 1057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PHPParser.Comma:
                self.state = 1053
                self.match(PHPParser.Comma)
                self.state = 1054
                self.expression(0)
                self.state = 1059
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParenthesisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)


        def yieldExpression(self):
            return self.getTypedRuleContext(PHPParser.YieldExpressionContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_parenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesis" ):
                listener.enterParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesis" ):
                listener.exitParenthesis(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesis" ):
                return visitor.visitParenthesis(self)
            else:
                return visitor.visitChildren(self)




    def parenthesis(self):

        localctx = PHPParser.ParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_parenthesis)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.match(PHPParser.OpenRoundBracket)
            self.state = 1063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 1061
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 1062
                self.yieldExpression()
                pass


            self.state = 1065
            self.match(PHPParser.CloseRoundBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andOrExpression(self):
            return self.getTypedRuleContext(PHPParser.AndOrExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PHPParser.ExpressionContext,i)


        def QuestionMark(self):
            return self.getToken(PHPParser.QuestionMark, 0)

        def LogicalAnd(self):
            return self.getToken(PHPParser.LogicalAnd, 0)

        def LogicalXor(self):
            return self.getToken(PHPParser.LogicalXor, 0)

        def LogicalOr(self):
            return self.getToken(PHPParser.LogicalOr, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PHPParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 164
        self.enterRecursionRule(localctx, 164, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.andOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1088
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1086
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                    if la_ == 1:
                        localctx = PHPParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1070
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1071
                        self.match(PHPParser.QuestionMark)
                        self.state = 1073
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)) | (1 << (PHPParser.Inc - 104)) | (1 << (PHPParser.Dec - 104)))) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)) | (1 << (PHPParser.Octal - 179)) | (1 << (PHPParser.Decimal - 179)) | (1 << (PHPParser.Real - 179)) | (1 << (PHPParser.Hex - 179)) | (1 << (PHPParser.Binary - 179)) | (1 << (PHPParser.BackQuoteString - 179)) | (1 << (PHPParser.SingleQuoteString - 179)) | (1 << (PHPParser.DoubleQuote - 179)) | (1 << (PHPParser.StartNowDoc - 179)) | (1 << (PHPParser.StartHereDoc - 179)))) != 0):
                            self.state = 1072
                            self.expression(0)


                        self.state = 1075
                        self.match(PHPParser.Colon)
                        self.state = 1076
                        self.andOrExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = PHPParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1077
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1078
                        self.match(PHPParser.LogicalAnd)
                        self.state = 1079
                        self.andOrExpression(0)
                        pass

                    elif la_ == 3:
                        localctx = PHPParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1080
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1081
                        self.match(PHPParser.LogicalXor)
                        self.state = 1082
                        self.andOrExpression(0)
                        pass

                    elif la_ == 4:
                        localctx = PHPParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1083
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1084
                        self.match(PHPParser.LogicalOr)
                        self.state = 1085
                        self.andOrExpression(0)
                        pass

             
                self.state = 1090
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AndOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparisonExpression(self):
            return self.getTypedRuleContext(PHPParser.ComparisonExpressionContext,0)


        def andOrExpression(self):
            return self.getTypedRuleContext(PHPParser.AndOrExpressionContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_andOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndOrExpression" ):
                listener.enterAndOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndOrExpression" ):
                listener.exitAndOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndOrExpression" ):
                return visitor.visitAndOrExpression(self)
            else:
                return visitor.visitChildren(self)



    def andOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PHPParser.AndOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 166
        self.enterRecursionRule(localctx, 166, self.RULE_andOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.comparisonExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1111
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1109
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                    if la_ == 1:
                        localctx = PHPParser.AndOrExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_andOrExpression)
                        self.state = 1094
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1095
                        self.match(PHPParser.Ampersand)
                        self.state = 1096
                        self.comparisonExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = PHPParser.AndOrExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_andOrExpression)
                        self.state = 1097
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1098
                        self.match(PHPParser.Caret)
                        self.state = 1099
                        self.comparisonExpression(0)
                        pass

                    elif la_ == 3:
                        localctx = PHPParser.AndOrExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_andOrExpression)
                        self.state = 1100
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1101
                        self.match(PHPParser.Pipe)
                        self.state = 1102
                        self.comparisonExpression(0)
                        pass

                    elif la_ == 4:
                        localctx = PHPParser.AndOrExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_andOrExpression)
                        self.state = 1103
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1104
                        self.match(PHPParser.BooleanAnd)
                        self.state = 1105
                        self.comparisonExpression(0)
                        pass

                    elif la_ == 5:
                        localctx = PHPParser.AndOrExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_andOrExpression)
                        self.state = 1106
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1107
                        self.match(PHPParser.BooleanOr)
                        self.state = 1108
                        self.comparisonExpression(0)
                        pass

             
                self.state = 1113
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ComparisonExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additionExpression(self):
            return self.getTypedRuleContext(PHPParser.AdditionExpressionContext,0)


        def comparisonExpression(self):
            return self.getTypedRuleContext(PHPParser.ComparisonExpressionContext,0)


        def Less(self):
            return self.getToken(PHPParser.Less, 0)

        def Greater(self):
            return self.getToken(PHPParser.Greater, 0)

        def IsNotEq(self):
            return self.getToken(PHPParser.IsNotEq, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_comparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonExpression" ):
                listener.enterComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonExpression" ):
                listener.exitComparisonExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonExpression" ):
                return visitor.visitComparisonExpression(self)
            else:
                return visitor.visitChildren(self)



    def comparisonExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PHPParser.ComparisonExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 168
        self.enterRecursionRule(localctx, 168, self.RULE_comparisonExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self.additionExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1128
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1126
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                    if la_ == 1:
                        localctx = PHPParser.ComparisonExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparisonExpression)
                        self.state = 1117
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1118
                        _la = self._input.LA(1)
                        if not(_la==PHPParser.ShiftLeft or _la==PHPParser.ShiftRight):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1119
                        self.additionExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = PHPParser.ComparisonExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparisonExpression)
                        self.state = 1120
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1121
                        _la = self._input.LA(1)
                        if not(((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (PHPParser.IsSmallerOrEqual - 158)) | (1 << (PHPParser.IsGreaterOrEqual - 158)) | (1 << (PHPParser.Less - 158)) | (1 << (PHPParser.Greater - 158)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1122
                        self.additionExpression(0)
                        pass

                    elif la_ == 3:
                        localctx = PHPParser.ComparisonExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparisonExpression)
                        self.state = 1123
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1124
                        _la = self._input.LA(1)
                        if not(((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (PHPParser.IsIdentical - 154)) | (1 << (PHPParser.IsNoidentical - 154)) | (1 << (PHPParser.IsEqual - 154)) | (1 << (PHPParser.IsNotEq - 154)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1125
                        self.additionExpression(0)
                        pass

             
                self.state = 1130
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AdditionExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicationExpression(self):
            return self.getTypedRuleContext(PHPParser.MultiplicationExpressionContext,0)


        def additionExpression(self):
            return self.getTypedRuleContext(PHPParser.AdditionExpressionContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_additionExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditionExpression" ):
                listener.enterAdditionExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditionExpression" ):
                listener.exitAdditionExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditionExpression" ):
                return visitor.visitAdditionExpression(self)
            else:
                return visitor.visitChildren(self)



    def additionExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PHPParser.AdditionExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 170
        self.enterRecursionRule(localctx, 170, self.RULE_additionExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self.multiplicationExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1139
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PHPParser.AdditionExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additionExpression)
                    self.state = 1134
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1135
                    _la = self._input.LA(1)
                    if not(((((_la - 187)) & ~0x3f) == 0 and ((1 << (_la - 187)) & ((1 << (PHPParser.Plus - 187)) | (1 << (PHPParser.Minus - 187)) | (1 << (PHPParser.Dot - 187)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1136
                    self.multiplicationExpression(0) 
                self.state = 1141
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MultiplicationExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def notLeftRecursionExpression(self):
            return self.getTypedRuleContext(PHPParser.NotLeftRecursionExpressionContext,0)


        def multiplicationExpression(self):
            return self.getTypedRuleContext(PHPParser.MultiplicationExpressionContext,0)


        def InstanceOf(self):
            return self.getToken(PHPParser.InstanceOf, 0)

        def typeRef(self):
            return self.getTypedRuleContext(PHPParser.TypeRefContext,0)


        def Divide(self):
            return self.getToken(PHPParser.Divide, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_multiplicationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicationExpression" ):
                listener.enterMultiplicationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicationExpression" ):
                listener.exitMultiplicationExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicationExpression" ):
                return visitor.visitMultiplicationExpression(self)
            else:
                return visitor.visitChildren(self)



    def multiplicationExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PHPParser.MultiplicationExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 172
        self.enterRecursionRule(localctx, 172, self.RULE_multiplicationExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 1143
                self.notLeftRecursionExpression()
                pass

            elif la_ == 2:
                self.state = 1144
                self.notLeftRecursionExpression()
                self.state = 1145
                self.match(PHPParser.Pow)
                self.state = 1146
                self.multiplicationExpression(3)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1158
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1156
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                    if la_ == 1:
                        localctx = PHPParser.MultiplicationExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicationExpression)
                        self.state = 1150
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1151
                        self.match(PHPParser.InstanceOf)
                        self.state = 1152
                        self.typeRef()
                        pass

                    elif la_ == 2:
                        localctx = PHPParser.MultiplicationExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicationExpression)
                        self.state = 1153
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1154
                        _la = self._input.LA(1)
                        if not(((((_la - 189)) & ~0x3f) == 0 and ((1 << (_la - 189)) & ((1 << (PHPParser.Asterisk - 189)) | (1 << (PHPParser.Percent - 189)) | (1 << (PHPParser.Divide - 189)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1155
                        self.notLeftRecursionExpression()
                        pass

             
                self.state = 1160
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class NotLeftRecursionExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PHPParser.RULE_notLeftRecursionExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ChainExpressionContext(NotLeftRecursionExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PHPParser.NotLeftRecursionExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def chain(self):
            return self.getTypedRuleContext(PHPParser.ChainContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChainExpression" ):
                listener.enterChainExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChainExpression" ):
                listener.exitChainExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChainExpression" ):
                return visitor.visitChainExpression(self)
            else:
                return visitor.visitChildren(self)


    class UnaryOperatorExpressionContext(NotLeftRecursionExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PHPParser.NotLeftRecursionExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperatorExpression" ):
                listener.enterUnaryOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperatorExpression" ):
                listener.exitUnaryOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOperatorExpression" ):
                return visitor.visitUnaryOperatorExpression(self)
            else:
                return visitor.visitChildren(self)


    class SpecialWordExpressionContext(NotLeftRecursionExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PHPParser.NotLeftRecursionExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Yield(self):
            return self.getToken(PHPParser.Yield, 0)
        def List(self):
            return self.getToken(PHPParser.List, 0)
        def assignmentList(self):
            return self.getTypedRuleContext(PHPParser.AssignmentListContext,0)

        def Eq(self):
            return self.getToken(PHPParser.Eq, 0)
        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)

        def IsSet(self):
            return self.getToken(PHPParser.IsSet, 0)
        def chainList(self):
            return self.getTypedRuleContext(PHPParser.ChainListContext,0)

        def Empty(self):
            return self.getToken(PHPParser.Empty, 0)
        def chain(self):
            return self.getTypedRuleContext(PHPParser.ChainContext,0)

        def Eval(self):
            return self.getToken(PHPParser.Eval, 0)
        def Exit(self):
            return self.getToken(PHPParser.Exit, 0)
        def parenthesis(self):
            return self.getTypedRuleContext(PHPParser.ParenthesisContext,0)

        def Include(self):
            return self.getToken(PHPParser.Include, 0)
        def IncludeOnce(self):
            return self.getToken(PHPParser.IncludeOnce, 0)
        def Require(self):
            return self.getToken(PHPParser.Require, 0)
        def RequireOnce(self):
            return self.getToken(PHPParser.RequireOnce, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialWordExpression" ):
                listener.enterSpecialWordExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialWordExpression" ):
                listener.exitSpecialWordExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialWordExpression" ):
                return visitor.visitSpecialWordExpression(self)
            else:
                return visitor.visitChildren(self)


    class ArrayCreationExpressionContext(NotLeftRecursionExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PHPParser.NotLeftRecursionExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Array(self):
            return self.getToken(PHPParser.Array, 0)
        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)

        def arrayItemList(self):
            return self.getTypedRuleContext(PHPParser.ArrayItemListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreationExpression" ):
                listener.enterArrayCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreationExpression" ):
                listener.exitArrayCreationExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayCreationExpression" ):
                return visitor.visitArrayCreationExpression(self)
            else:
                return visitor.visitChildren(self)


    class NewExpressionContext(NotLeftRecursionExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PHPParser.NotLeftRecursionExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def newExpr(self):
            return self.getTypedRuleContext(PHPParser.NewExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpression" ):
                listener.enterNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpression" ):
                listener.exitNewExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewExpression" ):
                return visitor.visitNewExpression(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesisExpressionContext(NotLeftRecursionExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PHPParser.NotLeftRecursionExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parenthesis(self):
            return self.getTypedRuleContext(PHPParser.ParenthesisContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpression" ):
                listener.enterParenthesisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpression" ):
                listener.exitParenthesisExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesisExpression" ):
                return visitor.visitParenthesisExpression(self)
            else:
                return visitor.visitChildren(self)


    class BackQuoteStringExpressionContext(NotLeftRecursionExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PHPParser.NotLeftRecursionExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BackQuoteString(self):
            return self.getToken(PHPParser.BackQuoteString, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackQuoteStringExpression" ):
                listener.enterBackQuoteStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackQuoteStringExpression" ):
                listener.exitBackQuoteStringExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBackQuoteStringExpression" ):
                return visitor.visitBackQuoteStringExpression(self)
            else:
                return visitor.visitChildren(self)


    class IndexerExpressionContext(NotLeftRecursionExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PHPParser.NotLeftRecursionExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringConstant(self):
            return self.getTypedRuleContext(PHPParser.StringConstantContext,0)

        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexerExpression" ):
                listener.enterIndexerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexerExpression" ):
                listener.exitIndexerExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexerExpression" ):
                return visitor.visitIndexerExpression(self)
            else:
                return visitor.visitChildren(self)


    class ScalarExpressionContext(NotLeftRecursionExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PHPParser.NotLeftRecursionExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(PHPParser.ConstantContext,0)

        def string(self):
            return self.getTypedRuleContext(PHPParser.StringContext,0)

        def Label(self):
            return self.getToken(PHPParser.Label, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarExpression" ):
                listener.enterScalarExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarExpression" ):
                listener.exitScalarExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalarExpression" ):
                return visitor.visitScalarExpression(self)
            else:
                return visitor.visitChildren(self)


    class PrefixIncDecExpressionContext(NotLeftRecursionExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PHPParser.NotLeftRecursionExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def chain(self):
            return self.getTypedRuleContext(PHPParser.ChainContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixIncDecExpression" ):
                listener.enterPrefixIncDecExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixIncDecExpression" ):
                listener.exitPrefixIncDecExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixIncDecExpression" ):
                return visitor.visitPrefixIncDecExpression(self)
            else:
                return visitor.visitChildren(self)


    class PrintExpressionContext(NotLeftRecursionExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PHPParser.NotLeftRecursionExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Print(self):
            return self.getToken(PHPParser.Print, 0)
        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintExpression" ):
                listener.enterPrintExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintExpression" ):
                listener.exitPrintExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintExpression" ):
                return visitor.visitPrintExpression(self)
            else:
                return visitor.visitChildren(self)


    class AssignmentExpressionContext(NotLeftRecursionExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PHPParser.NotLeftRecursionExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def chain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.ChainContext)
            else:
                return self.getTypedRuleContext(PHPParser.ChainContext,i)

        def assignmentOperator(self):
            return self.getTypedRuleContext(PHPParser.AssignmentOperatorContext,0)

        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)

        def Eq(self):
            return self.getToken(PHPParser.Eq, 0)
        def newExpr(self):
            return self.getTypedRuleContext(PHPParser.NewExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentExpression" ):
                return visitor.visitAssignmentExpression(self)
            else:
                return visitor.visitChildren(self)


    class PostfixIncDecExpressionContext(NotLeftRecursionExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PHPParser.NotLeftRecursionExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def chain(self):
            return self.getTypedRuleContext(PHPParser.ChainContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixIncDecExpression" ):
                listener.enterPostfixIncDecExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixIncDecExpression" ):
                listener.exitPostfixIncDecExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixIncDecExpression" ):
                return visitor.visitPostfixIncDecExpression(self)
            else:
                return visitor.visitChildren(self)


    class CastExpressionContext(NotLeftRecursionExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PHPParser.NotLeftRecursionExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def castOperation(self):
            return self.getTypedRuleContext(PHPParser.CastOperationContext,0)

        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpression" ):
                return visitor.visitCastExpression(self)
            else:
                return visitor.visitChildren(self)


    class LambdaFunctionExpressionContext(NotLeftRecursionExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PHPParser.NotLeftRecursionExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Function(self):
            return self.getToken(PHPParser.Function, 0)
        def formalParameterList(self):
            return self.getTypedRuleContext(PHPParser.FormalParameterListContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(PHPParser.BlockStatementContext,0)

        def Static(self):
            return self.getToken(PHPParser.Static, 0)
        def lambdaFunctionUseVars(self):
            return self.getTypedRuleContext(PHPParser.LambdaFunctionUseVarsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunctionExpression" ):
                listener.enterLambdaFunctionExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunctionExpression" ):
                listener.exitLambdaFunctionExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaFunctionExpression" ):
                return visitor.visitLambdaFunctionExpression(self)
            else:
                return visitor.visitChildren(self)


    class CloneExpressionContext(NotLeftRecursionExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PHPParser.NotLeftRecursionExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Clone(self):
            return self.getToken(PHPParser.Clone, 0)
        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloneExpression" ):
                listener.enterCloneExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloneExpression" ):
                listener.exitCloneExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCloneExpression" ):
                return visitor.visitCloneExpression(self)
            else:
                return visitor.visitChildren(self)



    def notLeftRecursionExpression(self):

        localctx = PHPParser.NotLeftRecursionExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_notLeftRecursionExpression)
        self._la = 0 # Token type
        try:
            self.state = 1269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                localctx = PHPParser.CloneExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1161
                self.match(PHPParser.Clone)
                self.state = 1162
                self.expression(0)
                pass

            elif la_ == 2:
                localctx = PHPParser.NewExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1163
                self.newExpr()
                pass

            elif la_ == 3:
                localctx = PHPParser.IndexerExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1164
                self.stringConstant()
                self.state = 1165
                self.match(PHPParser.OpenSquareBracket)
                self.state = 1166
                self.expression(0)
                self.state = 1167
                self.match(PHPParser.CloseSquareBracket)
                pass

            elif la_ == 4:
                localctx = PHPParser.CastExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1169
                self.match(PHPParser.OpenRoundBracket)
                self.state = 1170
                self.castOperation()
                self.state = 1171
                self.match(PHPParser.CloseRoundBracket)
                self.state = 1172
                self.expression(0)
                pass

            elif la_ == 5:
                localctx = PHPParser.UnaryOperatorExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1174
                _la = self._input.LA(1)
                if not(_la==PHPParser.Tilde or _la==PHPParser.SuppressWarnings):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1175
                self.expression(0)
                pass

            elif la_ == 6:
                localctx = PHPParser.UnaryOperatorExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1176
                _la = self._input.LA(1)
                if not(((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & ((1 << (PHPParser.Bang - 185)) | (1 << (PHPParser.Plus - 185)) | (1 << (PHPParser.Minus - 185)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1177
                self.expression(0)
                pass

            elif la_ == 7:
                localctx = PHPParser.PrefixIncDecExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1178
                _la = self._input.LA(1)
                if not(_la==PHPParser.Inc or _la==PHPParser.Dec):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1179
                self.chain()
                pass

            elif la_ == 8:
                localctx = PHPParser.PostfixIncDecExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1180
                self.chain()
                self.state = 1181
                _la = self._input.LA(1)
                if not(_la==PHPParser.Inc or _la==PHPParser.Dec):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                localctx = PHPParser.AssignmentExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1183
                self.chain()
                self.state = 1184
                self.assignmentOperator()
                self.state = 1185
                self.expression(0)
                pass

            elif la_ == 10:
                localctx = PHPParser.AssignmentExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1187
                self.chain()
                self.state = 1188
                self.match(PHPParser.Eq)
                self.state = 1189
                self.match(PHPParser.Ampersand)
                self.state = 1192
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 1190
                    self.chain()
                    pass

                elif la_ == 2:
                    self.state = 1191
                    self.newExpr()
                    pass


                pass

            elif la_ == 11:
                localctx = PHPParser.PrintExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1194
                self.match(PHPParser.Print)
                self.state = 1195
                self.expression(0)
                pass

            elif la_ == 12:
                localctx = PHPParser.ChainExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1196
                self.chain()
                pass

            elif la_ == 13:
                localctx = PHPParser.ScalarExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1197
                self.constant()
                pass

            elif la_ == 14:
                localctx = PHPParser.ScalarExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1198
                self.string()
                pass

            elif la_ == 15:
                localctx = PHPParser.ScalarExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1199
                self.match(PHPParser.Label)
                pass

            elif la_ == 16:
                localctx = PHPParser.BackQuoteStringExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1200
                self.match(PHPParser.BackQuoteString)
                pass

            elif la_ == 17:
                localctx = PHPParser.ParenthesisExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1201
                self.parenthesis()
                pass

            elif la_ == 18:
                localctx = PHPParser.ArrayCreationExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1213
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PHPParser.Array]:
                    self.state = 1202
                    self.match(PHPParser.Array)
                    self.state = 1203
                    self.match(PHPParser.OpenRoundBracket)
                    self.state = 1205
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)) | (1 << (PHPParser.Inc - 104)) | (1 << (PHPParser.Dec - 104)))) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Ampersand - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)) | (1 << (PHPParser.Octal - 179)) | (1 << (PHPParser.Decimal - 179)) | (1 << (PHPParser.Real - 179)) | (1 << (PHPParser.Hex - 179)) | (1 << (PHPParser.Binary - 179)) | (1 << (PHPParser.BackQuoteString - 179)) | (1 << (PHPParser.SingleQuoteString - 179)) | (1 << (PHPParser.DoubleQuote - 179)) | (1 << (PHPParser.StartNowDoc - 179)) | (1 << (PHPParser.StartHereDoc - 179)))) != 0):
                        self.state = 1204
                        self.arrayItemList()


                    self.state = 1207
                    self.match(PHPParser.CloseRoundBracket)
                    pass
                elif token in [PHPParser.OpenSquareBracket]:
                    self.state = 1208
                    self.match(PHPParser.OpenSquareBracket)
                    self.state = 1210
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)) | (1 << (PHPParser.Inc - 104)) | (1 << (PHPParser.Dec - 104)))) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Ampersand - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)) | (1 << (PHPParser.Octal - 179)) | (1 << (PHPParser.Decimal - 179)) | (1 << (PHPParser.Real - 179)) | (1 << (PHPParser.Hex - 179)) | (1 << (PHPParser.Binary - 179)) | (1 << (PHPParser.BackQuoteString - 179)) | (1 << (PHPParser.SingleQuoteString - 179)) | (1 << (PHPParser.DoubleQuote - 179)) | (1 << (PHPParser.StartNowDoc - 179)) | (1 << (PHPParser.StartHereDoc - 179)))) != 0):
                        self.state = 1209
                        self.arrayItemList()


                    self.state = 1212
                    self.match(PHPParser.CloseSquareBracket)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1219
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 1215
                    self.match(PHPParser.OpenSquareBracket)
                    self.state = 1216
                    self.expression(0)
                    self.state = 1217
                    self.match(PHPParser.CloseSquareBracket)


                pass

            elif la_ == 19:
                localctx = PHPParser.SpecialWordExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 1221
                self.match(PHPParser.Yield)
                pass

            elif la_ == 20:
                localctx = PHPParser.SpecialWordExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 1222
                self.match(PHPParser.List)
                self.state = 1223
                self.match(PHPParser.OpenRoundBracket)
                self.state = 1224
                self.assignmentList()
                self.state = 1225
                self.match(PHPParser.CloseRoundBracket)
                self.state = 1226
                self.match(PHPParser.Eq)
                self.state = 1227
                self.expression(0)
                pass

            elif la_ == 21:
                localctx = PHPParser.SpecialWordExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 1229
                self.match(PHPParser.IsSet)
                self.state = 1230
                self.match(PHPParser.OpenRoundBracket)
                self.state = 1231
                self.chainList()
                self.state = 1232
                self.match(PHPParser.CloseRoundBracket)
                pass

            elif la_ == 22:
                localctx = PHPParser.SpecialWordExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 1234
                self.match(PHPParser.Empty)
                self.state = 1235
                self.match(PHPParser.OpenRoundBracket)
                self.state = 1236
                self.chain()
                self.state = 1237
                self.match(PHPParser.CloseRoundBracket)
                pass

            elif la_ == 23:
                localctx = PHPParser.SpecialWordExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 1239
                self.match(PHPParser.Eval)
                self.state = 1240
                self.match(PHPParser.OpenRoundBracket)
                self.state = 1241
                self.expression(0)
                self.state = 1242
                self.match(PHPParser.CloseRoundBracket)
                pass

            elif la_ == 24:
                localctx = PHPParser.SpecialWordExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 1244
                self.match(PHPParser.Exit)
                self.state = 1248
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 1245
                    self.match(PHPParser.OpenRoundBracket)
                    self.state = 1246
                    self.match(PHPParser.CloseRoundBracket)

                elif la_ == 2:
                    self.state = 1247
                    self.parenthesis()


                pass

            elif la_ == 25:
                localctx = PHPParser.SpecialWordExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 1250
                _la = self._input.LA(1)
                if not(_la==PHPParser.Include or _la==PHPParser.IncludeOnce):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1251
                self.expression(0)
                pass

            elif la_ == 26:
                localctx = PHPParser.SpecialWordExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 1252
                _la = self._input.LA(1)
                if not(_la==PHPParser.Require or _la==PHPParser.RequireOnce):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1253
                self.expression(0)
                pass

            elif la_ == 27:
                localctx = PHPParser.LambdaFunctionExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 1255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.Static:
                    self.state = 1254
                    self.match(PHPParser.Static)


                self.state = 1257
                self.match(PHPParser.Function)
                self.state = 1259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.Ampersand:
                    self.state = 1258
                    self.match(PHPParser.Ampersand)


                self.state = 1261
                self.match(PHPParser.OpenRoundBracket)
                self.state = 1262
                self.formalParameterList()
                self.state = 1263
                self.match(PHPParser.CloseRoundBracket)
                self.state = 1265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.Use:
                    self.state = 1264
                    self.lambdaFunctionUseVars()


                self.state = 1267
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(PHPParser.New, 0)

        def typeRef(self):
            return self.getTypedRuleContext(PHPParser.TypeRefContext,0)


        def arguments(self):
            return self.getTypedRuleContext(PHPParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_newExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpr" ):
                listener.enterNewExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpr" ):
                listener.exitNewExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewExpr" ):
                return visitor.visitNewExpr(self)
            else:
                return visitor.visitChildren(self)




    def newExpr(self):

        localctx = PHPParser.NewExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_newExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            self.match(PHPParser.New)
            self.state = 1272
            self.typeRef()
            self.state = 1274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1273
                self.arguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Eq(self):
            return self.getToken(PHPParser.Eq, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperator" ):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentOperator(self):

        localctx = PHPParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            _la = self._input.LA(1)
            if not(((((_la - 160)) & ~0x3f) == 0 and ((1 << (_la - 160)) & ((1 << (PHPParser.PlusEqual - 160)) | (1 << (PHPParser.MinusEqual - 160)) | (1 << (PHPParser.MulEqual - 160)) | (1 << (PHPParser.PowEqual - 160)) | (1 << (PHPParser.DivEqual - 160)) | (1 << (PHPParser.Concaequal - 160)) | (1 << (PHPParser.ModEqual - 160)) | (1 << (PHPParser.ShiftLeftEqual - 160)) | (1 << (PHPParser.ShiftRightEqual - 160)) | (1 << (PHPParser.AndEqual - 160)) | (1 << (PHPParser.OrEqual - 160)) | (1 << (PHPParser.XorEqual - 160)) | (1 << (PHPParser.Eq - 160)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YieldExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Yield(self):
            return self.getToken(PHPParser.Yield, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PHPParser.ExpressionContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_yieldExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldExpression" ):
                listener.enterYieldExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldExpression" ):
                listener.exitYieldExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYieldExpression" ):
                return visitor.visitYieldExpression(self)
            else:
                return visitor.visitChildren(self)




    def yieldExpression(self):

        localctx = PHPParser.YieldExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_yieldExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.match(PHPParser.Yield)
            self.state = 1279
            self.expression(0)
            self.state = 1282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PHPParser.DoubleArrow:
                self.state = 1280
                self.match(PHPParser.DoubleArrow)
                self.state = 1281
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayItemListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.ArrayItemContext)
            else:
                return self.getTypedRuleContext(PHPParser.ArrayItemContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_arrayItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayItemList" ):
                listener.enterArrayItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayItemList" ):
                listener.exitArrayItemList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayItemList" ):
                return visitor.visitArrayItemList(self)
            else:
                return visitor.visitChildren(self)




    def arrayItemList(self):

        localctx = PHPParser.ArrayItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_arrayItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self.arrayItem()
            self.state = 1289
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1285
                    self.match(PHPParser.Comma)
                    self.state = 1286
                    self.arrayItem() 
                self.state = 1291
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

            self.state = 1293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PHPParser.Comma:
                self.state = 1292
                self.match(PHPParser.Comma)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PHPParser.ExpressionContext,i)


        def chain(self):
            return self.getTypedRuleContext(PHPParser.ChainContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_arrayItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayItem" ):
                listener.enterArrayItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayItem" ):
                listener.exitArrayItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayItem" ):
                return visitor.visitArrayItem(self)
            else:
                return visitor.visitChildren(self)




    def arrayItem(self):

        localctx = PHPParser.ArrayItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_arrayItem)
        self._la = 0 # Token type
        try:
            self.state = 1307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1295
                self.expression(0)
                self.state = 1298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.DoubleArrow:
                    self.state = 1296
                    self.match(PHPParser.DoubleArrow)
                    self.state = 1297
                    self.expression(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)) | (1 << (PHPParser.Inc - 104)) | (1 << (PHPParser.Dec - 104)))) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)) | (1 << (PHPParser.Octal - 179)) | (1 << (PHPParser.Decimal - 179)) | (1 << (PHPParser.Real - 179)) | (1 << (PHPParser.Hex - 179)) | (1 << (PHPParser.Binary - 179)) | (1 << (PHPParser.BackQuoteString - 179)) | (1 << (PHPParser.SingleQuoteString - 179)) | (1 << (PHPParser.DoubleQuote - 179)) | (1 << (PHPParser.StartNowDoc - 179)) | (1 << (PHPParser.StartHereDoc - 179)))) != 0):
                    self.state = 1300
                    self.expression(0)
                    self.state = 1301
                    self.match(PHPParser.DoubleArrow)


                self.state = 1305
                self.match(PHPParser.Ampersand)
                self.state = 1306
                self.chain()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaFunctionUseVarsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Use(self):
            return self.getToken(PHPParser.Use, 0)

        def lambdaFunctionUseVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.LambdaFunctionUseVarContext)
            else:
                return self.getTypedRuleContext(PHPParser.LambdaFunctionUseVarContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_lambdaFunctionUseVars

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunctionUseVars" ):
                listener.enterLambdaFunctionUseVars(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunctionUseVars" ):
                listener.exitLambdaFunctionUseVars(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaFunctionUseVars" ):
                return visitor.visitLambdaFunctionUseVars(self)
            else:
                return visitor.visitChildren(self)




    def lambdaFunctionUseVars(self):

        localctx = PHPParser.LambdaFunctionUseVarsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_lambdaFunctionUseVars)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self.match(PHPParser.Use)
            self.state = 1310
            self.match(PHPParser.OpenRoundBracket)
            self.state = 1311
            self.lambdaFunctionUseVar()
            self.state = 1316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PHPParser.Comma:
                self.state = 1312
                self.match(PHPParser.Comma)
                self.state = 1313
                self.lambdaFunctionUseVar()
                self.state = 1318
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1319
            self.match(PHPParser.CloseRoundBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaFunctionUseVarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarName(self):
            return self.getToken(PHPParser.VarName, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_lambdaFunctionUseVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunctionUseVar" ):
                listener.enterLambdaFunctionUseVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunctionUseVar" ):
                listener.exitLambdaFunctionUseVar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaFunctionUseVar" ):
                return visitor.visitLambdaFunctionUseVar(self)
            else:
                return visitor.visitChildren(self)




    def lambdaFunctionUseVar(self):

        localctx = PHPParser.LambdaFunctionUseVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_lambdaFunctionUseVar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PHPParser.Ampersand:
                self.state = 1321
                self.match(PHPParser.Ampersand)


            self.state = 1324
            self.match(PHPParser.VarName)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedStaticTypeRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PHPParser.QualifiedNamespaceNameContext,0)


        def genericDynamicArgs(self):
            return self.getTypedRuleContext(PHPParser.GenericDynamicArgsContext,0)


        def Static(self):
            return self.getToken(PHPParser.Static, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_qualifiedStaticTypeRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedStaticTypeRef" ):
                listener.enterQualifiedStaticTypeRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedStaticTypeRef" ):
                listener.exitQualifiedStaticTypeRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedStaticTypeRef" ):
                return visitor.visitQualifiedStaticTypeRef(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedStaticTypeRef(self):

        localctx = PHPParser.QualifiedStaticTypeRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_qualifiedStaticTypeRef)
        self._la = 0 # Token type
        try:
            self.state = 1331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1326
                self.qualifiedNamespaceName()
                self.state = 1328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.Lgeneric:
                    self.state = 1327
                    self.genericDynamicArgs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1330
                self.match(PHPParser.Static)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PHPParser.QualifiedNamespaceNameContext,0)


        def indirectTypeRef(self):
            return self.getTypedRuleContext(PHPParser.IndirectTypeRefContext,0)


        def genericDynamicArgs(self):
            return self.getTypedRuleContext(PHPParser.GenericDynamicArgsContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(PHPParser.PrimitiveTypeContext,0)


        def Static(self):
            return self.getToken(PHPParser.Static, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_typeRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeRef" ):
                listener.enterTypeRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeRef" ):
                listener.exitTypeRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeRef" ):
                return visitor.visitTypeRef(self)
            else:
                return visitor.visitChildren(self)




    def typeRef(self):

        localctx = PHPParser.TypeRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_typeRef)
        try:
            self.state = 1342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1335
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1333
                    self.qualifiedNamespaceName()
                    pass

                elif la_ == 2:
                    self.state = 1334
                    self.indirectTypeRef()
                    pass


                self.state = 1338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 1337
                    self.genericDynamicArgs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1340
                self.primitiveType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1341
                self.match(PHPParser.Static)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndirectTypeRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chainBase(self):
            return self.getTypedRuleContext(PHPParser.ChainBaseContext,0)


        def keyedFieldName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.KeyedFieldNameContext)
            else:
                return self.getTypedRuleContext(PHPParser.KeyedFieldNameContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_indirectTypeRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndirectTypeRef" ):
                listener.enterIndirectTypeRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndirectTypeRef" ):
                listener.exitIndirectTypeRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndirectTypeRef" ):
                return visitor.visitIndirectTypeRef(self)
            else:
                return visitor.visitChildren(self)




    def indirectTypeRef(self):

        localctx = PHPParser.IndirectTypeRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_indirectTypeRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self.chainBase()
            self.state = 1349
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1345
                    self.match(PHPParser.ObjectOperator)
                    self.state = 1346
                    self.keyedFieldName() 
                self.state = 1351
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedNamespaceNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespaceNameList(self):
            return self.getTypedRuleContext(PHPParser.NamespaceNameListContext,0)


        def Namespace(self):
            return self.getToken(PHPParser.Namespace, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_qualifiedNamespaceName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNamespaceName" ):
                listener.enterQualifiedNamespaceName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNamespaceName" ):
                listener.exitQualifiedNamespaceName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedNamespaceName" ):
                return visitor.visitQualifiedNamespaceName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedNamespaceName(self):

        localctx = PHPParser.QualifiedNamespaceNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_qualifiedNamespaceName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1352
                self.match(PHPParser.Namespace)


            self.state = 1356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PHPParser.NamespaceSeparator:
                self.state = 1355
                self.match(PHPParser.NamespaceSeparator)


            self.state = 1358
            self.namespaceNameList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespaceNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(PHPParser.IdentifierContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_namespaceNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceNameList" ):
                listener.enterNamespaceNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceNameList" ):
                listener.exitNamespaceNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespaceNameList" ):
                return visitor.visitNamespaceNameList(self)
            else:
                return visitor.visitChildren(self)




    def namespaceNameList(self):

        localctx = PHPParser.NamespaceNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_namespaceNameList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1360
            self.identifier()
            self.state = 1365
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1361
                    self.match(PHPParser.NamespaceSeparator)
                    self.state = 1362
                    self.identifier() 
                self.state = 1367
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedNamespaceNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.QualifiedNamespaceNameContext)
            else:
                return self.getTypedRuleContext(PHPParser.QualifiedNamespaceNameContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_qualifiedNamespaceNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNamespaceNameList" ):
                listener.enterQualifiedNamespaceNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNamespaceNameList" ):
                listener.exitQualifiedNamespaceNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedNamespaceNameList" ):
                return visitor.visitQualifiedNamespaceNameList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedNamespaceNameList(self):

        localctx = PHPParser.QualifiedNamespaceNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_qualifiedNamespaceNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            self.qualifiedNamespaceName()
            self.state = 1373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PHPParser.Comma:
                self.state = 1369
                self.match(PHPParser.Comma)
                self.state = 1370
                self.qualifiedNamespaceName()
                self.state = 1375
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actualArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.ActualArgumentContext)
            else:
                return self.getTypedRuleContext(PHPParser.ActualArgumentContext,i)


        def yieldExpression(self):
            return self.getTypedRuleContext(PHPParser.YieldExpressionContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = PHPParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self.match(PHPParser.OpenRoundBracket)
            self.state = 1386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1377
                self.actualArgument()
                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PHPParser.Comma:
                    self.state = 1378
                    self.match(PHPParser.Comma)
                    self.state = 1379
                    self.actualArgument()
                    self.state = 1384
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)


            elif la_ == 2:
                self.state = 1385
                self.yieldExpression()


            self.state = 1388
            self.match(PHPParser.CloseRoundBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActualArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)


        def chain(self):
            return self.getTypedRuleContext(PHPParser.ChainContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_actualArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActualArgument" ):
                listener.enterActualArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActualArgument" ):
                listener.exitActualArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActualArgument" ):
                return visitor.visitActualArgument(self)
            else:
                return visitor.visitChildren(self)




    def actualArgument(self):

        localctx = PHPParser.ActualArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_actualArgument)
        self._la = 0 # Token type
        try:
            self.state = 1396
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.Abstract, PHPParser.Array, PHPParser.As, PHPParser.BinaryCast, PHPParser.BoolType, PHPParser.BooleanConstant, PHPParser.Break, PHPParser.Callable, PHPParser.Case, PHPParser.Catch, PHPParser.Class, PHPParser.Clone, PHPParser.Const, PHPParser.Continue, PHPParser.Declare, PHPParser.Default, PHPParser.Do, PHPParser.DoubleCast, PHPParser.DoubleType, PHPParser.Echo, PHPParser.Else, PHPParser.ElseIf, PHPParser.Empty, PHPParser.EndDeclare, PHPParser.EndFor, PHPParser.EndForeach, PHPParser.EndIf, PHPParser.EndSwitch, PHPParser.EndWhile, PHPParser.Eval, PHPParser.Exit, PHPParser.Extends, PHPParser.Final, PHPParser.Finally, PHPParser.FloatCast, PHPParser.For, PHPParser.Foreach, PHPParser.Function, PHPParser.Global, PHPParser.Goto, PHPParser.If, PHPParser.Implements, PHPParser.Import, PHPParser.Include, PHPParser.IncludeOnce, PHPParser.InstanceOf, PHPParser.InsteadOf, PHPParser.Int8Cast, PHPParser.Int16Cast, PHPParser.Int64Type, PHPParser.IntType, PHPParser.Interface, PHPParser.IsSet, PHPParser.List, PHPParser.LogicalAnd, PHPParser.LogicalOr, PHPParser.LogicalXor, PHPParser.Namespace, PHPParser.New, PHPParser.Null, PHPParser.ObjectType, PHPParser.Parent_, PHPParser.Partial, PHPParser.Print, PHPParser.Private, PHPParser.Protected, PHPParser.Public, PHPParser.Require, PHPParser.RequireOnce, PHPParser.Resource, PHPParser.Return, PHPParser.Static, PHPParser.StringType, PHPParser.Switch, PHPParser.Throw, PHPParser.Trait, PHPParser.Try, PHPParser.Typeof, PHPParser.UintCast, PHPParser.UnicodeCast, PHPParser.Unset, PHPParser.Use, PHPParser.Var, PHPParser.While, PHPParser.Yield, PHPParser.Get, PHPParser.Set, PHPParser.Call, PHPParser.CallStatic, PHPParser.Constructor, PHPParser.Destruct, PHPParser.Wakeup, PHPParser.Sleep, PHPParser.Autoload, PHPParser.IsSet__, PHPParser.Unset__, PHPParser.ToString__, PHPParser.Invoke, PHPParser.SetState, PHPParser.Clone__, PHPParser.DebugInfo, PHPParser.Namespace__, PHPParser.Class__, PHPParser.Traic__, PHPParser.Function__, PHPParser.Method__, PHPParser.Line__, PHPParser.File__, PHPParser.Dir__, PHPParser.Inc, PHPParser.Dec, PHPParser.NamespaceSeparator, PHPParser.Ellipsis, PHPParser.Bang, PHPParser.Plus, PHPParser.Minus, PHPParser.Tilde, PHPParser.SuppressWarnings, PHPParser.Dollar, PHPParser.OpenRoundBracket, PHPParser.OpenSquareBracket, PHPParser.VarName, PHPParser.Label, PHPParser.Octal, PHPParser.Decimal, PHPParser.Real, PHPParser.Hex, PHPParser.Binary, PHPParser.BackQuoteString, PHPParser.SingleQuoteString, PHPParser.DoubleQuote, PHPParser.StartNowDoc, PHPParser.StartHereDoc]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PHPParser.Ellipsis:
                    self.state = 1390
                    self.match(PHPParser.Ellipsis)


                self.state = 1393
                self.expression(0)
                pass
            elif token in [PHPParser.Ampersand]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1394
                self.match(PHPParser.Ampersand)
                self.state = 1395
                self.chain()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantInititalizerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(PHPParser.ConstantContext,0)


        def string(self):
            return self.getTypedRuleContext(PHPParser.StringContext,0)


        def Array(self):
            return self.getToken(PHPParser.Array, 0)

        def constantArrayItemList(self):
            return self.getTypedRuleContext(PHPParser.ConstantArrayItemListContext,0)


        def constantInititalizer(self):
            return self.getTypedRuleContext(PHPParser.ConstantInititalizerContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_constantInititalizer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantInititalizer" ):
                listener.enterConstantInititalizer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantInititalizer" ):
                listener.exitConstantInititalizer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantInititalizer" ):
                return visitor.visitConstantInititalizer(self)
            else:
                return visitor.visitChildren(self)




    def constantInititalizer(self):

        localctx = PHPParser.ConstantInititalizerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_constantInititalizer)
        self._la = 0 # Token type
        try:
            self.state = 1419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1398
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1399
                self.string()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1400
                self.match(PHPParser.Array)
                self.state = 1401
                self.match(PHPParser.OpenRoundBracket)
                self.state = 1406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)))) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)) | (1 << (PHPParser.Octal - 179)) | (1 << (PHPParser.Decimal - 179)) | (1 << (PHPParser.Real - 179)) | (1 << (PHPParser.Hex - 179)) | (1 << (PHPParser.Binary - 179)) | (1 << (PHPParser.SingleQuoteString - 179)) | (1 << (PHPParser.DoubleQuote - 179)) | (1 << (PHPParser.StartNowDoc - 179)) | (1 << (PHPParser.StartHereDoc - 179)))) != 0):
                    self.state = 1402
                    self.constantArrayItemList()
                    self.state = 1404
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PHPParser.Comma:
                        self.state = 1403
                        self.match(PHPParser.Comma)




                self.state = 1408
                self.match(PHPParser.CloseRoundBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1409
                self.match(PHPParser.OpenSquareBracket)
                self.state = 1414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)))) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)) | (1 << (PHPParser.Octal - 179)) | (1 << (PHPParser.Decimal - 179)) | (1 << (PHPParser.Real - 179)) | (1 << (PHPParser.Hex - 179)) | (1 << (PHPParser.Binary - 179)) | (1 << (PHPParser.SingleQuoteString - 179)) | (1 << (PHPParser.DoubleQuote - 179)) | (1 << (PHPParser.StartNowDoc - 179)) | (1 << (PHPParser.StartHereDoc - 179)))) != 0):
                    self.state = 1410
                    self.constantArrayItemList()
                    self.state = 1412
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PHPParser.Comma:
                        self.state = 1411
                        self.match(PHPParser.Comma)




                self.state = 1416
                self.match(PHPParser.CloseSquareBracket)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1417
                _la = self._input.LA(1)
                if not(_la==PHPParser.Plus or _la==PHPParser.Minus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1418
                self.constantInititalizer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantArrayItemListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantArrayItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.ConstantArrayItemContext)
            else:
                return self.getTypedRuleContext(PHPParser.ConstantArrayItemContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_constantArrayItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantArrayItemList" ):
                listener.enterConstantArrayItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantArrayItemList" ):
                listener.exitConstantArrayItemList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantArrayItemList" ):
                return visitor.visitConstantArrayItemList(self)
            else:
                return visitor.visitChildren(self)




    def constantArrayItemList(self):

        localctx = PHPParser.ConstantArrayItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_constantArrayItemList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            self.constantArrayItem()
            self.state = 1426
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1422
                    self.match(PHPParser.Comma)
                    self.state = 1423
                    self.constantArrayItem() 
                self.state = 1428
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantArrayItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantInititalizer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.ConstantInititalizerContext)
            else:
                return self.getTypedRuleContext(PHPParser.ConstantInititalizerContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_constantArrayItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantArrayItem" ):
                listener.enterConstantArrayItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantArrayItem" ):
                listener.exitConstantArrayItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantArrayItem" ):
                return visitor.visitConstantArrayItem(self)
            else:
                return visitor.visitChildren(self)




    def constantArrayItem(self):

        localctx = PHPParser.ConstantArrayItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_constantArrayItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1429
            self.constantInititalizer()
            self.state = 1432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PHPParser.DoubleArrow:
                self.state = 1430
                self.match(PHPParser.DoubleArrow)
                self.state = 1431
                self.constantInititalizer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Null(self):
            return self.getToken(PHPParser.Null, 0)

        def literalConstant(self):
            return self.getTypedRuleContext(PHPParser.LiteralConstantContext,0)


        def magicConstant(self):
            return self.getTypedRuleContext(PHPParser.MagicConstantContext,0)


        def classConstant(self):
            return self.getTypedRuleContext(PHPParser.ClassConstantContext,0)


        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PHPParser.QualifiedNamespaceNameContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = PHPParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_constant)
        try:
            self.state = 1439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1434
                self.match(PHPParser.Null)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1435
                self.literalConstant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1436
                self.magicConstant()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1437
                self.classConstant()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1438
                self.qualifiedNamespaceName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(PHPParser.Real, 0)

        def BooleanConstant(self):
            return self.getToken(PHPParser.BooleanConstant, 0)

        def numericConstant(self):
            return self.getTypedRuleContext(PHPParser.NumericConstantContext,0)


        def stringConstant(self):
            return self.getTypedRuleContext(PHPParser.StringConstantContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_literalConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralConstant" ):
                listener.enterLiteralConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralConstant" ):
                listener.exitLiteralConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralConstant" ):
                return visitor.visitLiteralConstant(self)
            else:
                return visitor.visitChildren(self)




    def literalConstant(self):

        localctx = PHPParser.LiteralConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_literalConstant)
        try:
            self.state = 1445
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.Real]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1441
                self.match(PHPParser.Real)
                pass
            elif token in [PHPParser.BooleanConstant]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1442
                self.match(PHPParser.BooleanConstant)
                pass
            elif token in [PHPParser.Octal, PHPParser.Decimal, PHPParser.Hex, PHPParser.Binary]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1443
                self.numericConstant()
                pass
            elif token in [PHPParser.Label]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1444
                self.stringConstant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Octal(self):
            return self.getToken(PHPParser.Octal, 0)

        def Decimal(self):
            return self.getToken(PHPParser.Decimal, 0)

        def Hex(self):
            return self.getToken(PHPParser.Hex, 0)

        def Binary(self):
            return self.getToken(PHPParser.Binary, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_numericConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericConstant" ):
                listener.enterNumericConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericConstant" ):
                listener.exitNumericConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericConstant" ):
                return visitor.visitNumericConstant(self)
            else:
                return visitor.visitChildren(self)




    def numericConstant(self):

        localctx = PHPParser.NumericConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_numericConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            _la = self._input.LA(1)
            if not(((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (PHPParser.Octal - 211)) | (1 << (PHPParser.Decimal - 211)) | (1 << (PHPParser.Hex - 211)) | (1 << (PHPParser.Binary - 211)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(PHPParser.Class, 0)

        def Parent_(self):
            return self.getToken(PHPParser.Parent_, 0)

        def identifier(self):
            return self.getTypedRuleContext(PHPParser.IdentifierContext,0)


        def Constructor(self):
            return self.getToken(PHPParser.Constructor, 0)

        def Get(self):
            return self.getToken(PHPParser.Get, 0)

        def Set(self):
            return self.getToken(PHPParser.Set, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PHPParser.QualifiedStaticTypeRefContext,0)


        def keyedVariable(self):
            return self.getTypedRuleContext(PHPParser.KeyedVariableContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_classConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassConstant" ):
                listener.enterClassConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassConstant" ):
                listener.exitClassConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassConstant" ):
                return visitor.visitClassConstant(self)
            else:
                return visitor.visitChildren(self)




    def classConstant(self):

        localctx = PHPParser.ClassConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_classConstant)
        self._la = 0 # Token type
        try:
            self.state = 1464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1449
                _la = self._input.LA(1)
                if not(_la==PHPParser.Class or _la==PHPParser.Parent_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1450
                self.match(PHPParser.DoubleColon)
                self.state = 1455
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                if la_ == 1:
                    self.state = 1451
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 1452
                    self.match(PHPParser.Constructor)
                    pass

                elif la_ == 3:
                    self.state = 1453
                    self.match(PHPParser.Get)
                    pass

                elif la_ == 4:
                    self.state = 1454
                    self.match(PHPParser.Set)
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1459
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PHPParser.Abstract, PHPParser.Array, PHPParser.As, PHPParser.BinaryCast, PHPParser.BoolType, PHPParser.BooleanConstant, PHPParser.Break, PHPParser.Callable, PHPParser.Case, PHPParser.Catch, PHPParser.Class, PHPParser.Clone, PHPParser.Const, PHPParser.Continue, PHPParser.Declare, PHPParser.Default, PHPParser.Do, PHPParser.DoubleCast, PHPParser.DoubleType, PHPParser.Echo, PHPParser.Else, PHPParser.ElseIf, PHPParser.Empty, PHPParser.EndDeclare, PHPParser.EndFor, PHPParser.EndForeach, PHPParser.EndIf, PHPParser.EndSwitch, PHPParser.EndWhile, PHPParser.Eval, PHPParser.Exit, PHPParser.Extends, PHPParser.Final, PHPParser.Finally, PHPParser.FloatCast, PHPParser.For, PHPParser.Foreach, PHPParser.Function, PHPParser.Global, PHPParser.Goto, PHPParser.If, PHPParser.Implements, PHPParser.Import, PHPParser.Include, PHPParser.IncludeOnce, PHPParser.InstanceOf, PHPParser.InsteadOf, PHPParser.Int8Cast, PHPParser.Int16Cast, PHPParser.Int64Type, PHPParser.IntType, PHPParser.Interface, PHPParser.IsSet, PHPParser.List, PHPParser.LogicalAnd, PHPParser.LogicalOr, PHPParser.LogicalXor, PHPParser.Namespace, PHPParser.New, PHPParser.Null, PHPParser.ObjectType, PHPParser.Parent_, PHPParser.Partial, PHPParser.Print, PHPParser.Private, PHPParser.Protected, PHPParser.Public, PHPParser.Require, PHPParser.RequireOnce, PHPParser.Resource, PHPParser.Return, PHPParser.Static, PHPParser.StringType, PHPParser.Switch, PHPParser.Throw, PHPParser.Trait, PHPParser.Try, PHPParser.Typeof, PHPParser.UintCast, PHPParser.UnicodeCast, PHPParser.Unset, PHPParser.Use, PHPParser.Var, PHPParser.While, PHPParser.Yield, PHPParser.Get, PHPParser.Set, PHPParser.Call, PHPParser.CallStatic, PHPParser.Constructor, PHPParser.Destruct, PHPParser.Wakeup, PHPParser.Sleep, PHPParser.Autoload, PHPParser.IsSet__, PHPParser.Unset__, PHPParser.ToString__, PHPParser.Invoke, PHPParser.SetState, PHPParser.Clone__, PHPParser.DebugInfo, PHPParser.Namespace__, PHPParser.Class__, PHPParser.Traic__, PHPParser.Function__, PHPParser.Method__, PHPParser.Line__, PHPParser.File__, PHPParser.Dir__, PHPParser.NamespaceSeparator, PHPParser.Label]:
                    self.state = 1457
                    self.qualifiedStaticTypeRef()
                    pass
                elif token in [PHPParser.Dollar, PHPParser.VarName]:
                    self.state = 1458
                    self.keyedVariable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1461
                self.match(PHPParser.DoubleColon)
                self.state = 1462
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Label(self):
            return self.getToken(PHPParser.Label, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_stringConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringConstant" ):
                listener.enterStringConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringConstant" ):
                listener.exitStringConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringConstant" ):
                return visitor.visitStringConstant(self)
            else:
                return visitor.visitChildren(self)




    def stringConstant(self):

        localctx = PHPParser.StringConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_stringConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466
            self.match(PHPParser.Label)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StartHereDoc(self):
            return self.getToken(PHPParser.StartHereDoc, 0)

        def HereDocText(self, i:int=None):
            if i is None:
                return self.getTokens(PHPParser.HereDocText)
            else:
                return self.getToken(PHPParser.HereDocText, i)

        def StartNowDoc(self):
            return self.getToken(PHPParser.StartNowDoc, 0)

        def SingleQuoteString(self):
            return self.getToken(PHPParser.SingleQuoteString, 0)

        def DoubleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(PHPParser.DoubleQuote)
            else:
                return self.getToken(PHPParser.DoubleQuote, i)

        def interpolatedStringPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.InterpolatedStringPartContext)
            else:
                return self.getTypedRuleContext(PHPParser.InterpolatedStringPartContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = PHPParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_string)
        self._la = 0 # Token type
        try:
            self.state = 1489
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.StartHereDoc]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1468
                self.match(PHPParser.StartHereDoc)
                self.state = 1470 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1469
                        self.match(PHPParser.HereDocText)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1472 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

                pass
            elif token in [PHPParser.StartNowDoc]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1474
                self.match(PHPParser.StartNowDoc)
                self.state = 1476 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1475
                        self.match(PHPParser.HereDocText)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1478 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

                pass
            elif token in [PHPParser.SingleQuoteString]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1480
                self.match(PHPParser.SingleQuoteString)
                pass
            elif token in [PHPParser.DoubleQuote]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1481
                self.match(PHPParser.DoubleQuote)
                self.state = 1485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)))) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)) | (1 << (PHPParser.StringPart - 179)))) != 0):
                    self.state = 1482
                    self.interpolatedStringPart()
                    self.state = 1487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1488
                self.match(PHPParser.DoubleQuote)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterpolatedStringPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringPart(self):
            return self.getToken(PHPParser.StringPart, 0)

        def chain(self):
            return self.getTypedRuleContext(PHPParser.ChainContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_interpolatedStringPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolatedStringPart" ):
                listener.enterInterpolatedStringPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolatedStringPart" ):
                listener.exitInterpolatedStringPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterpolatedStringPart" ):
                return visitor.visitInterpolatedStringPart(self)
            else:
                return visitor.visitChildren(self)




    def interpolatedStringPart(self):

        localctx = PHPParser.InterpolatedStringPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_interpolatedStringPart)
        try:
            self.state = 1493
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.StringPart]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1491
                self.match(PHPParser.StringPart)
                pass
            elif token in [PHPParser.Abstract, PHPParser.Array, PHPParser.As, PHPParser.BinaryCast, PHPParser.BoolType, PHPParser.BooleanConstant, PHPParser.Break, PHPParser.Callable, PHPParser.Case, PHPParser.Catch, PHPParser.Class, PHPParser.Clone, PHPParser.Const, PHPParser.Continue, PHPParser.Declare, PHPParser.Default, PHPParser.Do, PHPParser.DoubleCast, PHPParser.DoubleType, PHPParser.Echo, PHPParser.Else, PHPParser.ElseIf, PHPParser.Empty, PHPParser.EndDeclare, PHPParser.EndFor, PHPParser.EndForeach, PHPParser.EndIf, PHPParser.EndSwitch, PHPParser.EndWhile, PHPParser.Eval, PHPParser.Exit, PHPParser.Extends, PHPParser.Final, PHPParser.Finally, PHPParser.FloatCast, PHPParser.For, PHPParser.Foreach, PHPParser.Function, PHPParser.Global, PHPParser.Goto, PHPParser.If, PHPParser.Implements, PHPParser.Import, PHPParser.Include, PHPParser.IncludeOnce, PHPParser.InstanceOf, PHPParser.InsteadOf, PHPParser.Int8Cast, PHPParser.Int16Cast, PHPParser.Int64Type, PHPParser.IntType, PHPParser.Interface, PHPParser.IsSet, PHPParser.List, PHPParser.LogicalAnd, PHPParser.LogicalOr, PHPParser.LogicalXor, PHPParser.Namespace, PHPParser.New, PHPParser.Null, PHPParser.ObjectType, PHPParser.Parent_, PHPParser.Partial, PHPParser.Print, PHPParser.Private, PHPParser.Protected, PHPParser.Public, PHPParser.Require, PHPParser.RequireOnce, PHPParser.Resource, PHPParser.Return, PHPParser.Static, PHPParser.StringType, PHPParser.Switch, PHPParser.Throw, PHPParser.Trait, PHPParser.Try, PHPParser.Typeof, PHPParser.UintCast, PHPParser.UnicodeCast, PHPParser.Unset, PHPParser.Use, PHPParser.Var, PHPParser.While, PHPParser.Yield, PHPParser.Get, PHPParser.Set, PHPParser.Call, PHPParser.CallStatic, PHPParser.Constructor, PHPParser.Destruct, PHPParser.Wakeup, PHPParser.Sleep, PHPParser.Autoload, PHPParser.IsSet__, PHPParser.Unset__, PHPParser.ToString__, PHPParser.Invoke, PHPParser.SetState, PHPParser.Clone__, PHPParser.DebugInfo, PHPParser.Namespace__, PHPParser.Class__, PHPParser.Traic__, PHPParser.Function__, PHPParser.Method__, PHPParser.Line__, PHPParser.File__, PHPParser.Dir__, PHPParser.NamespaceSeparator, PHPParser.Dollar, PHPParser.OpenRoundBracket, PHPParser.VarName, PHPParser.Label]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1492
                self.chain()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChainListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.ChainContext)
            else:
                return self.getTypedRuleContext(PHPParser.ChainContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_chainList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChainList" ):
                listener.enterChainList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChainList" ):
                listener.exitChainList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChainList" ):
                return visitor.visitChainList(self)
            else:
                return visitor.visitChildren(self)




    def chainList(self):

        localctx = PHPParser.ChainListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_chainList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1495
            self.chain()
            self.state = 1500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PHPParser.Comma:
                self.state = 1496
                self.match(PHPParser.Comma)
                self.state = 1497
                self.chain()
                self.state = 1502
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chainBase(self):
            return self.getTypedRuleContext(PHPParser.ChainBaseContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(PHPParser.FunctionCallContext,0)


        def newExpr(self):
            return self.getTypedRuleContext(PHPParser.NewExprContext,0)


        def memberAccess(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.MemberAccessContext)
            else:
                return self.getTypedRuleContext(PHPParser.MemberAccessContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_chain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChain" ):
                listener.enterChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChain" ):
                listener.exitChain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChain" ):
                return visitor.visitChain(self)
            else:
                return visitor.visitChildren(self)




    def chain(self):

        localctx = PHPParser.ChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_chain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1503
                self.chainBase()
                pass

            elif la_ == 2:
                self.state = 1504
                self.functionCall()
                pass

            elif la_ == 3:
                self.state = 1505
                self.match(PHPParser.OpenRoundBracket)
                self.state = 1506
                self.newExpr()
                self.state = 1507
                self.match(PHPParser.CloseRoundBracket)
                pass


            self.state = 1514
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1511
                    self.memberAccess() 
                self.state = 1516
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberAccessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyedFieldName(self):
            return self.getTypedRuleContext(PHPParser.KeyedFieldNameContext,0)


        def actualArguments(self):
            return self.getTypedRuleContext(PHPParser.ActualArgumentsContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_memberAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccess" ):
                listener.enterMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccess" ):
                listener.exitMemberAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccess" ):
                return visitor.visitMemberAccess(self)
            else:
                return visitor.visitChildren(self)




    def memberAccess(self):

        localctx = PHPParser.MemberAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_memberAccess)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.match(PHPParser.ObjectOperator)
            self.state = 1518
            self.keyedFieldName()
            self.state = 1520
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 1519
                self.actualArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCallName(self):
            return self.getTypedRuleContext(PHPParser.FunctionCallNameContext,0)


        def actualArguments(self):
            return self.getTypedRuleContext(PHPParser.ActualArgumentsContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = PHPParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            self.functionCallName()
            self.state = 1523
            self.actualArguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PHPParser.QualifiedNamespaceNameContext,0)


        def classConstant(self):
            return self.getTypedRuleContext(PHPParser.ClassConstantContext,0)


        def chainBase(self):
            return self.getTypedRuleContext(PHPParser.ChainBaseContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_functionCallName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallName" ):
                listener.enterFunctionCallName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallName" ):
                listener.exitFunctionCallName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallName" ):
                return visitor.visitFunctionCallName(self)
            else:
                return visitor.visitChildren(self)




    def functionCallName(self):

        localctx = PHPParser.FunctionCallNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_functionCallName)
        try:
            self.state = 1528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1525
                self.qualifiedNamespaceName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1526
                self.classConstant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1527
                self.chainBase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActualArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(PHPParser.ArgumentsContext,0)


        def genericDynamicArgs(self):
            return self.getTypedRuleContext(PHPParser.GenericDynamicArgsContext,0)


        def squareCurlyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.SquareCurlyExpressionContext)
            else:
                return self.getTypedRuleContext(PHPParser.SquareCurlyExpressionContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_actualArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActualArguments" ):
                listener.enterActualArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActualArguments" ):
                listener.exitActualArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActualArguments" ):
                return visitor.visitActualArguments(self)
            else:
                return visitor.visitChildren(self)




    def actualArguments(self):

        localctx = PHPParser.ActualArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_actualArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PHPParser.Lgeneric:
                self.state = 1530
                self.genericDynamicArgs()


            self.state = 1533
            self.arguments()
            self.state = 1537
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1534
                    self.squareCurlyExpression() 
                self.state = 1539
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChainBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyedVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.KeyedVariableContext)
            else:
                return self.getTypedRuleContext(PHPParser.KeyedVariableContext,i)


        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PHPParser.QualifiedStaticTypeRefContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_chainBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChainBase" ):
                listener.enterChainBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChainBase" ):
                listener.exitChainBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChainBase" ):
                return visitor.visitChainBase(self)
            else:
                return visitor.visitChildren(self)




    def chainBase(self):

        localctx = PHPParser.ChainBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_chainBase)
        try:
            self.state = 1549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.Dollar, PHPParser.VarName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1540
                self.keyedVariable()
                self.state = 1543
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1541
                    self.match(PHPParser.DoubleColon)
                    self.state = 1542
                    self.keyedVariable()


                pass
            elif token in [PHPParser.Abstract, PHPParser.Array, PHPParser.As, PHPParser.BinaryCast, PHPParser.BoolType, PHPParser.BooleanConstant, PHPParser.Break, PHPParser.Callable, PHPParser.Case, PHPParser.Catch, PHPParser.Class, PHPParser.Clone, PHPParser.Const, PHPParser.Continue, PHPParser.Declare, PHPParser.Default, PHPParser.Do, PHPParser.DoubleCast, PHPParser.DoubleType, PHPParser.Echo, PHPParser.Else, PHPParser.ElseIf, PHPParser.Empty, PHPParser.EndDeclare, PHPParser.EndFor, PHPParser.EndForeach, PHPParser.EndIf, PHPParser.EndSwitch, PHPParser.EndWhile, PHPParser.Eval, PHPParser.Exit, PHPParser.Extends, PHPParser.Final, PHPParser.Finally, PHPParser.FloatCast, PHPParser.For, PHPParser.Foreach, PHPParser.Function, PHPParser.Global, PHPParser.Goto, PHPParser.If, PHPParser.Implements, PHPParser.Import, PHPParser.Include, PHPParser.IncludeOnce, PHPParser.InstanceOf, PHPParser.InsteadOf, PHPParser.Int8Cast, PHPParser.Int16Cast, PHPParser.Int64Type, PHPParser.IntType, PHPParser.Interface, PHPParser.IsSet, PHPParser.List, PHPParser.LogicalAnd, PHPParser.LogicalOr, PHPParser.LogicalXor, PHPParser.Namespace, PHPParser.New, PHPParser.Null, PHPParser.ObjectType, PHPParser.Parent_, PHPParser.Partial, PHPParser.Print, PHPParser.Private, PHPParser.Protected, PHPParser.Public, PHPParser.Require, PHPParser.RequireOnce, PHPParser.Resource, PHPParser.Return, PHPParser.Static, PHPParser.StringType, PHPParser.Switch, PHPParser.Throw, PHPParser.Trait, PHPParser.Try, PHPParser.Typeof, PHPParser.UintCast, PHPParser.UnicodeCast, PHPParser.Unset, PHPParser.Use, PHPParser.Var, PHPParser.While, PHPParser.Yield, PHPParser.Get, PHPParser.Set, PHPParser.Call, PHPParser.CallStatic, PHPParser.Constructor, PHPParser.Destruct, PHPParser.Wakeup, PHPParser.Sleep, PHPParser.Autoload, PHPParser.IsSet__, PHPParser.Unset__, PHPParser.ToString__, PHPParser.Invoke, PHPParser.SetState, PHPParser.Clone__, PHPParser.DebugInfo, PHPParser.Namespace__, PHPParser.Class__, PHPParser.Traic__, PHPParser.Function__, PHPParser.Method__, PHPParser.Line__, PHPParser.File__, PHPParser.Dir__, PHPParser.NamespaceSeparator, PHPParser.Label]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1545
                self.qualifiedStaticTypeRef()
                self.state = 1546
                self.match(PHPParser.DoubleColon)
                self.state = 1547
                self.keyedVariable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeyedFieldNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyedSimpleFieldName(self):
            return self.getTypedRuleContext(PHPParser.KeyedSimpleFieldNameContext,0)


        def keyedVariable(self):
            return self.getTypedRuleContext(PHPParser.KeyedVariableContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_keyedFieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyedFieldName" ):
                listener.enterKeyedFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyedFieldName" ):
                listener.exitKeyedFieldName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyedFieldName" ):
                return visitor.visitKeyedFieldName(self)
            else:
                return visitor.visitChildren(self)




    def keyedFieldName(self):

        localctx = PHPParser.KeyedFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_keyedFieldName)
        try:
            self.state = 1553
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.Abstract, PHPParser.Array, PHPParser.As, PHPParser.BinaryCast, PHPParser.BoolType, PHPParser.BooleanConstant, PHPParser.Break, PHPParser.Callable, PHPParser.Case, PHPParser.Catch, PHPParser.Class, PHPParser.Clone, PHPParser.Const, PHPParser.Continue, PHPParser.Declare, PHPParser.Default, PHPParser.Do, PHPParser.DoubleCast, PHPParser.DoubleType, PHPParser.Echo, PHPParser.Else, PHPParser.ElseIf, PHPParser.Empty, PHPParser.EndDeclare, PHPParser.EndFor, PHPParser.EndForeach, PHPParser.EndIf, PHPParser.EndSwitch, PHPParser.EndWhile, PHPParser.Eval, PHPParser.Exit, PHPParser.Extends, PHPParser.Final, PHPParser.Finally, PHPParser.FloatCast, PHPParser.For, PHPParser.Foreach, PHPParser.Function, PHPParser.Global, PHPParser.Goto, PHPParser.If, PHPParser.Implements, PHPParser.Import, PHPParser.Include, PHPParser.IncludeOnce, PHPParser.InstanceOf, PHPParser.InsteadOf, PHPParser.Int8Cast, PHPParser.Int16Cast, PHPParser.Int64Type, PHPParser.IntType, PHPParser.Interface, PHPParser.IsSet, PHPParser.List, PHPParser.LogicalAnd, PHPParser.LogicalOr, PHPParser.LogicalXor, PHPParser.Namespace, PHPParser.New, PHPParser.Null, PHPParser.ObjectType, PHPParser.Parent_, PHPParser.Partial, PHPParser.Print, PHPParser.Private, PHPParser.Protected, PHPParser.Public, PHPParser.Require, PHPParser.RequireOnce, PHPParser.Resource, PHPParser.Return, PHPParser.Static, PHPParser.StringType, PHPParser.Switch, PHPParser.Throw, PHPParser.Trait, PHPParser.Try, PHPParser.Typeof, PHPParser.UintCast, PHPParser.UnicodeCast, PHPParser.Unset, PHPParser.Use, PHPParser.Var, PHPParser.While, PHPParser.Yield, PHPParser.Get, PHPParser.Set, PHPParser.Call, PHPParser.CallStatic, PHPParser.Constructor, PHPParser.Destruct, PHPParser.Wakeup, PHPParser.Sleep, PHPParser.Autoload, PHPParser.IsSet__, PHPParser.Unset__, PHPParser.ToString__, PHPParser.Invoke, PHPParser.SetState, PHPParser.Clone__, PHPParser.DebugInfo, PHPParser.Namespace__, PHPParser.Class__, PHPParser.Traic__, PHPParser.Function__, PHPParser.Method__, PHPParser.Line__, PHPParser.File__, PHPParser.Dir__, PHPParser.OpenCurlyBracket, PHPParser.Label]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1551
                self.keyedSimpleFieldName()
                pass
            elif token in [PHPParser.Dollar, PHPParser.VarName]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1552
                self.keyedVariable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeyedSimpleFieldNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PHPParser.IdentifierContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PHPParser.OpenCurlyBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)


        def squareCurlyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.SquareCurlyExpressionContext)
            else:
                return self.getTypedRuleContext(PHPParser.SquareCurlyExpressionContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_keyedSimpleFieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyedSimpleFieldName" ):
                listener.enterKeyedSimpleFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyedSimpleFieldName" ):
                listener.exitKeyedSimpleFieldName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyedSimpleFieldName" ):
                return visitor.visitKeyedSimpleFieldName(self)
            else:
                return visitor.visitChildren(self)




    def keyedSimpleFieldName(self):

        localctx = PHPParser.KeyedSimpleFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_keyedSimpleFieldName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1560
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.Abstract, PHPParser.Array, PHPParser.As, PHPParser.BinaryCast, PHPParser.BoolType, PHPParser.BooleanConstant, PHPParser.Break, PHPParser.Callable, PHPParser.Case, PHPParser.Catch, PHPParser.Class, PHPParser.Clone, PHPParser.Const, PHPParser.Continue, PHPParser.Declare, PHPParser.Default, PHPParser.Do, PHPParser.DoubleCast, PHPParser.DoubleType, PHPParser.Echo, PHPParser.Else, PHPParser.ElseIf, PHPParser.Empty, PHPParser.EndDeclare, PHPParser.EndFor, PHPParser.EndForeach, PHPParser.EndIf, PHPParser.EndSwitch, PHPParser.EndWhile, PHPParser.Eval, PHPParser.Exit, PHPParser.Extends, PHPParser.Final, PHPParser.Finally, PHPParser.FloatCast, PHPParser.For, PHPParser.Foreach, PHPParser.Function, PHPParser.Global, PHPParser.Goto, PHPParser.If, PHPParser.Implements, PHPParser.Import, PHPParser.Include, PHPParser.IncludeOnce, PHPParser.InstanceOf, PHPParser.InsteadOf, PHPParser.Int8Cast, PHPParser.Int16Cast, PHPParser.Int64Type, PHPParser.IntType, PHPParser.Interface, PHPParser.IsSet, PHPParser.List, PHPParser.LogicalAnd, PHPParser.LogicalOr, PHPParser.LogicalXor, PHPParser.Namespace, PHPParser.New, PHPParser.Null, PHPParser.ObjectType, PHPParser.Parent_, PHPParser.Partial, PHPParser.Print, PHPParser.Private, PHPParser.Protected, PHPParser.Public, PHPParser.Require, PHPParser.RequireOnce, PHPParser.Resource, PHPParser.Return, PHPParser.Static, PHPParser.StringType, PHPParser.Switch, PHPParser.Throw, PHPParser.Trait, PHPParser.Try, PHPParser.Typeof, PHPParser.UintCast, PHPParser.UnicodeCast, PHPParser.Unset, PHPParser.Use, PHPParser.Var, PHPParser.While, PHPParser.Yield, PHPParser.Get, PHPParser.Set, PHPParser.Call, PHPParser.CallStatic, PHPParser.Constructor, PHPParser.Destruct, PHPParser.Wakeup, PHPParser.Sleep, PHPParser.Autoload, PHPParser.IsSet__, PHPParser.Unset__, PHPParser.ToString__, PHPParser.Invoke, PHPParser.SetState, PHPParser.Clone__, PHPParser.DebugInfo, PHPParser.Namespace__, PHPParser.Class__, PHPParser.Traic__, PHPParser.Function__, PHPParser.Method__, PHPParser.Line__, PHPParser.File__, PHPParser.Dir__, PHPParser.Label]:
                self.state = 1555
                self.identifier()
                pass
            elif token in [PHPParser.OpenCurlyBracket]:
                self.state = 1556
                self.match(PHPParser.OpenCurlyBracket)
                self.state = 1557
                self.expression(0)
                self.state = 1558
                self.match(PHPParser.CloseCurlyBracket)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1565
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1562
                    self.squareCurlyExpression() 
                self.state = 1567
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeyedVariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarName(self):
            return self.getToken(PHPParser.VarName, 0)

        def Dollar(self, i:int=None):
            if i is None:
                return self.getTokens(PHPParser.Dollar)
            else:
                return self.getToken(PHPParser.Dollar, i)

        def OpenCurlyBracket(self):
            return self.getToken(PHPParser.OpenCurlyBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)


        def squareCurlyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.SquareCurlyExpressionContext)
            else:
                return self.getTypedRuleContext(PHPParser.SquareCurlyExpressionContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_keyedVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyedVariable" ):
                listener.enterKeyedVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyedVariable" ):
                listener.exitKeyedVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyedVariable" ):
                return visitor.visitKeyedVariable(self)
            else:
                return visitor.visitChildren(self)




    def keyedVariable(self):

        localctx = PHPParser.KeyedVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_keyedVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1571
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,181,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1568
                    self.match(PHPParser.Dollar) 
                self.state = 1573
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,181,self._ctx)

            self.state = 1580
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.VarName]:
                self.state = 1574
                self.match(PHPParser.VarName)
                pass
            elif token in [PHPParser.Dollar]:
                self.state = 1575
                self.match(PHPParser.Dollar)
                self.state = 1576
                self.match(PHPParser.OpenCurlyBracket)
                self.state = 1577
                self.expression(0)
                self.state = 1578
                self.match(PHPParser.CloseCurlyBracket)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1585
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,183,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1582
                    self.squareCurlyExpression() 
                self.state = 1587
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,183,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SquareCurlyExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PHPParser.ExpressionContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PHPParser.OpenCurlyBracket, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_squareCurlyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSquareCurlyExpression" ):
                listener.enterSquareCurlyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSquareCurlyExpression" ):
                listener.exitSquareCurlyExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSquareCurlyExpression" ):
                return visitor.visitSquareCurlyExpression(self)
            else:
                return visitor.visitChildren(self)




    def squareCurlyExpression(self):

        localctx = PHPParser.SquareCurlyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_squareCurlyExpression)
        self._la = 0 # Token type
        try:
            self.state = 1597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PHPParser.OpenSquareBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1588
                self.match(PHPParser.OpenSquareBracket)
                self.state = 1590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)) | (1 << (PHPParser.Inc - 104)) | (1 << (PHPParser.Dec - 104)))) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)) | (1 << (PHPParser.Octal - 179)) | (1 << (PHPParser.Decimal - 179)) | (1 << (PHPParser.Real - 179)) | (1 << (PHPParser.Hex - 179)) | (1 << (PHPParser.Binary - 179)) | (1 << (PHPParser.BackQuoteString - 179)) | (1 << (PHPParser.SingleQuoteString - 179)) | (1 << (PHPParser.DoubleQuote - 179)) | (1 << (PHPParser.StartNowDoc - 179)) | (1 << (PHPParser.StartHereDoc - 179)))) != 0):
                    self.state = 1589
                    self.expression(0)


                self.state = 1592
                self.match(PHPParser.CloseSquareBracket)
                pass
            elif token in [PHPParser.OpenCurlyBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1593
                self.match(PHPParser.OpenCurlyBracket)
                self.state = 1594
                self.expression(0)
                self.state = 1595
                self.match(PHPParser.CloseCurlyBracket)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentListElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PHPParser.AssignmentListElementContext)
            else:
                return self.getTypedRuleContext(PHPParser.AssignmentListElementContext,i)


        def getRuleIndex(self):
            return PHPParser.RULE_assignmentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentList" ):
                listener.enterAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentList" ):
                listener.exitAssignmentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentList" ):
                return visitor.visitAssignmentList(self)
            else:
                return visitor.visitChildren(self)




    def assignmentList(self):

        localctx = PHPParser.AssignmentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_assignmentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)))) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) != 0):
                self.state = 1599
                self.assignmentListElement()


            self.state = 1608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PHPParser.Comma:
                self.state = 1602
                self.match(PHPParser.Comma)
                self.state = 1604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)))) != 0) or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) != 0):
                    self.state = 1603
                    self.assignmentListElement()


                self.state = 1610
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentListElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chain(self):
            return self.getTypedRuleContext(PHPParser.ChainContext,0)


        def List(self):
            return self.getToken(PHPParser.List, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(PHPParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return PHPParser.RULE_assignmentListElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentListElement" ):
                listener.enterAssignmentListElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentListElement" ):
                listener.exitAssignmentListElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentListElement" ):
                return visitor.visitAssignmentListElement(self)
            else:
                return visitor.visitChildren(self)




    def assignmentListElement(self):

        localctx = PHPParser.AssignmentListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_assignmentListElement)
        try:
            self.state = 1617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1611
                self.chain()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1612
                self.match(PHPParser.List)
                self.state = 1613
                self.match(PHPParser.OpenRoundBracket)
                self.state = 1614
                self.assignmentList()
                self.state = 1615
                self.match(PHPParser.CloseRoundBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abstract(self):
            return self.getToken(PHPParser.Abstract, 0)

        def Final(self):
            return self.getToken(PHPParser.Final, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier" ):
                return visitor.visitModifier(self)
            else:
                return visitor.visitChildren(self)




    def modifier(self):

        localctx = PHPParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1619
            _la = self._input.LA(1)
            if not(_la==PHPParser.Abstract or _la==PHPParser.Final):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Label(self):
            return self.getToken(PHPParser.Label, 0)

        def Abstract(self):
            return self.getToken(PHPParser.Abstract, 0)

        def Array(self):
            return self.getToken(PHPParser.Array, 0)

        def As(self):
            return self.getToken(PHPParser.As, 0)

        def BinaryCast(self):
            return self.getToken(PHPParser.BinaryCast, 0)

        def BoolType(self):
            return self.getToken(PHPParser.BoolType, 0)

        def BooleanConstant(self):
            return self.getToken(PHPParser.BooleanConstant, 0)

        def Break(self):
            return self.getToken(PHPParser.Break, 0)

        def Callable(self):
            return self.getToken(PHPParser.Callable, 0)

        def Case(self):
            return self.getToken(PHPParser.Case, 0)

        def Catch(self):
            return self.getToken(PHPParser.Catch, 0)

        def Class(self):
            return self.getToken(PHPParser.Class, 0)

        def Clone(self):
            return self.getToken(PHPParser.Clone, 0)

        def Const(self):
            return self.getToken(PHPParser.Const, 0)

        def Continue(self):
            return self.getToken(PHPParser.Continue, 0)

        def Declare(self):
            return self.getToken(PHPParser.Declare, 0)

        def Default(self):
            return self.getToken(PHPParser.Default, 0)

        def Do(self):
            return self.getToken(PHPParser.Do, 0)

        def DoubleCast(self):
            return self.getToken(PHPParser.DoubleCast, 0)

        def DoubleType(self):
            return self.getToken(PHPParser.DoubleType, 0)

        def Echo(self):
            return self.getToken(PHPParser.Echo, 0)

        def Else(self):
            return self.getToken(PHPParser.Else, 0)

        def ElseIf(self):
            return self.getToken(PHPParser.ElseIf, 0)

        def Empty(self):
            return self.getToken(PHPParser.Empty, 0)

        def EndDeclare(self):
            return self.getToken(PHPParser.EndDeclare, 0)

        def EndFor(self):
            return self.getToken(PHPParser.EndFor, 0)

        def EndForeach(self):
            return self.getToken(PHPParser.EndForeach, 0)

        def EndIf(self):
            return self.getToken(PHPParser.EndIf, 0)

        def EndSwitch(self):
            return self.getToken(PHPParser.EndSwitch, 0)

        def EndWhile(self):
            return self.getToken(PHPParser.EndWhile, 0)

        def Eval(self):
            return self.getToken(PHPParser.Eval, 0)

        def Exit(self):
            return self.getToken(PHPParser.Exit, 0)

        def Extends(self):
            return self.getToken(PHPParser.Extends, 0)

        def Final(self):
            return self.getToken(PHPParser.Final, 0)

        def Finally(self):
            return self.getToken(PHPParser.Finally, 0)

        def FloatCast(self):
            return self.getToken(PHPParser.FloatCast, 0)

        def For(self):
            return self.getToken(PHPParser.For, 0)

        def Foreach(self):
            return self.getToken(PHPParser.Foreach, 0)

        def Function(self):
            return self.getToken(PHPParser.Function, 0)

        def Global(self):
            return self.getToken(PHPParser.Global, 0)

        def Goto(self):
            return self.getToken(PHPParser.Goto, 0)

        def If(self):
            return self.getToken(PHPParser.If, 0)

        def Implements(self):
            return self.getToken(PHPParser.Implements, 0)

        def Import(self):
            return self.getToken(PHPParser.Import, 0)

        def Include(self):
            return self.getToken(PHPParser.Include, 0)

        def IncludeOnce(self):
            return self.getToken(PHPParser.IncludeOnce, 0)

        def InstanceOf(self):
            return self.getToken(PHPParser.InstanceOf, 0)

        def InsteadOf(self):
            return self.getToken(PHPParser.InsteadOf, 0)

        def Int16Cast(self):
            return self.getToken(PHPParser.Int16Cast, 0)

        def Int64Type(self):
            return self.getToken(PHPParser.Int64Type, 0)

        def Int8Cast(self):
            return self.getToken(PHPParser.Int8Cast, 0)

        def Interface(self):
            return self.getToken(PHPParser.Interface, 0)

        def IntType(self):
            return self.getToken(PHPParser.IntType, 0)

        def IsSet(self):
            return self.getToken(PHPParser.IsSet, 0)

        def List(self):
            return self.getToken(PHPParser.List, 0)

        def LogicalAnd(self):
            return self.getToken(PHPParser.LogicalAnd, 0)

        def LogicalOr(self):
            return self.getToken(PHPParser.LogicalOr, 0)

        def LogicalXor(self):
            return self.getToken(PHPParser.LogicalXor, 0)

        def Namespace(self):
            return self.getToken(PHPParser.Namespace, 0)

        def New(self):
            return self.getToken(PHPParser.New, 0)

        def Null(self):
            return self.getToken(PHPParser.Null, 0)

        def ObjectType(self):
            return self.getToken(PHPParser.ObjectType, 0)

        def Parent_(self):
            return self.getToken(PHPParser.Parent_, 0)

        def Partial(self):
            return self.getToken(PHPParser.Partial, 0)

        def Print(self):
            return self.getToken(PHPParser.Print, 0)

        def Private(self):
            return self.getToken(PHPParser.Private, 0)

        def Protected(self):
            return self.getToken(PHPParser.Protected, 0)

        def Public(self):
            return self.getToken(PHPParser.Public, 0)

        def Require(self):
            return self.getToken(PHPParser.Require, 0)

        def RequireOnce(self):
            return self.getToken(PHPParser.RequireOnce, 0)

        def Resource(self):
            return self.getToken(PHPParser.Resource, 0)

        def Return(self):
            return self.getToken(PHPParser.Return, 0)

        def Static(self):
            return self.getToken(PHPParser.Static, 0)

        def StringType(self):
            return self.getToken(PHPParser.StringType, 0)

        def Switch(self):
            return self.getToken(PHPParser.Switch, 0)

        def Throw(self):
            return self.getToken(PHPParser.Throw, 0)

        def Trait(self):
            return self.getToken(PHPParser.Trait, 0)

        def Try(self):
            return self.getToken(PHPParser.Try, 0)

        def Typeof(self):
            return self.getToken(PHPParser.Typeof, 0)

        def UintCast(self):
            return self.getToken(PHPParser.UintCast, 0)

        def UnicodeCast(self):
            return self.getToken(PHPParser.UnicodeCast, 0)

        def Unset(self):
            return self.getToken(PHPParser.Unset, 0)

        def Use(self):
            return self.getToken(PHPParser.Use, 0)

        def Var(self):
            return self.getToken(PHPParser.Var, 0)

        def While(self):
            return self.getToken(PHPParser.While, 0)

        def Yield(self):
            return self.getToken(PHPParser.Yield, 0)

        def Get(self):
            return self.getToken(PHPParser.Get, 0)

        def Set(self):
            return self.getToken(PHPParser.Set, 0)

        def Call(self):
            return self.getToken(PHPParser.Call, 0)

        def CallStatic(self):
            return self.getToken(PHPParser.CallStatic, 0)

        def Constructor(self):
            return self.getToken(PHPParser.Constructor, 0)

        def Destruct(self):
            return self.getToken(PHPParser.Destruct, 0)

        def Wakeup(self):
            return self.getToken(PHPParser.Wakeup, 0)

        def Sleep(self):
            return self.getToken(PHPParser.Sleep, 0)

        def Autoload(self):
            return self.getToken(PHPParser.Autoload, 0)

        def IsSet__(self):
            return self.getToken(PHPParser.IsSet__, 0)

        def Unset__(self):
            return self.getToken(PHPParser.Unset__, 0)

        def ToString__(self):
            return self.getToken(PHPParser.ToString__, 0)

        def Invoke(self):
            return self.getToken(PHPParser.Invoke, 0)

        def SetState(self):
            return self.getToken(PHPParser.SetState, 0)

        def Clone__(self):
            return self.getToken(PHPParser.Clone__, 0)

        def DebugInfo(self):
            return self.getToken(PHPParser.DebugInfo, 0)

        def Namespace__(self):
            return self.getToken(PHPParser.Namespace__, 0)

        def Class__(self):
            return self.getToken(PHPParser.Class__, 0)

        def Traic__(self):
            return self.getToken(PHPParser.Traic__, 0)

        def Function__(self):
            return self.getToken(PHPParser.Function__, 0)

        def Method__(self):
            return self.getToken(PHPParser.Method__, 0)

        def Line__(self):
            return self.getToken(PHPParser.Line__, 0)

        def File__(self):
            return self.getToken(PHPParser.File__, 0)

        def Dir__(self):
            return self.getToken(PHPParser.Dir__, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = PHPParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            _la = self._input.LA(1)
            if not(((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)) | (1 << (PHPParser.Final - 40)) | (1 << (PHPParser.Finally - 40)) | (1 << (PHPParser.FloatCast - 40)) | (1 << (PHPParser.For - 40)) | (1 << (PHPParser.Foreach - 40)) | (1 << (PHPParser.Function - 40)) | (1 << (PHPParser.Global - 40)) | (1 << (PHPParser.Goto - 40)) | (1 << (PHPParser.If - 40)) | (1 << (PHPParser.Implements - 40)) | (1 << (PHPParser.Import - 40)) | (1 << (PHPParser.Include - 40)) | (1 << (PHPParser.IncludeOnce - 40)) | (1 << (PHPParser.InstanceOf - 40)) | (1 << (PHPParser.InsteadOf - 40)) | (1 << (PHPParser.Int8Cast - 40)) | (1 << (PHPParser.Int16Cast - 40)) | (1 << (PHPParser.Int64Type - 40)) | (1 << (PHPParser.IntType - 40)) | (1 << (PHPParser.Interface - 40)) | (1 << (PHPParser.IsSet - 40)) | (1 << (PHPParser.List - 40)) | (1 << (PHPParser.LogicalAnd - 40)) | (1 << (PHPParser.LogicalOr - 40)) | (1 << (PHPParser.LogicalXor - 40)) | (1 << (PHPParser.Namespace - 40)) | (1 << (PHPParser.New - 40)) | (1 << (PHPParser.Null - 40)) | (1 << (PHPParser.ObjectType - 40)) | (1 << (PHPParser.Parent_ - 40)) | (1 << (PHPParser.Partial - 40)) | (1 << (PHPParser.Print - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)) | (1 << (PHPParser.ToString__ - 104)) | (1 << (PHPParser.Invoke - 104)) | (1 << (PHPParser.SetState - 104)) | (1 << (PHPParser.Clone__ - 104)) | (1 << (PHPParser.DebugInfo - 104)) | (1 << (PHPParser.Namespace__ - 104)) | (1 << (PHPParser.Class__ - 104)) | (1 << (PHPParser.Traic__ - 104)) | (1 << (PHPParser.Function__ - 104)) | (1 << (PHPParser.Method__ - 104)) | (1 << (PHPParser.Line__ - 104)) | (1 << (PHPParser.File__ - 104)) | (1 << (PHPParser.Dir__ - 104)))) != 0) or _la==PHPParser.Label):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Public(self):
            return self.getToken(PHPParser.Public, 0)

        def Protected(self):
            return self.getToken(PHPParser.Protected, 0)

        def Private(self):
            return self.getToken(PHPParser.Private, 0)

        def Static(self):
            return self.getToken(PHPParser.Static, 0)

        def Abstract(self):
            return self.getToken(PHPParser.Abstract, 0)

        def Final(self):
            return self.getToken(PHPParser.Final, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_memberModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberModifier" ):
                listener.enterMemberModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberModifier" ):
                listener.exitMemberModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberModifier" ):
                return visitor.visitMemberModifier(self)
            else:
                return visitor.visitChildren(self)




    def memberModifier(self):

        localctx = PHPParser.MemberModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_memberModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1623
            _la = self._input.LA(1)
            if not(_la==PHPParser.Abstract or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Private - 72)) | (1 << (PHPParser.Protected - 72)) | (1 << (PHPParser.Public - 72)) | (1 << (PHPParser.Static - 72)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MagicConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace__(self):
            return self.getToken(PHPParser.Namespace__, 0)

        def Class__(self):
            return self.getToken(PHPParser.Class__, 0)

        def Traic__(self):
            return self.getToken(PHPParser.Traic__, 0)

        def Function__(self):
            return self.getToken(PHPParser.Function__, 0)

        def Method__(self):
            return self.getToken(PHPParser.Method__, 0)

        def Line__(self):
            return self.getToken(PHPParser.Line__, 0)

        def File__(self):
            return self.getToken(PHPParser.File__, 0)

        def Dir__(self):
            return self.getToken(PHPParser.Dir__, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_magicConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMagicConstant" ):
                listener.enterMagicConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMagicConstant" ):
                listener.exitMagicConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMagicConstant" ):
                return visitor.visitMagicConstant(self)
            else:
                return visitor.visitChildren(self)




    def magicConstant(self):

        localctx = PHPParser.MagicConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_magicConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1625
            _la = self._input.LA(1)
            if not(((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & ((1 << (PHPParser.Namespace__ - 141)) | (1 << (PHPParser.Class__ - 141)) | (1 << (PHPParser.Traic__ - 141)) | (1 << (PHPParser.Function__ - 141)) | (1 << (PHPParser.Method__ - 141)) | (1 << (PHPParser.Line__ - 141)) | (1 << (PHPParser.File__ - 141)) | (1 << (PHPParser.Dir__ - 141)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MagicMethodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Get(self):
            return self.getToken(PHPParser.Get, 0)

        def Set(self):
            return self.getToken(PHPParser.Set, 0)

        def Call(self):
            return self.getToken(PHPParser.Call, 0)

        def CallStatic(self):
            return self.getToken(PHPParser.CallStatic, 0)

        def Constructor(self):
            return self.getToken(PHPParser.Constructor, 0)

        def Destruct(self):
            return self.getToken(PHPParser.Destruct, 0)

        def Wakeup(self):
            return self.getToken(PHPParser.Wakeup, 0)

        def Sleep(self):
            return self.getToken(PHPParser.Sleep, 0)

        def Autoload(self):
            return self.getToken(PHPParser.Autoload, 0)

        def IsSet__(self):
            return self.getToken(PHPParser.IsSet__, 0)

        def Unset__(self):
            return self.getToken(PHPParser.Unset__, 0)

        def ToString__(self):
            return self.getToken(PHPParser.ToString__, 0)

        def Invoke(self):
            return self.getToken(PHPParser.Invoke, 0)

        def SetState(self):
            return self.getToken(PHPParser.SetState, 0)

        def Clone__(self):
            return self.getToken(PHPParser.Clone__, 0)

        def DebugInfo(self):
            return self.getToken(PHPParser.DebugInfo, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_magicMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMagicMethod" ):
                listener.enterMagicMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMagicMethod" ):
                listener.exitMagicMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMagicMethod" ):
                return visitor.visitMagicMethod(self)
            else:
                return visitor.visitChildren(self)




    def magicMethod(self):

        localctx = PHPParser.MagicMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_magicMethod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1627
            _la = self._input.LA(1)
            if not(((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (PHPParser.Get - 125)) | (1 << (PHPParser.Set - 125)) | (1 << (PHPParser.Call - 125)) | (1 << (PHPParser.CallStatic - 125)) | (1 << (PHPParser.Constructor - 125)) | (1 << (PHPParser.Destruct - 125)) | (1 << (PHPParser.Wakeup - 125)) | (1 << (PHPParser.Sleep - 125)) | (1 << (PHPParser.Autoload - 125)) | (1 << (PHPParser.IsSet__ - 125)) | (1 << (PHPParser.Unset__ - 125)) | (1 << (PHPParser.ToString__ - 125)) | (1 << (PHPParser.Invoke - 125)) | (1 << (PHPParser.SetState - 125)) | (1 << (PHPParser.Clone__ - 125)) | (1 << (PHPParser.DebugInfo - 125)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimitiveTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BoolType(self):
            return self.getToken(PHPParser.BoolType, 0)

        def IntType(self):
            return self.getToken(PHPParser.IntType, 0)

        def Int64Type(self):
            return self.getToken(PHPParser.Int64Type, 0)

        def DoubleType(self):
            return self.getToken(PHPParser.DoubleType, 0)

        def StringType(self):
            return self.getToken(PHPParser.StringType, 0)

        def Resource(self):
            return self.getToken(PHPParser.Resource, 0)

        def ObjectType(self):
            return self.getToken(PHPParser.ObjectType, 0)

        def Array(self):
            return self.getToken(PHPParser.Array, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitiveType" ):
                return visitor.visitPrimitiveType(self)
            else:
                return visitor.visitChildren(self)




    def primitiveType(self):

        localctx = PHPParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1629
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PHPParser.Array) | (1 << PHPParser.BoolType) | (1 << PHPParser.DoubleType))) != 0) or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (PHPParser.Int64Type - 89)) | (1 << (PHPParser.IntType - 89)) | (1 << (PHPParser.ObjectType - 89)) | (1 << (PHPParser.Resource - 89)) | (1 << (PHPParser.StringType - 89)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BoolType(self):
            return self.getToken(PHPParser.BoolType, 0)

        def Int8Cast(self):
            return self.getToken(PHPParser.Int8Cast, 0)

        def Int16Cast(self):
            return self.getToken(PHPParser.Int16Cast, 0)

        def IntType(self):
            return self.getToken(PHPParser.IntType, 0)

        def Int64Type(self):
            return self.getToken(PHPParser.Int64Type, 0)

        def UintCast(self):
            return self.getToken(PHPParser.UintCast, 0)

        def DoubleCast(self):
            return self.getToken(PHPParser.DoubleCast, 0)

        def DoubleType(self):
            return self.getToken(PHPParser.DoubleType, 0)

        def FloatCast(self):
            return self.getToken(PHPParser.FloatCast, 0)

        def StringType(self):
            return self.getToken(PHPParser.StringType, 0)

        def BinaryCast(self):
            return self.getToken(PHPParser.BinaryCast, 0)

        def UnicodeCast(self):
            return self.getToken(PHPParser.UnicodeCast, 0)

        def Array(self):
            return self.getToken(PHPParser.Array, 0)

        def ObjectType(self):
            return self.getToken(PHPParser.ObjectType, 0)

        def Resource(self):
            return self.getToken(PHPParser.Resource, 0)

        def Unset(self):
            return self.getToken(PHPParser.Unset, 0)

        def getRuleIndex(self):
            return PHPParser.RULE_castOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastOperation" ):
                listener.enterCastOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastOperation" ):
                listener.exitCastOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastOperation" ):
                return visitor.visitCastOperation(self)
            else:
                return visitor.visitChildren(self)




    def castOperation(self):

        localctx = PHPParser.CastOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_castOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PHPParser.Array) | (1 << PHPParser.BinaryCast) | (1 << PHPParser.BoolType) | (1 << PHPParser.DoubleCast) | (1 << PHPParser.DoubleType))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (PHPParser.FloatCast - 74)) | (1 << (PHPParser.Int8Cast - 74)) | (1 << (PHPParser.Int16Cast - 74)) | (1 << (PHPParser.Int64Type - 74)) | (1 << (PHPParser.IntType - 74)) | (1 << (PHPParser.ObjectType - 74)) | (1 << (PHPParser.Resource - 74)) | (1 << (PHPParser.StringType - 74)) | (1 << (PHPParser.UintCast - 74)) | (1 << (PHPParser.UnicodeCast - 74)) | (1 << (PHPParser.Unset - 74)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[82] = self.expression_sempred
        self._predicates[83] = self.andOrExpression_sempred
        self._predicates[84] = self.comparisonExpression_sempred
        self._predicates[85] = self.additionExpression_sempred
        self._predicates[86] = self.multiplicationExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def andOrExpression_sempred(self, localctx:AndOrExpressionContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         

    def comparisonExpression_sempred(self, localctx:ComparisonExpressionContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         

    def additionExpression_sempred(self, localctx:AdditionExpressionContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def multiplicationExpression_sempred(self, localctx:MultiplicationExpressionContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         




